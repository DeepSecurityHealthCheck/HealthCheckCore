# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.855
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AntiMalwareConfigurationRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_create_new_anti_malware_configurations': 'bool',
        'can_delete_anti_malware_configurations': 'bool',
        'can_edit_anti_malware_configurations': 'bool'
    }

    attribute_map = {
        'can_create_new_anti_malware_configurations': 'canCreateNewAntiMalwareConfigurations',
        'can_delete_anti_malware_configurations': 'canDeleteAntiMalwareConfigurations',
        'can_edit_anti_malware_configurations': 'canEditAntiMalwareConfigurations'
    }

    def __init__(self, can_create_new_anti_malware_configurations=None, can_delete_anti_malware_configurations=None, can_edit_anti_malware_configurations=None):  # noqa: E501
        """AntiMalwareConfigurationRights - a model defined in Swagger"""  # noqa: E501

        self._can_create_new_anti_malware_configurations = None
        self._can_delete_anti_malware_configurations = None
        self._can_edit_anti_malware_configurations = None
        self.discriminator = None

        if can_create_new_anti_malware_configurations is not None:
            self.can_create_new_anti_malware_configurations = can_create_new_anti_malware_configurations
        if can_delete_anti_malware_configurations is not None:
            self.can_delete_anti_malware_configurations = can_delete_anti_malware_configurations
        if can_edit_anti_malware_configurations is not None:
            self.can_edit_anti_malware_configurations = can_edit_anti_malware_configurations

    @property
    def can_create_new_anti_malware_configurations(self):
        """Gets the can_create_new_anti_malware_configurations of this AntiMalwareConfigurationRights.  # noqa: E501

        Right to create new antimalware configurations.  # noqa: E501

        :return: The can_create_new_anti_malware_configurations of this AntiMalwareConfigurationRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_new_anti_malware_configurations

    @can_create_new_anti_malware_configurations.setter
    def can_create_new_anti_malware_configurations(self, can_create_new_anti_malware_configurations):
        """Sets the can_create_new_anti_malware_configurations of this AntiMalwareConfigurationRights.

        Right to create new antimalware configurations.  # noqa: E501

        :param can_create_new_anti_malware_configurations: The can_create_new_anti_malware_configurations of this AntiMalwareConfigurationRights.  # noqa: E501
        :type: bool
        """

        self._can_create_new_anti_malware_configurations = can_create_new_anti_malware_configurations

    @property
    def can_delete_anti_malware_configurations(self):
        """Gets the can_delete_anti_malware_configurations of this AntiMalwareConfigurationRights.  # noqa: E501

        Right to delete antimalware configurations.  # noqa: E501

        :return: The can_delete_anti_malware_configurations of this AntiMalwareConfigurationRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_anti_malware_configurations

    @can_delete_anti_malware_configurations.setter
    def can_delete_anti_malware_configurations(self, can_delete_anti_malware_configurations):
        """Sets the can_delete_anti_malware_configurations of this AntiMalwareConfigurationRights.

        Right to delete antimalware configurations.  # noqa: E501

        :param can_delete_anti_malware_configurations: The can_delete_anti_malware_configurations of this AntiMalwareConfigurationRights.  # noqa: E501
        :type: bool
        """

        self._can_delete_anti_malware_configurations = can_delete_anti_malware_configurations

    @property
    def can_edit_anti_malware_configurations(self):
        """Gets the can_edit_anti_malware_configurations of this AntiMalwareConfigurationRights.  # noqa: E501

        Right to edit antimalware configurations.  # noqa: E501

        :return: The can_edit_anti_malware_configurations of this AntiMalwareConfigurationRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_anti_malware_configurations

    @can_edit_anti_malware_configurations.setter
    def can_edit_anti_malware_configurations(self, can_edit_anti_malware_configurations):
        """Sets the can_edit_anti_malware_configurations of this AntiMalwareConfigurationRights.

        Right to edit antimalware configurations.  # noqa: E501

        :param can_edit_anti_malware_configurations: The can_edit_anti_malware_configurations of this AntiMalwareConfigurationRights.  # noqa: E501
        :type: bool
        """

        self._can_edit_anti_malware_configurations = can_edit_anti_malware_configurations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AntiMalwareConfigurationRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AntiMalwareConfigurationRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

