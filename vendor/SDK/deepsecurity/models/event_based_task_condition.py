# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.855
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventBasedTaskCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'key': 'str',
        'value': 'str'
    }

    attribute_map = {
        'field': 'field',
        'key': 'key',
        'value': 'value'
    }

    def __init__(self, field=None, key=None, value=None):  # noqa: E501
        """EventBasedTaskCondition - a model defined in Swagger"""  # noqa: E501

        self._field = None
        self._key = None
        self._value = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if key is not None:
            self.key = key
        if value is not None:
            self.value = value

    @property
    def field(self):
        """Gets the field of this EventBasedTaskCondition.  # noqa: E501

        The event field to match against when evaluating this condition. Use `tag` enum to specify \"Cloud Instance Metadata\" which correspond to \"AWS Tags\" or \"GCP Labels\".  # noqa: E501

        :return: The field of this EventBasedTaskCondition.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this EventBasedTaskCondition.

        The event field to match against when evaluating this condition. Use `tag` enum to specify \"Cloud Instance Metadata\" which correspond to \"AWS Tags\" or \"GCP Labels\".  # noqa: E501

        :param field: The field of this EventBasedTaskCondition.  # noqa: E501
        :type: str
        """
        allowed_values = ["hostname", "vcenter", "cloudProvider", "securityGroup", "imageId", "esx", "folder", "platform", "applianceProtectionAvailable", "applianceProtectionActivated", "lastUsedIP", "tag", "nsxSecurityGroup", "cloudVendor", "gcpNetworkTag"]  # noqa: E501
        if field not in allowed_values:
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"  # noqa: E501
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def key(self):
        """Gets the key of this EventBasedTaskCondition.  # noqa: E501

        If matching against a key/value field, then the key to match when evaluating this condition.  # noqa: E501

        :return: The key of this EventBasedTaskCondition.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EventBasedTaskCondition.

        If matching against a key/value field, then the key to match when evaluating this condition.  # noqa: E501

        :param key: The key of this EventBasedTaskCondition.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def value(self):
        """Gets the value of this EventBasedTaskCondition.  # noqa: E501

        The value to match when evaluating this condition.  # noqa: E501

        :return: The value of this EventBasedTaskCondition.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EventBasedTaskCondition.

        The value to match when evaluating this condition.  # noqa: E501

        :param value: The value of this EventBasedTaskCondition.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventBasedTaskCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventBasedTaskCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

