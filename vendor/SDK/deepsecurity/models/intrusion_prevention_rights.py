# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.969
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepsecurity.models.application_type_rights import ApplicationTypeRights  # noqa: F401,E501
from deepsecurity.models.intrusion_prevention_rule_rights import IntrusionPreventionRuleRights  # noqa: F401,E501


class IntrusionPreventionRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_type_rights': 'ApplicationTypeRights',
        'intrusion_prevention_rule_rights': 'IntrusionPreventionRuleRights'
    }

    attribute_map = {
        'application_type_rights': 'applicationTypeRights',
        'intrusion_prevention_rule_rights': 'intrusionPreventionRuleRights'
    }

    def __init__(self, application_type_rights=None, intrusion_prevention_rule_rights=None):  # noqa: E501
        """IntrusionPreventionRights - a model defined in Swagger"""  # noqa: E501

        self._application_type_rights = None
        self._intrusion_prevention_rule_rights = None
        self.discriminator = None

        if application_type_rights is not None:
            self.application_type_rights = application_type_rights
        if intrusion_prevention_rule_rights is not None:
            self.intrusion_prevention_rule_rights = intrusion_prevention_rule_rights

    @property
    def application_type_rights(self):
        """Gets the application_type_rights of this IntrusionPreventionRights.  # noqa: E501

        Rights related to application types.  # noqa: E501

        :return: The application_type_rights of this IntrusionPreventionRights.  # noqa: E501
        :rtype: ApplicationTypeRights
        """
        return self._application_type_rights

    @application_type_rights.setter
    def application_type_rights(self, application_type_rights):
        """Sets the application_type_rights of this IntrusionPreventionRights.

        Rights related to application types.  # noqa: E501

        :param application_type_rights: The application_type_rights of this IntrusionPreventionRights.  # noqa: E501
        :type: ApplicationTypeRights
        """

        self._application_type_rights = application_type_rights

    @property
    def intrusion_prevention_rule_rights(self):
        """Gets the intrusion_prevention_rule_rights of this IntrusionPreventionRights.  # noqa: E501

        Rights related to intrusion prevention rules.  # noqa: E501

        :return: The intrusion_prevention_rule_rights of this IntrusionPreventionRights.  # noqa: E501
        :rtype: IntrusionPreventionRuleRights
        """
        return self._intrusion_prevention_rule_rights

    @intrusion_prevention_rule_rights.setter
    def intrusion_prevention_rule_rights(self, intrusion_prevention_rule_rights):
        """Sets the intrusion_prevention_rule_rights of this IntrusionPreventionRights.

        Rights related to intrusion prevention rules.  # noqa: E501

        :param intrusion_prevention_rule_rights: The intrusion_prevention_rule_rights of this IntrusionPreventionRights.  # noqa: E501
        :type: IntrusionPreventionRuleRights
        """

        self._intrusion_prevention_rule_rights = intrusion_prevention_rule_rights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntrusionPreventionRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntrusionPreventionRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

