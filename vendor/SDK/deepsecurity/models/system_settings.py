# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.855
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepsecurity.models.setting_value import SettingValue  # noqa: F401,E501


class SystemSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform_setting_saml_identity_provider_certificate_expiry_warning_days': 'SettingValue',
        'platform_setting_update_agent_security_on_missing_deep_security_manager_enabled': 'SettingValue',
        'platform_setting_ddan_manual_source_server_url': 'SettingValue',
        'platform_setting_load_balancer_manager_port': 'SettingValue',
        'platform_setting_smart_protection_feedback_threat_detections_threshold': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_medium': 'SettingValue',
        'firewall_setting_intranet_connectivity_test_expected_content_regex': 'SettingValue',
        'platform_setting_event_forwarding_sns_enabled': 'SettingValue',
        'platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout': 'SettingValue',
        'web_reputation_setting_event_rank_risk_blocked_by_administrator_rank': 'SettingValue',
        'platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled': 'SettingValue',
        'anti_malware_setting_event_email_recipients': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled': 'SettingValue',
        'platform_setting_http_strict_transport_enabled': 'SettingValue',
        'firewall_setting_intranet_connectivity_test_url': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_configure_sns_enabled': 'SettingValue',
        'platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled': 'SettingValue',
        'platform_setting_exported_diagnostic_package_locale': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_critical': 'SettingValue',
        'platform_setting_update_imported_software_auto_download_enabled': 'SettingValue',
        'platform_setting_demo_mode_enabled': 'SettingValue',
        'platform_setting_user_enforce_terms_and_conditions_message': 'SettingValue',
        'platform_setting_trend_micro_xdr_common_log_receiver_url': 'SettingValue',
        'platform_setting_managed_detect_response_company_guid': 'SettingValue',
        'platform_setting_alert_default_email_address': 'SettingValue',
        'platform_setting_agent_initiated_activation_reactivate_cloned_enabled': 'SettingValue',
        'platform_setting_managed_detect_response_server_url': 'SettingValue',
        'platform_setting_primary_tenant_share_managed_detect_responses_enabled': 'SettingValue',
        'platform_setting_saml_service_provider_certificate': 'SettingValue',
        'platform_setting_syslog_config_id': 'SettingValue',
        'platform_setting_smtp_start_tls_enabled': 'SettingValue',
        'platform_setting_user_password_require_letters_and_numbers_enabled': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled': 'SettingValue',
        'platform_setting_load_balancer_relay_port': 'SettingValue',
        'platform_setting_managed_detect_response_enabled': 'SettingValue',
        'platform_setting_update_rules_policy_auto_apply_enabled': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled': 'SettingValue',
        'platform_setting_user_password_require_not_same_as_username_enabled': 'SettingValue',
        'log_inspection_setting_event_rank_severity_medium': 'SettingValue',
        'anti_malware_setting_retain_event_duration': 'SettingValue',
        'platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled': 'SettingValue',
        'firewall_setting_event_rank_severity_log_only': 'SettingValue',
        'platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled': 'SettingValue',
        'application_control_setting_retain_event_duration': 'SettingValue',
        'platform_setting_api_soap_web_service_enabled': 'SettingValue',
        'platform_setting_saml_service_provider_private_key': 'SettingValue',
        'platform_setting_windows_upgrade_on_activation_enabled': 'SettingValue',
        'platform_setting_system_event_forwarding_snmp_port': 'SettingValue',
        'firewall_setting_event_rank_severity_deny': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_low': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled': 'SettingValue',
        'platform_setting_recommendation_cpu_usage_level': 'SettingValue',
        'platform_setting_managed_detect_response_service_token': 'SettingValue',
        'platform_setting_load_balancer_heartbeat_address': 'SettingValue',
        'platform_setting_trend_micro_xdr_api_user': 'SettingValue',
        'platform_setting_content_security_policy_report_only_enabled': 'SettingValue',
        'log_inspection_setting_retain_event_duration': 'SettingValue',
        'platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled': 'SettingValue',
        'anti_malware_setting_event_email_body_template': 'SettingValue',
        'platform_setting_retain_security_updates_max': 'SettingValue',
        'platform_setting_connected_threat_defense_control_manager_source_option': 'SettingValue',
        'anti_malware_setting_event_email_enabled': 'SettingValue',
        'platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled': 'SettingValue',
        'platform_setting_recommendation_ongoing_scans_enabled': 'SettingValue',
        'platform_setting_agent_initiated_activation_token': 'SettingValue',
        'platform_setting_user_password_length_min': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_database_state': 'SettingValue',
        'platform_setting_aws_manager_identity_use_instance_role_enabled': 'SettingValue',
        'platform_setting_content_security_policy': 'SettingValue',
        'platform_setting_product_usage_data_collection_enabled': 'SettingValue',
        'platform_setting_alert_agent_update_pending_threshold': 'SettingValue',
        'platform_setting_user_password_require_special_characters_enabled': 'SettingValue',
        'platform_setting_update_appliance_default_agent_version': 'SettingValue',
        'platform_setting_system_event_forwarding_snmp_enabled': 'SettingValue',
        'platform_setting_smtp_bounce_email_address': 'SettingValue',
        'platform_setting_update_relay_security_support_agent9_and_earlier_enabled': 'SettingValue',
        'platform_setting_managed_detect_response_proxy_id': 'SettingValue',
        'platform_setting_trend_micro_xdr_log_server_url': 'SettingValue',
        'platform_setting_inactive_agent_cleanup_enabled': 'SettingValue',
        'platform_setting_load_balancer_relay_address': 'SettingValue',
        'platform_setting_http_public_key_pin_policy': 'SettingValue',
        'platform_setting_user_session_idle_timeout': 'SettingValue',
        'anti_malware_setting_event_email_subject': 'SettingValue',
        'platform_setting_connected_threat_defense_control_manager_use_proxy_enabled': 'SettingValue',
        'platform_setting_user_enforce_terms_and_conditions_enabled': 'SettingValue',
        'platform_setting_aws_manager_identity_access_key': 'SettingValue',
        'platform_setting_connected_threat_defense_control_manager_proxy_id': 'SettingValue',
        'platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled': 'SettingValue',
        'platform_setting_connected_threat_defense_control_manager_manual_source_server_url': 'SettingValue',
        'platform_setting_user_password_require_mixed_case_enabled': 'SettingValue',
        'platform_setting_trend_micro_xdr_identity_provider_api_url': 'SettingValue',
        'platform_setting_smart_protection_feedback_for_suspicious_file_enabled': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled': 'SettingValue',
        'platform_setting_smart_protection_feedback_industry_type': 'SettingValue',
        'web_reputation_setting_retain_event_duration': 'SettingValue',
        'platform_setting_retain_server_log_duration': 'SettingValue',
        'integrity_monitoring_setting_event_rank_severity_medium': 'SettingValue',
        'platform_setting_proxy_manager_cloud_proxy_id': 'SettingValue',
        'platform_setting_update_relay_security_all_regions_patterns_download_enabled': 'SettingValue',
        'platform_setting_ddan_submission_enabled': 'SettingValue',
        'web_reputation_setting_event_rank_risk_suspicious': 'SettingValue',
        'integrity_monitoring_setting_event_rank_severity_critical': 'SettingValue',
        'platform_setting_smtp_from_email_address': 'SettingValue',
        'firewall_setting_global_stateful_config_id': 'SettingValue',
        'platform_setting_event_forwarding_sns_topic_arn': 'SettingValue',
        'firewall_setting_internet_connectivity_test_expected_content_regex': 'SettingValue',
        'platform_setting_connected_threat_defense_control_manager_manual_source_api_key': 'SettingValue',
        'platform_setting_load_balancer_manager_address': 'SettingValue',
        'platform_setting_update_security_primary_source_mode': 'SettingValue',
        'platform_setting_primary_tenant_share_connected_threat_defenses_enabled': 'SettingValue',
        'web_reputation_setting_event_rank_risk_dangerous': 'SettingValue',
        'platform_setting_load_balancer_heartbeat_port': 'SettingValue',
        'platform_setting_user_hide_unlicensed_modules_enabled': 'SettingValue',
        'platform_setting_capture_encrypted_traffic_enabled': 'SettingValue',
        'platform_setting_retain_system_event_duration': 'SettingValue',
        'platform_setting_user_password_expiry': 'SettingValue',
        'platform_setting_smart_protection_feedback_enabled': 'SettingValue',
        'integrity_monitoring_setting_retain_event_duration': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled': 'SettingValue',
        'log_inspection_setting_event_rank_severity_critical': 'SettingValue',
        'platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled': 'SettingValue',
        'platform_setting_ddan_proxy_id': 'SettingValue',
        'platform_setting_agent_initiated_activation_within_ip_list_id': 'SettingValue',
        'platform_setting_update_security_primary_source_url': 'SettingValue',
        'platform_setting_agentless_vcloud_protection_enabled': 'SettingValue',
        'platform_setting_linux_upgrade_on_activation_enabled': 'SettingValue',
        'platform_setting_trend_micro_xdr_enabled': 'SettingValue',
        'platform_setting_active_sessions_max_exceeded_action': 'SettingValue',
        'platform_setting_update_hostname_on_ip_change_enabled': 'SettingValue',
        'log_inspection_setting_event_rank_severity_high': 'SettingValue',
        'platform_setting_smtp_requires_authentication_enabled': 'SettingValue',
        'platform_setting_active_sessions_max': 'SettingValue',
        'platform_setting_aws_external_id_retrieval_enabled': 'SettingValue',
        'log_inspection_setting_event_rank_severity_low': 'SettingValue',
        'platform_setting_azure_sso_certificate': 'SettingValue',
        'platform_setting_smtp_username': 'SettingValue',
        'platform_setting_event_forwarding_sns_advanced_config_enabled': 'SettingValue',
        'firewall_setting_internet_connectivity_test_interval': 'SettingValue',
        'platform_setting_whois_url': 'SettingValue',
        'platform_setting_ddan_source_option': 'SettingValue',
        'platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled': 'SettingValue',
        'platform_setting_exported_file_character_encoding': 'SettingValue',
        'platform_setting_user_session_duration_max': 'SettingValue',
        'platform_setting_update_software_alternate_update_server_urls': 'SettingValue',
        'platform_setting_retain_counters_duration': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled': 'SettingValue',
        'platform_setting_smart_protection_feedback_interval': 'SettingValue',
        'platform_setting_system_event_forwarding_snmp_address': 'SettingValue',
        'platform_setting_smtp_server_address': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_configure_siem_enabled': 'SettingValue',
        'platform_setting_smtp_password': 'SettingValue',
        'platform_setting_event_forwarding_sns_config_json': 'SettingValue',
        'firewall_setting_retain_event_duration': 'SettingValue',
        'web_reputation_setting_event_rank_risk_untested': 'SettingValue',
        'platform_setting_managed_detect_response_use_proxy_enabled': 'SettingValue',
        'platform_setting_event_forwarding_sns_secret_key': 'SettingValue',
        'platform_setting_logo_binary_image_img': 'SettingValue',
        'platform_setting_aws_manager_identity_secret_key': 'SettingValue',
        'web_reputation_setting_event_rank_risk_highly_suspicious': 'SettingValue',
        'platform_setting_api_status_monitoring_enabled': 'SettingValue',
        'platform_setting_sign_in_page_message': 'SettingValue',
        'platform_setting_user_password_expiry_send_email_enabled': 'SettingValue',
        'platform_setting_user_sign_in_attempts_allowed_number': 'SettingValue',
        'platform_setting_ddan_use_proxy_enabled': 'SettingValue',
        'platform_setting_agent_initiated_activation_enabled': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled': 'SettingValue',
        'platform_setting_smart_protection_feedback_bandwidth_max_kbytes': 'SettingValue',
        'firewall_setting_event_rank_severity_packet_rejection': 'SettingValue',
        'platform_setting_proxy_manager_update_proxy_id': 'SettingValue',
        'platform_setting_managed_detect_response_use_primary_tenant_settings_enabled': 'SettingValue',
        'platform_setting_event_forwarding_sns_access_key': 'SettingValue',
        'platform_setting_agent_initiated_activation_specify_hostname_enabled': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled': 'SettingValue',
        'platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled': 'SettingValue',
        'platform_setting_inactive_agent_cleanup_duration': 'SettingValue',
        'platform_setting_agent_initiated_activation_duplicate_hostname_mode': 'SettingValue',
        'platform_setting_vmware_nsx_manager_node': 'SettingValue',
        'platform_setting_user_enforce_terms_and_conditions_title': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled': 'SettingValue',
        'platform_setting_new_tenant_download_security_update_enabled': 'SettingValue',
        'platform_setting_tenant_protection_usage_monitoring_computer_id3': 'SettingValue',
        'platform_setting_agent_initiated_activation_reactivate_unknown_enabled': 'SettingValue',
        'platform_setting_tenant_protection_usage_monitoring_computer_id2': 'SettingValue',
        'platform_setting_agent_initiated_activation_policy_id': 'SettingValue',
        'platform_setting_tenant_protection_usage_monitoring_computer_id1': 'SettingValue',
        'platform_setting_trend_micro_xdr_api_server_url': 'SettingValue',
        'platform_setting_retain_agent_installers_per_platform_max': 'SettingValue',
        'application_control_setting_serve_rulesets_from_relays_enabled': 'SettingValue',
        'integrity_monitoring_setting_event_rank_severity_high': 'SettingValue',
        'platform_setting_saml_retain_inactive_external_administrators_duration': 'SettingValue',
        'intrusion_prevention_setting_retain_event_duration': 'SettingValue',
        'platform_setting_http_public_key_pin_policy_report_only_enabled': 'SettingValue',
        'platform_setting_saml_service_provider_name': 'SettingValue',
        'firewall_setting_internet_connectivity_test_url': 'SettingValue',
        'platform_setting_saml_service_provider_certificate_expiry_warning_days': 'SettingValue',
        'platform_setting_proxy_agent_update_proxy_id': 'SettingValue',
        'platform_setting_ddan_auto_submission_enabled': 'SettingValue',
        'platform_setting_ddan_manual_source_api_key': 'SettingValue',
        'platform_setting_saml_service_provider_entity_id': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_error': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_high': 'SettingValue',
        'platform_setting_trend_micro_xdr_api_key': 'SettingValue',
        'integrity_monitoring_setting_event_rank_severity_low': 'SettingValue',
        'platform_setting_trend_micro_xdr_company_id': 'SettingValue'
    }

    attribute_map = {
        'platform_setting_saml_identity_provider_certificate_expiry_warning_days': 'platformSettingSamlIdentityProviderCertificateExpiryWarningDays',
        'platform_setting_update_agent_security_on_missing_deep_security_manager_enabled': 'platformSettingUpdateAgentSecurityOnMissingDeepSecurityManagerEnabled',
        'platform_setting_ddan_manual_source_server_url': 'platformSettingDdanManualSourceServerUrl',
        'platform_setting_load_balancer_manager_port': 'platformSettingLoadBalancerManagerPort',
        'platform_setting_smart_protection_feedback_threat_detections_threshold': 'platformSettingSmartProtectionFeedbackThreatDetectionsThreshold',
        'platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled': 'platformSettingPrimaryTenantAllowTenantRunPortScanEnabled',
        'intrusion_prevention_setting_event_rank_severity_filter_medium': 'intrusionPreventionSettingEventRankSeverityFilterMedium',
        'firewall_setting_intranet_connectivity_test_expected_content_regex': 'firewallSettingIntranetConnectivityTestExpectedContentRegex',
        'platform_setting_event_forwarding_sns_enabled': 'platformSettingEventForwardingSnsEnabled',
        'platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout': 'platformSettingTenantAutoRevokeImpersonationByPrimaryTenantTimeout',
        'web_reputation_setting_event_rank_risk_blocked_by_administrator_rank': 'webReputationSettingEventRankRiskBlockedByAdministratorRank',
        'platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled': 'platformSettingPrimaryTenantLockAndHideTenantStorageTabEnabled',
        'anti_malware_setting_event_email_recipients': 'antiMalwareSettingEventEmailRecipients',
        'platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled': 'platformSettingPrimaryTenantAllowTenantUseDefaultRelayGroupEnabled',
        'platform_setting_http_strict_transport_enabled': 'platformSettingHttpStrictTransportEnabled',
        'firewall_setting_intranet_connectivity_test_url': 'firewallSettingIntranetConnectivityTestUrl',
        'platform_setting_primary_tenant_allow_tenant_configure_sns_enabled': 'platformSettingPrimaryTenantAllowTenantConfigureSnsEnabled',
        'platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled': 'platformSettingTenantUseDefaultRelayGroupFromPrimaryTenantEnabled',
        'platform_setting_exported_diagnostic_package_locale': 'platformSettingExportedDiagnosticPackageLocale',
        'intrusion_prevention_setting_event_rank_severity_filter_critical': 'intrusionPreventionSettingEventRankSeverityFilterCritical',
        'platform_setting_update_imported_software_auto_download_enabled': 'platformSettingUpdateImportedSoftwareAutoDownloadEnabled',
        'platform_setting_demo_mode_enabled': 'platformSettingDemoModeEnabled',
        'platform_setting_user_enforce_terms_and_conditions_message': 'platformSettingUserEnforceTermsAndConditionsMessage',
        'platform_setting_trend_micro_xdr_common_log_receiver_url': 'platformSettingTrendMicroXdrCommonLogReceiverUrl',
        'platform_setting_managed_detect_response_company_guid': 'platformSettingManagedDetectResponseCompanyGuid',
        'platform_setting_alert_default_email_address': 'platformSettingAlertDefaultEmailAddress',
        'platform_setting_agent_initiated_activation_reactivate_cloned_enabled': 'platformSettingAgentInitiatedActivationReactivateClonedEnabled',
        'platform_setting_managed_detect_response_server_url': 'platformSettingManagedDetectResponseServerUrl',
        'platform_setting_primary_tenant_share_managed_detect_responses_enabled': 'platformSettingPrimaryTenantShareManagedDetectResponsesEnabled',
        'platform_setting_saml_service_provider_certificate': 'platformSettingSamlServiceProviderCertificate',
        'platform_setting_syslog_config_id': 'platformSettingSyslogConfigId',
        'platform_setting_smtp_start_tls_enabled': 'platformSettingSmtpStartTlsEnabled',
        'platform_setting_user_password_require_letters_and_numbers_enabled': 'platformSettingUserPasswordRequireLettersAndNumbersEnabled',
        'platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled': 'platformSettingPrimaryTenantAllowTenantSynchronizeLdapDirectoriesEnabled',
        'platform_setting_load_balancer_relay_port': 'platformSettingLoadBalancerRelayPort',
        'platform_setting_managed_detect_response_enabled': 'platformSettingManagedDetectResponseEnabled',
        'platform_setting_update_rules_policy_auto_apply_enabled': 'platformSettingUpdateRulesPolicyAutoApplyEnabled',
        'platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled': 'platformSettingPrimaryTenantAllowTenantConfigureForgotPasswordEnabled',
        'platform_setting_user_password_require_not_same_as_username_enabled': 'platformSettingUserPasswordRequireNotSameAsUsernameEnabled',
        'log_inspection_setting_event_rank_severity_medium': 'logInspectionSettingEventRankSeverityMedium',
        'anti_malware_setting_retain_event_duration': 'antiMalwareSettingRetainEventDuration',
        'platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled': 'platformSettingUpdateAgentSecurityContactPrimarySourceOnMissingRelayEnabled',
        'firewall_setting_event_rank_severity_log_only': 'firewallSettingEventRankSeverityLogOnly',
        'platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled': 'platformSettingPrimaryTenantLockAndHideTenantDataPrivacyOptionEnabled',
        'application_control_setting_retain_event_duration': 'applicationControlSettingRetainEventDuration',
        'platform_setting_api_soap_web_service_enabled': 'platformSettingApiSoapWebServiceEnabled',
        'platform_setting_saml_service_provider_private_key': 'platformSettingSamlServiceProviderPrivateKey',
        'platform_setting_windows_upgrade_on_activation_enabled': 'platformSettingWindowsUpgradeOnActivationEnabled',
        'platform_setting_system_event_forwarding_snmp_port': 'platformSettingSystemEventForwardingSnmpPort',
        'firewall_setting_event_rank_severity_deny': 'firewallSettingEventRankSeverityDeny',
        'intrusion_prevention_setting_event_rank_severity_filter_low': 'intrusionPreventionSettingEventRankSeverityFilterLow',
        'platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled': 'platformSettingPrimaryTenantAllowTenantControlImpersonationEnabled',
        'platform_setting_recommendation_cpu_usage_level': 'platformSettingRecommendationCpuUsageLevel',
        'platform_setting_managed_detect_response_service_token': 'platformSettingManagedDetectResponseServiceToken',
        'platform_setting_load_balancer_heartbeat_address': 'platformSettingLoadBalancerHeartbeatAddress',
        'platform_setting_trend_micro_xdr_api_user': 'platformSettingTrendMicroXdrApiUser',
        'platform_setting_content_security_policy_report_only_enabled': 'platformSettingContentSecurityPolicyReportOnlyEnabled',
        'log_inspection_setting_retain_event_duration': 'logInspectionSettingRetainEventDuration',
        'platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled': 'platformSettingTenantAutoRevokeImpersonationByPrimaryTenantEnabled',
        'anti_malware_setting_event_email_body_template': 'antiMalwareSettingEventEmailBodyTemplate',
        'platform_setting_retain_security_updates_max': 'platformSettingRetainSecurityUpdatesMax',
        'platform_setting_connected_threat_defense_control_manager_source_option': 'platformSettingConnectedThreatDefenseControlManagerSourceOption',
        'anti_malware_setting_event_email_enabled': 'antiMalwareSettingEventEmailEnabled',
        'platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled': 'platformSettingUpdateAgentSoftwareUseDownloadCenterOnMissingDeepSecurityManagerEnabled',
        'platform_setting_recommendation_ongoing_scans_enabled': 'platformSettingRecommendationOngoingScansEnabled',
        'platform_setting_agent_initiated_activation_token': 'platformSettingAgentInitiatedActivationToken',
        'platform_setting_user_password_length_min': 'platformSettingUserPasswordLengthMin',
        'platform_setting_primary_tenant_allow_tenant_database_state': 'platformSettingPrimaryTenantAllowTenantDatabaseState',
        'platform_setting_aws_manager_identity_use_instance_role_enabled': 'platformSettingAwsManagerIdentityUseInstanceRoleEnabled',
        'platform_setting_content_security_policy': 'platformSettingContentSecurityPolicy',
        'platform_setting_product_usage_data_collection_enabled': 'platformSettingProductUsageDataCollectionEnabled',
        'platform_setting_alert_agent_update_pending_threshold': 'platformSettingAlertAgentUpdatePendingThreshold',
        'platform_setting_user_password_require_special_characters_enabled': 'platformSettingUserPasswordRequireSpecialCharactersEnabled',
        'platform_setting_update_appliance_default_agent_version': 'platformSettingUpdateApplianceDefaultAgentVersion',
        'platform_setting_system_event_forwarding_snmp_enabled': 'platformSettingSystemEventForwardingSnmpEnabled',
        'platform_setting_smtp_bounce_email_address': 'platformSettingSmtpBounceEmailAddress',
        'platform_setting_update_relay_security_support_agent9_and_earlier_enabled': 'platformSettingUpdateRelaySecuritySupportAgent9AndEarlierEnabled',
        'platform_setting_managed_detect_response_proxy_id': 'platformSettingManagedDetectResponseProxyId',
        'platform_setting_trend_micro_xdr_log_server_url': 'platformSettingTrendMicroXdrLogServerUrl',
        'platform_setting_inactive_agent_cleanup_enabled': 'platformSettingInactiveAgentCleanupEnabled',
        'platform_setting_load_balancer_relay_address': 'platformSettingLoadBalancerRelayAddress',
        'platform_setting_http_public_key_pin_policy': 'platformSettingHttpPublicKeyPinPolicy',
        'platform_setting_user_session_idle_timeout': 'platformSettingUserSessionIdleTimeout',
        'anti_malware_setting_event_email_subject': 'antiMalwareSettingEventEmailSubject',
        'platform_setting_connected_threat_defense_control_manager_use_proxy_enabled': 'platformSettingConnectedThreatDefenseControlManagerUseProxyEnabled',
        'platform_setting_user_enforce_terms_and_conditions_enabled': 'platformSettingUserEnforceTermsAndConditionsEnabled',
        'platform_setting_aws_manager_identity_access_key': 'platformSettingAwsManagerIdentityAccessKey',
        'platform_setting_connected_threat_defense_control_manager_proxy_id': 'platformSettingConnectedThreatDefenseControlManagerProxyId',
        'platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled': 'platformSettingTenantAllowImpersonationByPrimaryTenantEnabled',
        'platform_setting_connected_threat_defense_control_manager_manual_source_server_url': 'platformSettingConnectedThreatDefenseControlManagerManualSourceServerUrl',
        'platform_setting_user_password_require_mixed_case_enabled': 'platformSettingUserPasswordRequireMixedCaseEnabled',
        'platform_setting_trend_micro_xdr_identity_provider_api_url': 'platformSettingTrendMicroXdrIdentityProviderApiUrl',
        'platform_setting_smart_protection_feedback_for_suspicious_file_enabled': 'platformSettingSmartProtectionFeedbackForSuspiciousFileEnabled',
        'platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled': 'platformSettingPrimaryTenantAllowTenantConfigureSnmpEnabled',
        'platform_setting_smart_protection_feedback_industry_type': 'platformSettingSmartProtectionFeedbackIndustryType',
        'web_reputation_setting_retain_event_duration': 'webReputationSettingRetainEventDuration',
        'platform_setting_retain_server_log_duration': 'platformSettingRetainServerLogDuration',
        'integrity_monitoring_setting_event_rank_severity_medium': 'integrityMonitoringSettingEventRankSeverityMedium',
        'platform_setting_proxy_manager_cloud_proxy_id': 'platformSettingProxyManagerCloudProxyId',
        'platform_setting_update_relay_security_all_regions_patterns_download_enabled': 'platformSettingUpdateRelaySecurityAllRegionsPatternsDownloadEnabled',
        'platform_setting_ddan_submission_enabled': 'platformSettingDdanSubmissionEnabled',
        'web_reputation_setting_event_rank_risk_suspicious': 'webReputationSettingEventRankRiskSuspicious',
        'integrity_monitoring_setting_event_rank_severity_critical': 'integrityMonitoringSettingEventRankSeverityCritical',
        'platform_setting_smtp_from_email_address': 'platformSettingSmtpFromEmailAddress',
        'firewall_setting_global_stateful_config_id': 'firewallSettingGlobalStatefulConfigId',
        'platform_setting_event_forwarding_sns_topic_arn': 'platformSettingEventForwardingSnsTopicArn',
        'firewall_setting_internet_connectivity_test_expected_content_regex': 'firewallSettingInternetConnectivityTestExpectedContentRegex',
        'platform_setting_connected_threat_defense_control_manager_manual_source_api_key': 'platformSettingConnectedThreatDefenseControlManagerManualSourceApiKey',
        'platform_setting_load_balancer_manager_address': 'platformSettingLoadBalancerManagerAddress',
        'platform_setting_update_security_primary_source_mode': 'platformSettingUpdateSecurityPrimarySourceMode',
        'platform_setting_primary_tenant_share_connected_threat_defenses_enabled': 'platformSettingPrimaryTenantShareConnectedThreatDefensesEnabled',
        'web_reputation_setting_event_rank_risk_dangerous': 'webReputationSettingEventRankRiskDangerous',
        'platform_setting_load_balancer_heartbeat_port': 'platformSettingLoadBalancerHeartbeatPort',
        'platform_setting_user_hide_unlicensed_modules_enabled': 'platformSettingUserHideUnlicensedModulesEnabled',
        'platform_setting_capture_encrypted_traffic_enabled': 'platformSettingCaptureEncryptedTrafficEnabled',
        'platform_setting_retain_system_event_duration': 'platformSettingRetainSystemEventDuration',
        'platform_setting_user_password_expiry': 'platformSettingUserPasswordExpiry',
        'platform_setting_smart_protection_feedback_enabled': 'platformSettingSmartProtectionFeedbackEnabled',
        'integrity_monitoring_setting_retain_event_duration': 'integrityMonitoringSettingRetainEventDuration',
        'platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled': 'platformSettingPrimaryTenantAllowTenantUseScheduledRunScriptTaskEnabled',
        'log_inspection_setting_event_rank_severity_critical': 'logInspectionSettingEventRankSeverityCritical',
        'platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled': 'platformSettingPrimaryTenantLockAndHideTenantSmtpTabEnabled',
        'platform_setting_ddan_proxy_id': 'platformSettingDdanProxyId',
        'platform_setting_agent_initiated_activation_within_ip_list_id': 'platformSettingAgentInitiatedActivationWithinIpListId',
        'platform_setting_update_security_primary_source_url': 'platformSettingUpdateSecurityPrimarySourceUrl',
        'platform_setting_agentless_vcloud_protection_enabled': 'platformSettingAgentlessVcloudProtectionEnabled',
        'platform_setting_linux_upgrade_on_activation_enabled': 'platformSettingLinuxUpgradeOnActivationEnabled',
        'platform_setting_trend_micro_xdr_enabled': 'platformSettingTrendMicroXdrEnabled',
        'platform_setting_active_sessions_max_exceeded_action': 'platformSettingActiveSessionsMaxExceededAction',
        'platform_setting_update_hostname_on_ip_change_enabled': 'platformSettingUpdateHostnameOnIpChangeEnabled',
        'log_inspection_setting_event_rank_severity_high': 'logInspectionSettingEventRankSeverityHigh',
        'platform_setting_smtp_requires_authentication_enabled': 'platformSettingSmtpRequiresAuthenticationEnabled',
        'platform_setting_active_sessions_max': 'platformSettingActiveSessionsMax',
        'platform_setting_aws_external_id_retrieval_enabled': 'platformSettingAwsExternalIdRetrievalEnabled',
        'log_inspection_setting_event_rank_severity_low': 'logInspectionSettingEventRankSeverityLow',
        'platform_setting_azure_sso_certificate': 'platformSettingAzureSsoCertificate',
        'platform_setting_smtp_username': 'platformSettingSmtpUsername',
        'platform_setting_event_forwarding_sns_advanced_config_enabled': 'platformSettingEventForwardingSnsAdvancedConfigEnabled',
        'firewall_setting_internet_connectivity_test_interval': 'firewallSettingInternetConnectivityTestInterval',
        'platform_setting_whois_url': 'platformSettingWhoisUrl',
        'platform_setting_ddan_source_option': 'platformSettingDdanSourceOption',
        'platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled': 'platformSettingConnectedThreatDefenseControlManagerSuspiciousObjectListComparisonEnabled',
        'platform_setting_exported_file_character_encoding': 'platformSettingExportedFileCharacterEncoding',
        'platform_setting_user_session_duration_max': 'platformSettingUserSessionDurationMax',
        'platform_setting_update_software_alternate_update_server_urls': 'platformSettingUpdateSoftwareAlternateUpdateServerUrls',
        'platform_setting_retain_counters_duration': 'platformSettingRetainCountersDuration',
        'platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled': 'platformSettingPrimaryTenantAllowTenantRunComputerDiscoveryEnabled',
        'platform_setting_smart_protection_feedback_interval': 'platformSettingSmartProtectionFeedbackInterval',
        'platform_setting_system_event_forwarding_snmp_address': 'platformSettingSystemEventForwardingSnmpAddress',
        'platform_setting_smtp_server_address': 'platformSettingSmtpServerAddress',
        'platform_setting_primary_tenant_allow_tenant_configure_siem_enabled': 'platformSettingPrimaryTenantAllowTenantConfigureSiemEnabled',
        'platform_setting_smtp_password': 'platformSettingSmtpPassword',
        'platform_setting_event_forwarding_sns_config_json': 'platformSettingEventForwardingSnsConfigJson',
        'firewall_setting_retain_event_duration': 'firewallSettingRetainEventDuration',
        'web_reputation_setting_event_rank_risk_untested': 'webReputationSettingEventRankRiskUntested',
        'platform_setting_managed_detect_response_use_proxy_enabled': 'platformSettingManagedDetectResponseUseProxyEnabled',
        'platform_setting_event_forwarding_sns_secret_key': 'platformSettingEventForwardingSnsSecretKey',
        'platform_setting_logo_binary_image_img': 'platformSettingLogoBinaryImageImg',
        'platform_setting_aws_manager_identity_secret_key': 'platformSettingAwsManagerIdentitySecretKey',
        'web_reputation_setting_event_rank_risk_highly_suspicious': 'webReputationSettingEventRankRiskHighlySuspicious',
        'platform_setting_api_status_monitoring_enabled': 'platformSettingApiStatusMonitoringEnabled',
        'platform_setting_sign_in_page_message': 'platformSettingSignInPageMessage',
        'platform_setting_user_password_expiry_send_email_enabled': 'platformSettingUserPasswordExpirySendEmailEnabled',
        'platform_setting_user_sign_in_attempts_allowed_number': 'platformSettingUserSignInAttemptsAllowedNumber',
        'platform_setting_ddan_use_proxy_enabled': 'platformSettingDdanUseProxyEnabled',
        'platform_setting_agent_initiated_activation_enabled': 'platformSettingAgentInitiatedActivationEnabled',
        'platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled': 'platformSettingPrimaryTenantAllowTenantConfigureRememberMeOptionEnabled',
        'platform_setting_smart_protection_feedback_bandwidth_max_kbytes': 'platformSettingSmartProtectionFeedbackBandwidthMaxKbytes',
        'firewall_setting_event_rank_severity_packet_rejection': 'firewallSettingEventRankSeverityPacketRejection',
        'platform_setting_proxy_manager_update_proxy_id': 'platformSettingProxyManagerUpdateProxyId',
        'platform_setting_managed_detect_response_use_primary_tenant_settings_enabled': 'platformSettingManagedDetectResponseUsePrimaryTenantSettingsEnabled',
        'platform_setting_event_forwarding_sns_access_key': 'platformSettingEventForwardingSnsAccessKey',
        'platform_setting_agent_initiated_activation_specify_hostname_enabled': 'platformSettingAgentInitiatedActivationSpecifyHostnameEnabled',
        'platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled': 'platformSettingPrimaryTenantAllowTenantSyncWithCloudAccountEnabled',
        'platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled': 'platformSettingConnectedThreatDefensesUsePrimaryTenantServerSettingsEnabled',
        'platform_setting_inactive_agent_cleanup_duration': 'platformSettingInactiveAgentCleanupDuration',
        'platform_setting_agent_initiated_activation_duplicate_hostname_mode': 'platformSettingAgentInitiatedActivationDuplicateHostnameMode',
        'platform_setting_vmware_nsx_manager_node': 'platformSettingVmwareNsxManagerNode',
        'platform_setting_user_enforce_terms_and_conditions_title': 'platformSettingUserEnforceTermsAndConditionsTitle',
        'platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled': 'platformSettingPrimaryTenantAllowTenantAddVmwareVcenterEnabled',
        'platform_setting_new_tenant_download_security_update_enabled': 'platformSettingNewTenantDownloadSecurityUpdateEnabled',
        'platform_setting_tenant_protection_usage_monitoring_computer_id3': 'platformSettingTenantProtectionUsageMonitoringComputerId3',
        'platform_setting_agent_initiated_activation_reactivate_unknown_enabled': 'platformSettingAgentInitiatedActivationReactivateUnknownEnabled',
        'platform_setting_tenant_protection_usage_monitoring_computer_id2': 'platformSettingTenantProtectionUsageMonitoringComputerId2',
        'platform_setting_agent_initiated_activation_policy_id': 'platformSettingAgentInitiatedActivationPolicyId',
        'platform_setting_tenant_protection_usage_monitoring_computer_id1': 'platformSettingTenantProtectionUsageMonitoringComputerId1',
        'platform_setting_trend_micro_xdr_api_server_url': 'platformSettingTrendMicroXdrApiServerUrl',
        'platform_setting_retain_agent_installers_per_platform_max': 'platformSettingRetainAgentInstallersPerPlatformMax',
        'application_control_setting_serve_rulesets_from_relays_enabled': 'applicationControlSettingServeRulesetsFromRelaysEnabled',
        'integrity_monitoring_setting_event_rank_severity_high': 'integrityMonitoringSettingEventRankSeverityHigh',
        'platform_setting_saml_retain_inactive_external_administrators_duration': 'platformSettingSamlRetainInactiveExternalAdministratorsDuration',
        'intrusion_prevention_setting_retain_event_duration': 'intrusionPreventionSettingRetainEventDuration',
        'platform_setting_http_public_key_pin_policy_report_only_enabled': 'platformSettingHttpPublicKeyPinPolicyReportOnlyEnabled',
        'platform_setting_saml_service_provider_name': 'platformSettingSamlServiceProviderName',
        'firewall_setting_internet_connectivity_test_url': 'firewallSettingInternetConnectivityTestUrl',
        'platform_setting_saml_service_provider_certificate_expiry_warning_days': 'platformSettingSamlServiceProviderCertificateExpiryWarningDays',
        'platform_setting_proxy_agent_update_proxy_id': 'platformSettingProxyAgentUpdateProxyId',
        'platform_setting_ddan_auto_submission_enabled': 'platformSettingDdanAutoSubmissionEnabled',
        'platform_setting_ddan_manual_source_api_key': 'platformSettingDdanManualSourceApiKey',
        'platform_setting_saml_service_provider_entity_id': 'platformSettingSamlServiceProviderEntityId',
        'intrusion_prevention_setting_event_rank_severity_filter_error': 'intrusionPreventionSettingEventRankSeverityFilterError',
        'intrusion_prevention_setting_event_rank_severity_filter_high': 'intrusionPreventionSettingEventRankSeverityFilterHigh',
        'platform_setting_trend_micro_xdr_api_key': 'platformSettingTrendMicroXdrApiKey',
        'integrity_monitoring_setting_event_rank_severity_low': 'integrityMonitoringSettingEventRankSeverityLow',
        'platform_setting_trend_micro_xdr_company_id': 'platformSettingTrendMicroXdrCompanyId'
    }

    def __init__(self, platform_setting_saml_identity_provider_certificate_expiry_warning_days=None, platform_setting_update_agent_security_on_missing_deep_security_manager_enabled=None, platform_setting_ddan_manual_source_server_url=None, platform_setting_load_balancer_manager_port=None, platform_setting_smart_protection_feedback_threat_detections_threshold=None, platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled=None, intrusion_prevention_setting_event_rank_severity_filter_medium=None, firewall_setting_intranet_connectivity_test_expected_content_regex=None, platform_setting_event_forwarding_sns_enabled=None, platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout=None, web_reputation_setting_event_rank_risk_blocked_by_administrator_rank=None, platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled=None, anti_malware_setting_event_email_recipients=None, platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled=None, platform_setting_http_strict_transport_enabled=None, firewall_setting_intranet_connectivity_test_url=None, platform_setting_primary_tenant_allow_tenant_configure_sns_enabled=None, platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled=None, platform_setting_exported_diagnostic_package_locale=None, intrusion_prevention_setting_event_rank_severity_filter_critical=None, platform_setting_update_imported_software_auto_download_enabled=None, platform_setting_demo_mode_enabled=None, platform_setting_user_enforce_terms_and_conditions_message=None, platform_setting_trend_micro_xdr_common_log_receiver_url=None, platform_setting_managed_detect_response_company_guid=None, platform_setting_alert_default_email_address=None, platform_setting_agent_initiated_activation_reactivate_cloned_enabled=None, platform_setting_managed_detect_response_server_url=None, platform_setting_primary_tenant_share_managed_detect_responses_enabled=None, platform_setting_saml_service_provider_certificate=None, platform_setting_syslog_config_id=None, platform_setting_smtp_start_tls_enabled=None, platform_setting_user_password_require_letters_and_numbers_enabled=None, platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled=None, platform_setting_load_balancer_relay_port=None, platform_setting_managed_detect_response_enabled=None, platform_setting_update_rules_policy_auto_apply_enabled=None, platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled=None, platform_setting_user_password_require_not_same_as_username_enabled=None, log_inspection_setting_event_rank_severity_medium=None, anti_malware_setting_retain_event_duration=None, platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled=None, firewall_setting_event_rank_severity_log_only=None, platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled=None, application_control_setting_retain_event_duration=None, platform_setting_api_soap_web_service_enabled=None, platform_setting_saml_service_provider_private_key=None, platform_setting_windows_upgrade_on_activation_enabled=None, platform_setting_system_event_forwarding_snmp_port=None, firewall_setting_event_rank_severity_deny=None, intrusion_prevention_setting_event_rank_severity_filter_low=None, platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled=None, platform_setting_recommendation_cpu_usage_level=None, platform_setting_managed_detect_response_service_token=None, platform_setting_load_balancer_heartbeat_address=None, platform_setting_trend_micro_xdr_api_user=None, platform_setting_content_security_policy_report_only_enabled=None, log_inspection_setting_retain_event_duration=None, platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled=None, anti_malware_setting_event_email_body_template=None, platform_setting_retain_security_updates_max=None, platform_setting_connected_threat_defense_control_manager_source_option=None, anti_malware_setting_event_email_enabled=None, platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled=None, platform_setting_recommendation_ongoing_scans_enabled=None, platform_setting_agent_initiated_activation_token=None, platform_setting_user_password_length_min=None, platform_setting_primary_tenant_allow_tenant_database_state=None, platform_setting_aws_manager_identity_use_instance_role_enabled=None, platform_setting_content_security_policy=None, platform_setting_product_usage_data_collection_enabled=None, platform_setting_alert_agent_update_pending_threshold=None, platform_setting_user_password_require_special_characters_enabled=None, platform_setting_update_appliance_default_agent_version=None, platform_setting_system_event_forwarding_snmp_enabled=None, platform_setting_smtp_bounce_email_address=None, platform_setting_update_relay_security_support_agent9_and_earlier_enabled=None, platform_setting_managed_detect_response_proxy_id=None, platform_setting_trend_micro_xdr_log_server_url=None, platform_setting_inactive_agent_cleanup_enabled=None, platform_setting_load_balancer_relay_address=None, platform_setting_http_public_key_pin_policy=None, platform_setting_user_session_idle_timeout=None, anti_malware_setting_event_email_subject=None, platform_setting_connected_threat_defense_control_manager_use_proxy_enabled=None, platform_setting_user_enforce_terms_and_conditions_enabled=None, platform_setting_aws_manager_identity_access_key=None, platform_setting_connected_threat_defense_control_manager_proxy_id=None, platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled=None, platform_setting_connected_threat_defense_control_manager_manual_source_server_url=None, platform_setting_user_password_require_mixed_case_enabled=None, platform_setting_trend_micro_xdr_identity_provider_api_url=None, platform_setting_smart_protection_feedback_for_suspicious_file_enabled=None, platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled=None, platform_setting_smart_protection_feedback_industry_type=None, web_reputation_setting_retain_event_duration=None, platform_setting_retain_server_log_duration=None, integrity_monitoring_setting_event_rank_severity_medium=None, platform_setting_proxy_manager_cloud_proxy_id=None, platform_setting_update_relay_security_all_regions_patterns_download_enabled=None, platform_setting_ddan_submission_enabled=None, web_reputation_setting_event_rank_risk_suspicious=None, integrity_monitoring_setting_event_rank_severity_critical=None, platform_setting_smtp_from_email_address=None, firewall_setting_global_stateful_config_id=None, platform_setting_event_forwarding_sns_topic_arn=None, firewall_setting_internet_connectivity_test_expected_content_regex=None, platform_setting_connected_threat_defense_control_manager_manual_source_api_key=None, platform_setting_load_balancer_manager_address=None, platform_setting_update_security_primary_source_mode=None, platform_setting_primary_tenant_share_connected_threat_defenses_enabled=None, web_reputation_setting_event_rank_risk_dangerous=None, platform_setting_load_balancer_heartbeat_port=None, platform_setting_user_hide_unlicensed_modules_enabled=None, platform_setting_capture_encrypted_traffic_enabled=None, platform_setting_retain_system_event_duration=None, platform_setting_user_password_expiry=None, platform_setting_smart_protection_feedback_enabled=None, integrity_monitoring_setting_retain_event_duration=None, platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled=None, log_inspection_setting_event_rank_severity_critical=None, platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled=None, platform_setting_ddan_proxy_id=None, platform_setting_agent_initiated_activation_within_ip_list_id=None, platform_setting_update_security_primary_source_url=None, platform_setting_agentless_vcloud_protection_enabled=None, platform_setting_linux_upgrade_on_activation_enabled=None, platform_setting_trend_micro_xdr_enabled=None, platform_setting_active_sessions_max_exceeded_action=None, platform_setting_update_hostname_on_ip_change_enabled=None, log_inspection_setting_event_rank_severity_high=None, platform_setting_smtp_requires_authentication_enabled=None, platform_setting_active_sessions_max=None, platform_setting_aws_external_id_retrieval_enabled=None, log_inspection_setting_event_rank_severity_low=None, platform_setting_azure_sso_certificate=None, platform_setting_smtp_username=None, platform_setting_event_forwarding_sns_advanced_config_enabled=None, firewall_setting_internet_connectivity_test_interval=None, platform_setting_whois_url=None, platform_setting_ddan_source_option=None, platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled=None, platform_setting_exported_file_character_encoding=None, platform_setting_user_session_duration_max=None, platform_setting_update_software_alternate_update_server_urls=None, platform_setting_retain_counters_duration=None, platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled=None, platform_setting_smart_protection_feedback_interval=None, platform_setting_system_event_forwarding_snmp_address=None, platform_setting_smtp_server_address=None, platform_setting_primary_tenant_allow_tenant_configure_siem_enabled=None, platform_setting_smtp_password=None, platform_setting_event_forwarding_sns_config_json=None, firewall_setting_retain_event_duration=None, web_reputation_setting_event_rank_risk_untested=None, platform_setting_managed_detect_response_use_proxy_enabled=None, platform_setting_event_forwarding_sns_secret_key=None, platform_setting_logo_binary_image_img=None, platform_setting_aws_manager_identity_secret_key=None, web_reputation_setting_event_rank_risk_highly_suspicious=None, platform_setting_api_status_monitoring_enabled=None, platform_setting_sign_in_page_message=None, platform_setting_user_password_expiry_send_email_enabled=None, platform_setting_user_sign_in_attempts_allowed_number=None, platform_setting_ddan_use_proxy_enabled=None, platform_setting_agent_initiated_activation_enabled=None, platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled=None, platform_setting_smart_protection_feedback_bandwidth_max_kbytes=None, firewall_setting_event_rank_severity_packet_rejection=None, platform_setting_proxy_manager_update_proxy_id=None, platform_setting_managed_detect_response_use_primary_tenant_settings_enabled=None, platform_setting_event_forwarding_sns_access_key=None, platform_setting_agent_initiated_activation_specify_hostname_enabled=None, platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled=None, platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled=None, platform_setting_inactive_agent_cleanup_duration=None, platform_setting_agent_initiated_activation_duplicate_hostname_mode=None, platform_setting_vmware_nsx_manager_node=None, platform_setting_user_enforce_terms_and_conditions_title=None, platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled=None, platform_setting_new_tenant_download_security_update_enabled=None, platform_setting_tenant_protection_usage_monitoring_computer_id3=None, platform_setting_agent_initiated_activation_reactivate_unknown_enabled=None, platform_setting_tenant_protection_usage_monitoring_computer_id2=None, platform_setting_agent_initiated_activation_policy_id=None, platform_setting_tenant_protection_usage_monitoring_computer_id1=None, platform_setting_trend_micro_xdr_api_server_url=None, platform_setting_retain_agent_installers_per_platform_max=None, application_control_setting_serve_rulesets_from_relays_enabled=None, integrity_monitoring_setting_event_rank_severity_high=None, platform_setting_saml_retain_inactive_external_administrators_duration=None, intrusion_prevention_setting_retain_event_duration=None, platform_setting_http_public_key_pin_policy_report_only_enabled=None, platform_setting_saml_service_provider_name=None, firewall_setting_internet_connectivity_test_url=None, platform_setting_saml_service_provider_certificate_expiry_warning_days=None, platform_setting_proxy_agent_update_proxy_id=None, platform_setting_ddan_auto_submission_enabled=None, platform_setting_ddan_manual_source_api_key=None, platform_setting_saml_service_provider_entity_id=None, intrusion_prevention_setting_event_rank_severity_filter_error=None, intrusion_prevention_setting_event_rank_severity_filter_high=None, platform_setting_trend_micro_xdr_api_key=None, integrity_monitoring_setting_event_rank_severity_low=None, platform_setting_trend_micro_xdr_company_id=None):  # noqa: E501
        """SystemSettings - a model defined in Swagger"""  # noqa: E501

        self._platform_setting_saml_identity_provider_certificate_expiry_warning_days = None
        self._platform_setting_update_agent_security_on_missing_deep_security_manager_enabled = None
        self._platform_setting_ddan_manual_source_server_url = None
        self._platform_setting_load_balancer_manager_port = None
        self._platform_setting_smart_protection_feedback_threat_detections_threshold = None
        self._platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled = None
        self._intrusion_prevention_setting_event_rank_severity_filter_medium = None
        self._firewall_setting_intranet_connectivity_test_expected_content_regex = None
        self._platform_setting_event_forwarding_sns_enabled = None
        self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout = None
        self._web_reputation_setting_event_rank_risk_blocked_by_administrator_rank = None
        self._platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled = None
        self._anti_malware_setting_event_email_recipients = None
        self._platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled = None
        self._platform_setting_http_strict_transport_enabled = None
        self._firewall_setting_intranet_connectivity_test_url = None
        self._platform_setting_primary_tenant_allow_tenant_configure_sns_enabled = None
        self._platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled = None
        self._platform_setting_exported_diagnostic_package_locale = None
        self._intrusion_prevention_setting_event_rank_severity_filter_critical = None
        self._platform_setting_update_imported_software_auto_download_enabled = None
        self._platform_setting_demo_mode_enabled = None
        self._platform_setting_user_enforce_terms_and_conditions_message = None
        self._platform_setting_trend_micro_xdr_common_log_receiver_url = None
        self._platform_setting_managed_detect_response_company_guid = None
        self._platform_setting_alert_default_email_address = None
        self._platform_setting_agent_initiated_activation_reactivate_cloned_enabled = None
        self._platform_setting_managed_detect_response_server_url = None
        self._platform_setting_primary_tenant_share_managed_detect_responses_enabled = None
        self._platform_setting_saml_service_provider_certificate = None
        self._platform_setting_syslog_config_id = None
        self._platform_setting_smtp_start_tls_enabled = None
        self._platform_setting_user_password_require_letters_and_numbers_enabled = None
        self._platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled = None
        self._platform_setting_load_balancer_relay_port = None
        self._platform_setting_managed_detect_response_enabled = None
        self._platform_setting_update_rules_policy_auto_apply_enabled = None
        self._platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled = None
        self._platform_setting_user_password_require_not_same_as_username_enabled = None
        self._log_inspection_setting_event_rank_severity_medium = None
        self._anti_malware_setting_retain_event_duration = None
        self._platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled = None
        self._firewall_setting_event_rank_severity_log_only = None
        self._platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled = None
        self._application_control_setting_retain_event_duration = None
        self._platform_setting_api_soap_web_service_enabled = None
        self._platform_setting_saml_service_provider_private_key = None
        self._platform_setting_windows_upgrade_on_activation_enabled = None
        self._platform_setting_system_event_forwarding_snmp_port = None
        self._firewall_setting_event_rank_severity_deny = None
        self._intrusion_prevention_setting_event_rank_severity_filter_low = None
        self._platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled = None
        self._platform_setting_recommendation_cpu_usage_level = None
        self._platform_setting_managed_detect_response_service_token = None
        self._platform_setting_load_balancer_heartbeat_address = None
        self._platform_setting_trend_micro_xdr_api_user = None
        self._platform_setting_content_security_policy_report_only_enabled = None
        self._log_inspection_setting_retain_event_duration = None
        self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled = None
        self._anti_malware_setting_event_email_body_template = None
        self._platform_setting_retain_security_updates_max = None
        self._platform_setting_connected_threat_defense_control_manager_source_option = None
        self._anti_malware_setting_event_email_enabled = None
        self._platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled = None
        self._platform_setting_recommendation_ongoing_scans_enabled = None
        self._platform_setting_agent_initiated_activation_token = None
        self._platform_setting_user_password_length_min = None
        self._platform_setting_primary_tenant_allow_tenant_database_state = None
        self._platform_setting_aws_manager_identity_use_instance_role_enabled = None
        self._platform_setting_content_security_policy = None
        self._platform_setting_product_usage_data_collection_enabled = None
        self._platform_setting_alert_agent_update_pending_threshold = None
        self._platform_setting_user_password_require_special_characters_enabled = None
        self._platform_setting_update_appliance_default_agent_version = None
        self._platform_setting_system_event_forwarding_snmp_enabled = None
        self._platform_setting_smtp_bounce_email_address = None
        self._platform_setting_update_relay_security_support_agent9_and_earlier_enabled = None
        self._platform_setting_managed_detect_response_proxy_id = None
        self._platform_setting_trend_micro_xdr_log_server_url = None
        self._platform_setting_inactive_agent_cleanup_enabled = None
        self._platform_setting_load_balancer_relay_address = None
        self._platform_setting_http_public_key_pin_policy = None
        self._platform_setting_user_session_idle_timeout = None
        self._anti_malware_setting_event_email_subject = None
        self._platform_setting_connected_threat_defense_control_manager_use_proxy_enabled = None
        self._platform_setting_user_enforce_terms_and_conditions_enabled = None
        self._platform_setting_aws_manager_identity_access_key = None
        self._platform_setting_connected_threat_defense_control_manager_proxy_id = None
        self._platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled = None
        self._platform_setting_connected_threat_defense_control_manager_manual_source_server_url = None
        self._platform_setting_user_password_require_mixed_case_enabled = None
        self._platform_setting_trend_micro_xdr_identity_provider_api_url = None
        self._platform_setting_smart_protection_feedback_for_suspicious_file_enabled = None
        self._platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled = None
        self._platform_setting_smart_protection_feedback_industry_type = None
        self._web_reputation_setting_retain_event_duration = None
        self._platform_setting_retain_server_log_duration = None
        self._integrity_monitoring_setting_event_rank_severity_medium = None
        self._platform_setting_proxy_manager_cloud_proxy_id = None
        self._platform_setting_update_relay_security_all_regions_patterns_download_enabled = None
        self._platform_setting_ddan_submission_enabled = None
        self._web_reputation_setting_event_rank_risk_suspicious = None
        self._integrity_monitoring_setting_event_rank_severity_critical = None
        self._platform_setting_smtp_from_email_address = None
        self._firewall_setting_global_stateful_config_id = None
        self._platform_setting_event_forwarding_sns_topic_arn = None
        self._firewall_setting_internet_connectivity_test_expected_content_regex = None
        self._platform_setting_connected_threat_defense_control_manager_manual_source_api_key = None
        self._platform_setting_load_balancer_manager_address = None
        self._platform_setting_update_security_primary_source_mode = None
        self._platform_setting_primary_tenant_share_connected_threat_defenses_enabled = None
        self._web_reputation_setting_event_rank_risk_dangerous = None
        self._platform_setting_load_balancer_heartbeat_port = None
        self._platform_setting_user_hide_unlicensed_modules_enabled = None
        self._platform_setting_capture_encrypted_traffic_enabled = None
        self._platform_setting_retain_system_event_duration = None
        self._platform_setting_user_password_expiry = None
        self._platform_setting_smart_protection_feedback_enabled = None
        self._integrity_monitoring_setting_retain_event_duration = None
        self._platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled = None
        self._log_inspection_setting_event_rank_severity_critical = None
        self._platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled = None
        self._platform_setting_ddan_proxy_id = None
        self._platform_setting_agent_initiated_activation_within_ip_list_id = None
        self._platform_setting_update_security_primary_source_url = None
        self._platform_setting_agentless_vcloud_protection_enabled = None
        self._platform_setting_linux_upgrade_on_activation_enabled = None
        self._platform_setting_trend_micro_xdr_enabled = None
        self._platform_setting_active_sessions_max_exceeded_action = None
        self._platform_setting_update_hostname_on_ip_change_enabled = None
        self._log_inspection_setting_event_rank_severity_high = None
        self._platform_setting_smtp_requires_authentication_enabled = None
        self._platform_setting_active_sessions_max = None
        self._platform_setting_aws_external_id_retrieval_enabled = None
        self._log_inspection_setting_event_rank_severity_low = None
        self._platform_setting_azure_sso_certificate = None
        self._platform_setting_smtp_username = None
        self._platform_setting_event_forwarding_sns_advanced_config_enabled = None
        self._firewall_setting_internet_connectivity_test_interval = None
        self._platform_setting_whois_url = None
        self._platform_setting_ddan_source_option = None
        self._platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled = None
        self._platform_setting_exported_file_character_encoding = None
        self._platform_setting_user_session_duration_max = None
        self._platform_setting_update_software_alternate_update_server_urls = None
        self._platform_setting_retain_counters_duration = None
        self._platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled = None
        self._platform_setting_smart_protection_feedback_interval = None
        self._platform_setting_system_event_forwarding_snmp_address = None
        self._platform_setting_smtp_server_address = None
        self._platform_setting_primary_tenant_allow_tenant_configure_siem_enabled = None
        self._platform_setting_smtp_password = None
        self._platform_setting_event_forwarding_sns_config_json = None
        self._firewall_setting_retain_event_duration = None
        self._web_reputation_setting_event_rank_risk_untested = None
        self._platform_setting_managed_detect_response_use_proxy_enabled = None
        self._platform_setting_event_forwarding_sns_secret_key = None
        self._platform_setting_logo_binary_image_img = None
        self._platform_setting_aws_manager_identity_secret_key = None
        self._web_reputation_setting_event_rank_risk_highly_suspicious = None
        self._platform_setting_api_status_monitoring_enabled = None
        self._platform_setting_sign_in_page_message = None
        self._platform_setting_user_password_expiry_send_email_enabled = None
        self._platform_setting_user_sign_in_attempts_allowed_number = None
        self._platform_setting_ddan_use_proxy_enabled = None
        self._platform_setting_agent_initiated_activation_enabled = None
        self._platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled = None
        self._platform_setting_smart_protection_feedback_bandwidth_max_kbytes = None
        self._firewall_setting_event_rank_severity_packet_rejection = None
        self._platform_setting_proxy_manager_update_proxy_id = None
        self._platform_setting_managed_detect_response_use_primary_tenant_settings_enabled = None
        self._platform_setting_event_forwarding_sns_access_key = None
        self._platform_setting_agent_initiated_activation_specify_hostname_enabled = None
        self._platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled = None
        self._platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled = None
        self._platform_setting_inactive_agent_cleanup_duration = None
        self._platform_setting_agent_initiated_activation_duplicate_hostname_mode = None
        self._platform_setting_vmware_nsx_manager_node = None
        self._platform_setting_user_enforce_terms_and_conditions_title = None
        self._platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled = None
        self._platform_setting_new_tenant_download_security_update_enabled = None
        self._platform_setting_tenant_protection_usage_monitoring_computer_id3 = None
        self._platform_setting_agent_initiated_activation_reactivate_unknown_enabled = None
        self._platform_setting_tenant_protection_usage_monitoring_computer_id2 = None
        self._platform_setting_agent_initiated_activation_policy_id = None
        self._platform_setting_tenant_protection_usage_monitoring_computer_id1 = None
        self._platform_setting_trend_micro_xdr_api_server_url = None
        self._platform_setting_retain_agent_installers_per_platform_max = None
        self._application_control_setting_serve_rulesets_from_relays_enabled = None
        self._integrity_monitoring_setting_event_rank_severity_high = None
        self._platform_setting_saml_retain_inactive_external_administrators_duration = None
        self._intrusion_prevention_setting_retain_event_duration = None
        self._platform_setting_http_public_key_pin_policy_report_only_enabled = None
        self._platform_setting_saml_service_provider_name = None
        self._firewall_setting_internet_connectivity_test_url = None
        self._platform_setting_saml_service_provider_certificate_expiry_warning_days = None
        self._platform_setting_proxy_agent_update_proxy_id = None
        self._platform_setting_ddan_auto_submission_enabled = None
        self._platform_setting_ddan_manual_source_api_key = None
        self._platform_setting_saml_service_provider_entity_id = None
        self._intrusion_prevention_setting_event_rank_severity_filter_error = None
        self._intrusion_prevention_setting_event_rank_severity_filter_high = None
        self._platform_setting_trend_micro_xdr_api_key = None
        self._integrity_monitoring_setting_event_rank_severity_low = None
        self._platform_setting_trend_micro_xdr_company_id = None
        self.discriminator = None

        if platform_setting_saml_identity_provider_certificate_expiry_warning_days is not None:
            self.platform_setting_saml_identity_provider_certificate_expiry_warning_days = platform_setting_saml_identity_provider_certificate_expiry_warning_days
        if platform_setting_update_agent_security_on_missing_deep_security_manager_enabled is not None:
            self.platform_setting_update_agent_security_on_missing_deep_security_manager_enabled = platform_setting_update_agent_security_on_missing_deep_security_manager_enabled
        if platform_setting_ddan_manual_source_server_url is not None:
            self.platform_setting_ddan_manual_source_server_url = platform_setting_ddan_manual_source_server_url
        if platform_setting_load_balancer_manager_port is not None:
            self.platform_setting_load_balancer_manager_port = platform_setting_load_balancer_manager_port
        if platform_setting_smart_protection_feedback_threat_detections_threshold is not None:
            self.platform_setting_smart_protection_feedback_threat_detections_threshold = platform_setting_smart_protection_feedback_threat_detections_threshold
        if platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled = platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled
        if intrusion_prevention_setting_event_rank_severity_filter_medium is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_medium = intrusion_prevention_setting_event_rank_severity_filter_medium
        if firewall_setting_intranet_connectivity_test_expected_content_regex is not None:
            self.firewall_setting_intranet_connectivity_test_expected_content_regex = firewall_setting_intranet_connectivity_test_expected_content_regex
        if platform_setting_event_forwarding_sns_enabled is not None:
            self.platform_setting_event_forwarding_sns_enabled = platform_setting_event_forwarding_sns_enabled
        if platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout is not None:
            self.platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout = platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout
        if web_reputation_setting_event_rank_risk_blocked_by_administrator_rank is not None:
            self.web_reputation_setting_event_rank_risk_blocked_by_administrator_rank = web_reputation_setting_event_rank_risk_blocked_by_administrator_rank
        if platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled is not None:
            self.platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled
        if anti_malware_setting_event_email_recipients is not None:
            self.anti_malware_setting_event_email_recipients = anti_malware_setting_event_email_recipients
        if platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled = platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled
        if platform_setting_http_strict_transport_enabled is not None:
            self.platform_setting_http_strict_transport_enabled = platform_setting_http_strict_transport_enabled
        if firewall_setting_intranet_connectivity_test_url is not None:
            self.firewall_setting_intranet_connectivity_test_url = firewall_setting_intranet_connectivity_test_url
        if platform_setting_primary_tenant_allow_tenant_configure_sns_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_configure_sns_enabled = platform_setting_primary_tenant_allow_tenant_configure_sns_enabled
        if platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled is not None:
            self.platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled = platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled
        if platform_setting_exported_diagnostic_package_locale is not None:
            self.platform_setting_exported_diagnostic_package_locale = platform_setting_exported_diagnostic_package_locale
        if intrusion_prevention_setting_event_rank_severity_filter_critical is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_critical = intrusion_prevention_setting_event_rank_severity_filter_critical
        if platform_setting_update_imported_software_auto_download_enabled is not None:
            self.platform_setting_update_imported_software_auto_download_enabled = platform_setting_update_imported_software_auto_download_enabled
        if platform_setting_demo_mode_enabled is not None:
            self.platform_setting_demo_mode_enabled = platform_setting_demo_mode_enabled
        if platform_setting_user_enforce_terms_and_conditions_message is not None:
            self.platform_setting_user_enforce_terms_and_conditions_message = platform_setting_user_enforce_terms_and_conditions_message
        if platform_setting_trend_micro_xdr_common_log_receiver_url is not None:
            self.platform_setting_trend_micro_xdr_common_log_receiver_url = platform_setting_trend_micro_xdr_common_log_receiver_url
        if platform_setting_managed_detect_response_company_guid is not None:
            self.platform_setting_managed_detect_response_company_guid = platform_setting_managed_detect_response_company_guid
        if platform_setting_alert_default_email_address is not None:
            self.platform_setting_alert_default_email_address = platform_setting_alert_default_email_address
        if platform_setting_agent_initiated_activation_reactivate_cloned_enabled is not None:
            self.platform_setting_agent_initiated_activation_reactivate_cloned_enabled = platform_setting_agent_initiated_activation_reactivate_cloned_enabled
        if platform_setting_managed_detect_response_server_url is not None:
            self.platform_setting_managed_detect_response_server_url = platform_setting_managed_detect_response_server_url
        if platform_setting_primary_tenant_share_managed_detect_responses_enabled is not None:
            self.platform_setting_primary_tenant_share_managed_detect_responses_enabled = platform_setting_primary_tenant_share_managed_detect_responses_enabled
        if platform_setting_saml_service_provider_certificate is not None:
            self.platform_setting_saml_service_provider_certificate = platform_setting_saml_service_provider_certificate
        if platform_setting_syslog_config_id is not None:
            self.platform_setting_syslog_config_id = platform_setting_syslog_config_id
        if platform_setting_smtp_start_tls_enabled is not None:
            self.platform_setting_smtp_start_tls_enabled = platform_setting_smtp_start_tls_enabled
        if platform_setting_user_password_require_letters_and_numbers_enabled is not None:
            self.platform_setting_user_password_require_letters_and_numbers_enabled = platform_setting_user_password_require_letters_and_numbers_enabled
        if platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled = platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled
        if platform_setting_load_balancer_relay_port is not None:
            self.platform_setting_load_balancer_relay_port = platform_setting_load_balancer_relay_port
        if platform_setting_managed_detect_response_enabled is not None:
            self.platform_setting_managed_detect_response_enabled = platform_setting_managed_detect_response_enabled
        if platform_setting_update_rules_policy_auto_apply_enabled is not None:
            self.platform_setting_update_rules_policy_auto_apply_enabled = platform_setting_update_rules_policy_auto_apply_enabled
        if platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled = platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled
        if platform_setting_user_password_require_not_same_as_username_enabled is not None:
            self.platform_setting_user_password_require_not_same_as_username_enabled = platform_setting_user_password_require_not_same_as_username_enabled
        if log_inspection_setting_event_rank_severity_medium is not None:
            self.log_inspection_setting_event_rank_severity_medium = log_inspection_setting_event_rank_severity_medium
        if anti_malware_setting_retain_event_duration is not None:
            self.anti_malware_setting_retain_event_duration = anti_malware_setting_retain_event_duration
        if platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled is not None:
            self.platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled = platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled
        if firewall_setting_event_rank_severity_log_only is not None:
            self.firewall_setting_event_rank_severity_log_only = firewall_setting_event_rank_severity_log_only
        if platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled is not None:
            self.platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled
        if application_control_setting_retain_event_duration is not None:
            self.application_control_setting_retain_event_duration = application_control_setting_retain_event_duration
        if platform_setting_api_soap_web_service_enabled is not None:
            self.platform_setting_api_soap_web_service_enabled = platform_setting_api_soap_web_service_enabled
        if platform_setting_saml_service_provider_private_key is not None:
            self.platform_setting_saml_service_provider_private_key = platform_setting_saml_service_provider_private_key
        if platform_setting_windows_upgrade_on_activation_enabled is not None:
            self.platform_setting_windows_upgrade_on_activation_enabled = platform_setting_windows_upgrade_on_activation_enabled
        if platform_setting_system_event_forwarding_snmp_port is not None:
            self.platform_setting_system_event_forwarding_snmp_port = platform_setting_system_event_forwarding_snmp_port
        if firewall_setting_event_rank_severity_deny is not None:
            self.firewall_setting_event_rank_severity_deny = firewall_setting_event_rank_severity_deny
        if intrusion_prevention_setting_event_rank_severity_filter_low is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_low = intrusion_prevention_setting_event_rank_severity_filter_low
        if platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled = platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled
        if platform_setting_recommendation_cpu_usage_level is not None:
            self.platform_setting_recommendation_cpu_usage_level = platform_setting_recommendation_cpu_usage_level
        if platform_setting_managed_detect_response_service_token is not None:
            self.platform_setting_managed_detect_response_service_token = platform_setting_managed_detect_response_service_token
        if platform_setting_load_balancer_heartbeat_address is not None:
            self.platform_setting_load_balancer_heartbeat_address = platform_setting_load_balancer_heartbeat_address
        if platform_setting_trend_micro_xdr_api_user is not None:
            self.platform_setting_trend_micro_xdr_api_user = platform_setting_trend_micro_xdr_api_user
        if platform_setting_content_security_policy_report_only_enabled is not None:
            self.platform_setting_content_security_policy_report_only_enabled = platform_setting_content_security_policy_report_only_enabled
        if log_inspection_setting_retain_event_duration is not None:
            self.log_inspection_setting_retain_event_duration = log_inspection_setting_retain_event_duration
        if platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled is not None:
            self.platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled = platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled
        if anti_malware_setting_event_email_body_template is not None:
            self.anti_malware_setting_event_email_body_template = anti_malware_setting_event_email_body_template
        if platform_setting_retain_security_updates_max is not None:
            self.platform_setting_retain_security_updates_max = platform_setting_retain_security_updates_max
        if platform_setting_connected_threat_defense_control_manager_source_option is not None:
            self.platform_setting_connected_threat_defense_control_manager_source_option = platform_setting_connected_threat_defense_control_manager_source_option
        if anti_malware_setting_event_email_enabled is not None:
            self.anti_malware_setting_event_email_enabled = anti_malware_setting_event_email_enabled
        if platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled is not None:
            self.platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled = platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled
        if platform_setting_recommendation_ongoing_scans_enabled is not None:
            self.platform_setting_recommendation_ongoing_scans_enabled = platform_setting_recommendation_ongoing_scans_enabled
        if platform_setting_agent_initiated_activation_token is not None:
            self.platform_setting_agent_initiated_activation_token = platform_setting_agent_initiated_activation_token
        if platform_setting_user_password_length_min is not None:
            self.platform_setting_user_password_length_min = platform_setting_user_password_length_min
        if platform_setting_primary_tenant_allow_tenant_database_state is not None:
            self.platform_setting_primary_tenant_allow_tenant_database_state = platform_setting_primary_tenant_allow_tenant_database_state
        if platform_setting_aws_manager_identity_use_instance_role_enabled is not None:
            self.platform_setting_aws_manager_identity_use_instance_role_enabled = platform_setting_aws_manager_identity_use_instance_role_enabled
        if platform_setting_content_security_policy is not None:
            self.platform_setting_content_security_policy = platform_setting_content_security_policy
        if platform_setting_product_usage_data_collection_enabled is not None:
            self.platform_setting_product_usage_data_collection_enabled = platform_setting_product_usage_data_collection_enabled
        if platform_setting_alert_agent_update_pending_threshold is not None:
            self.platform_setting_alert_agent_update_pending_threshold = platform_setting_alert_agent_update_pending_threshold
        if platform_setting_user_password_require_special_characters_enabled is not None:
            self.platform_setting_user_password_require_special_characters_enabled = platform_setting_user_password_require_special_characters_enabled
        if platform_setting_update_appliance_default_agent_version is not None:
            self.platform_setting_update_appliance_default_agent_version = platform_setting_update_appliance_default_agent_version
        if platform_setting_system_event_forwarding_snmp_enabled is not None:
            self.platform_setting_system_event_forwarding_snmp_enabled = platform_setting_system_event_forwarding_snmp_enabled
        if platform_setting_smtp_bounce_email_address is not None:
            self.platform_setting_smtp_bounce_email_address = platform_setting_smtp_bounce_email_address
        if platform_setting_update_relay_security_support_agent9_and_earlier_enabled is not None:
            self.platform_setting_update_relay_security_support_agent9_and_earlier_enabled = platform_setting_update_relay_security_support_agent9_and_earlier_enabled
        if platform_setting_managed_detect_response_proxy_id is not None:
            self.platform_setting_managed_detect_response_proxy_id = platform_setting_managed_detect_response_proxy_id
        if platform_setting_trend_micro_xdr_log_server_url is not None:
            self.platform_setting_trend_micro_xdr_log_server_url = platform_setting_trend_micro_xdr_log_server_url
        if platform_setting_inactive_agent_cleanup_enabled is not None:
            self.platform_setting_inactive_agent_cleanup_enabled = platform_setting_inactive_agent_cleanup_enabled
        if platform_setting_load_balancer_relay_address is not None:
            self.platform_setting_load_balancer_relay_address = platform_setting_load_balancer_relay_address
        if platform_setting_http_public_key_pin_policy is not None:
            self.platform_setting_http_public_key_pin_policy = platform_setting_http_public_key_pin_policy
        if platform_setting_user_session_idle_timeout is not None:
            self.platform_setting_user_session_idle_timeout = platform_setting_user_session_idle_timeout
        if anti_malware_setting_event_email_subject is not None:
            self.anti_malware_setting_event_email_subject = anti_malware_setting_event_email_subject
        if platform_setting_connected_threat_defense_control_manager_use_proxy_enabled is not None:
            self.platform_setting_connected_threat_defense_control_manager_use_proxy_enabled = platform_setting_connected_threat_defense_control_manager_use_proxy_enabled
        if platform_setting_user_enforce_terms_and_conditions_enabled is not None:
            self.platform_setting_user_enforce_terms_and_conditions_enabled = platform_setting_user_enforce_terms_and_conditions_enabled
        if platform_setting_aws_manager_identity_access_key is not None:
            self.platform_setting_aws_manager_identity_access_key = platform_setting_aws_manager_identity_access_key
        if platform_setting_connected_threat_defense_control_manager_proxy_id is not None:
            self.platform_setting_connected_threat_defense_control_manager_proxy_id = platform_setting_connected_threat_defense_control_manager_proxy_id
        if platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled is not None:
            self.platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled = platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled
        if platform_setting_connected_threat_defense_control_manager_manual_source_server_url is not None:
            self.platform_setting_connected_threat_defense_control_manager_manual_source_server_url = platform_setting_connected_threat_defense_control_manager_manual_source_server_url
        if platform_setting_user_password_require_mixed_case_enabled is not None:
            self.platform_setting_user_password_require_mixed_case_enabled = platform_setting_user_password_require_mixed_case_enabled
        if platform_setting_trend_micro_xdr_identity_provider_api_url is not None:
            self.platform_setting_trend_micro_xdr_identity_provider_api_url = platform_setting_trend_micro_xdr_identity_provider_api_url
        if platform_setting_smart_protection_feedback_for_suspicious_file_enabled is not None:
            self.platform_setting_smart_protection_feedback_for_suspicious_file_enabled = platform_setting_smart_protection_feedback_for_suspicious_file_enabled
        if platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled = platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled
        if platform_setting_smart_protection_feedback_industry_type is not None:
            self.platform_setting_smart_protection_feedback_industry_type = platform_setting_smart_protection_feedback_industry_type
        if web_reputation_setting_retain_event_duration is not None:
            self.web_reputation_setting_retain_event_duration = web_reputation_setting_retain_event_duration
        if platform_setting_retain_server_log_duration is not None:
            self.platform_setting_retain_server_log_duration = platform_setting_retain_server_log_duration
        if integrity_monitoring_setting_event_rank_severity_medium is not None:
            self.integrity_monitoring_setting_event_rank_severity_medium = integrity_monitoring_setting_event_rank_severity_medium
        if platform_setting_proxy_manager_cloud_proxy_id is not None:
            self.platform_setting_proxy_manager_cloud_proxy_id = platform_setting_proxy_manager_cloud_proxy_id
        if platform_setting_update_relay_security_all_regions_patterns_download_enabled is not None:
            self.platform_setting_update_relay_security_all_regions_patterns_download_enabled = platform_setting_update_relay_security_all_regions_patterns_download_enabled
        if platform_setting_ddan_submission_enabled is not None:
            self.platform_setting_ddan_submission_enabled = platform_setting_ddan_submission_enabled
        if web_reputation_setting_event_rank_risk_suspicious is not None:
            self.web_reputation_setting_event_rank_risk_suspicious = web_reputation_setting_event_rank_risk_suspicious
        if integrity_monitoring_setting_event_rank_severity_critical is not None:
            self.integrity_monitoring_setting_event_rank_severity_critical = integrity_monitoring_setting_event_rank_severity_critical
        if platform_setting_smtp_from_email_address is not None:
            self.platform_setting_smtp_from_email_address = platform_setting_smtp_from_email_address
        if firewall_setting_global_stateful_config_id is not None:
            self.firewall_setting_global_stateful_config_id = firewall_setting_global_stateful_config_id
        if platform_setting_event_forwarding_sns_topic_arn is not None:
            self.platform_setting_event_forwarding_sns_topic_arn = platform_setting_event_forwarding_sns_topic_arn
        if firewall_setting_internet_connectivity_test_expected_content_regex is not None:
            self.firewall_setting_internet_connectivity_test_expected_content_regex = firewall_setting_internet_connectivity_test_expected_content_regex
        if platform_setting_connected_threat_defense_control_manager_manual_source_api_key is not None:
            self.platform_setting_connected_threat_defense_control_manager_manual_source_api_key = platform_setting_connected_threat_defense_control_manager_manual_source_api_key
        if platform_setting_load_balancer_manager_address is not None:
            self.platform_setting_load_balancer_manager_address = platform_setting_load_balancer_manager_address
        if platform_setting_update_security_primary_source_mode is not None:
            self.platform_setting_update_security_primary_source_mode = platform_setting_update_security_primary_source_mode
        if platform_setting_primary_tenant_share_connected_threat_defenses_enabled is not None:
            self.platform_setting_primary_tenant_share_connected_threat_defenses_enabled = platform_setting_primary_tenant_share_connected_threat_defenses_enabled
        if web_reputation_setting_event_rank_risk_dangerous is not None:
            self.web_reputation_setting_event_rank_risk_dangerous = web_reputation_setting_event_rank_risk_dangerous
        if platform_setting_load_balancer_heartbeat_port is not None:
            self.platform_setting_load_balancer_heartbeat_port = platform_setting_load_balancer_heartbeat_port
        if platform_setting_user_hide_unlicensed_modules_enabled is not None:
            self.platform_setting_user_hide_unlicensed_modules_enabled = platform_setting_user_hide_unlicensed_modules_enabled
        if platform_setting_capture_encrypted_traffic_enabled is not None:
            self.platform_setting_capture_encrypted_traffic_enabled = platform_setting_capture_encrypted_traffic_enabled
        if platform_setting_retain_system_event_duration is not None:
            self.platform_setting_retain_system_event_duration = platform_setting_retain_system_event_duration
        if platform_setting_user_password_expiry is not None:
            self.platform_setting_user_password_expiry = platform_setting_user_password_expiry
        if platform_setting_smart_protection_feedback_enabled is not None:
            self.platform_setting_smart_protection_feedback_enabled = platform_setting_smart_protection_feedback_enabled
        if integrity_monitoring_setting_retain_event_duration is not None:
            self.integrity_monitoring_setting_retain_event_duration = integrity_monitoring_setting_retain_event_duration
        if platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled = platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled
        if log_inspection_setting_event_rank_severity_critical is not None:
            self.log_inspection_setting_event_rank_severity_critical = log_inspection_setting_event_rank_severity_critical
        if platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled is not None:
            self.platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled
        if platform_setting_ddan_proxy_id is not None:
            self.platform_setting_ddan_proxy_id = platform_setting_ddan_proxy_id
        if platform_setting_agent_initiated_activation_within_ip_list_id is not None:
            self.platform_setting_agent_initiated_activation_within_ip_list_id = platform_setting_agent_initiated_activation_within_ip_list_id
        if platform_setting_update_security_primary_source_url is not None:
            self.platform_setting_update_security_primary_source_url = platform_setting_update_security_primary_source_url
        if platform_setting_agentless_vcloud_protection_enabled is not None:
            self.platform_setting_agentless_vcloud_protection_enabled = platform_setting_agentless_vcloud_protection_enabled
        if platform_setting_linux_upgrade_on_activation_enabled is not None:
            self.platform_setting_linux_upgrade_on_activation_enabled = platform_setting_linux_upgrade_on_activation_enabled
        if platform_setting_trend_micro_xdr_enabled is not None:
            self.platform_setting_trend_micro_xdr_enabled = platform_setting_trend_micro_xdr_enabled
        if platform_setting_active_sessions_max_exceeded_action is not None:
            self.platform_setting_active_sessions_max_exceeded_action = platform_setting_active_sessions_max_exceeded_action
        if platform_setting_update_hostname_on_ip_change_enabled is not None:
            self.platform_setting_update_hostname_on_ip_change_enabled = platform_setting_update_hostname_on_ip_change_enabled
        if log_inspection_setting_event_rank_severity_high is not None:
            self.log_inspection_setting_event_rank_severity_high = log_inspection_setting_event_rank_severity_high
        if platform_setting_smtp_requires_authentication_enabled is not None:
            self.platform_setting_smtp_requires_authentication_enabled = platform_setting_smtp_requires_authentication_enabled
        if platform_setting_active_sessions_max is not None:
            self.platform_setting_active_sessions_max = platform_setting_active_sessions_max
        if platform_setting_aws_external_id_retrieval_enabled is not None:
            self.platform_setting_aws_external_id_retrieval_enabled = platform_setting_aws_external_id_retrieval_enabled
        if log_inspection_setting_event_rank_severity_low is not None:
            self.log_inspection_setting_event_rank_severity_low = log_inspection_setting_event_rank_severity_low
        if platform_setting_azure_sso_certificate is not None:
            self.platform_setting_azure_sso_certificate = platform_setting_azure_sso_certificate
        if platform_setting_smtp_username is not None:
            self.platform_setting_smtp_username = platform_setting_smtp_username
        if platform_setting_event_forwarding_sns_advanced_config_enabled is not None:
            self.platform_setting_event_forwarding_sns_advanced_config_enabled = platform_setting_event_forwarding_sns_advanced_config_enabled
        if firewall_setting_internet_connectivity_test_interval is not None:
            self.firewall_setting_internet_connectivity_test_interval = firewall_setting_internet_connectivity_test_interval
        if platform_setting_whois_url is not None:
            self.platform_setting_whois_url = platform_setting_whois_url
        if platform_setting_ddan_source_option is not None:
            self.platform_setting_ddan_source_option = platform_setting_ddan_source_option
        if platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled is not None:
            self.platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled = platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled
        if platform_setting_exported_file_character_encoding is not None:
            self.platform_setting_exported_file_character_encoding = platform_setting_exported_file_character_encoding
        if platform_setting_user_session_duration_max is not None:
            self.platform_setting_user_session_duration_max = platform_setting_user_session_duration_max
        if platform_setting_update_software_alternate_update_server_urls is not None:
            self.platform_setting_update_software_alternate_update_server_urls = platform_setting_update_software_alternate_update_server_urls
        if platform_setting_retain_counters_duration is not None:
            self.platform_setting_retain_counters_duration = platform_setting_retain_counters_duration
        if platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled = platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled
        if platform_setting_smart_protection_feedback_interval is not None:
            self.platform_setting_smart_protection_feedback_interval = platform_setting_smart_protection_feedback_interval
        if platform_setting_system_event_forwarding_snmp_address is not None:
            self.platform_setting_system_event_forwarding_snmp_address = platform_setting_system_event_forwarding_snmp_address
        if platform_setting_smtp_server_address is not None:
            self.platform_setting_smtp_server_address = platform_setting_smtp_server_address
        if platform_setting_primary_tenant_allow_tenant_configure_siem_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_configure_siem_enabled = platform_setting_primary_tenant_allow_tenant_configure_siem_enabled
        if platform_setting_smtp_password is not None:
            self.platform_setting_smtp_password = platform_setting_smtp_password
        if platform_setting_event_forwarding_sns_config_json is not None:
            self.platform_setting_event_forwarding_sns_config_json = platform_setting_event_forwarding_sns_config_json
        if firewall_setting_retain_event_duration is not None:
            self.firewall_setting_retain_event_duration = firewall_setting_retain_event_duration
        if web_reputation_setting_event_rank_risk_untested is not None:
            self.web_reputation_setting_event_rank_risk_untested = web_reputation_setting_event_rank_risk_untested
        if platform_setting_managed_detect_response_use_proxy_enabled is not None:
            self.platform_setting_managed_detect_response_use_proxy_enabled = platform_setting_managed_detect_response_use_proxy_enabled
        if platform_setting_event_forwarding_sns_secret_key is not None:
            self.platform_setting_event_forwarding_sns_secret_key = platform_setting_event_forwarding_sns_secret_key
        if platform_setting_logo_binary_image_img is not None:
            self.platform_setting_logo_binary_image_img = platform_setting_logo_binary_image_img
        if platform_setting_aws_manager_identity_secret_key is not None:
            self.platform_setting_aws_manager_identity_secret_key = platform_setting_aws_manager_identity_secret_key
        if web_reputation_setting_event_rank_risk_highly_suspicious is not None:
            self.web_reputation_setting_event_rank_risk_highly_suspicious = web_reputation_setting_event_rank_risk_highly_suspicious
        if platform_setting_api_status_monitoring_enabled is not None:
            self.platform_setting_api_status_monitoring_enabled = platform_setting_api_status_monitoring_enabled
        if platform_setting_sign_in_page_message is not None:
            self.platform_setting_sign_in_page_message = platform_setting_sign_in_page_message
        if platform_setting_user_password_expiry_send_email_enabled is not None:
            self.platform_setting_user_password_expiry_send_email_enabled = platform_setting_user_password_expiry_send_email_enabled
        if platform_setting_user_sign_in_attempts_allowed_number is not None:
            self.platform_setting_user_sign_in_attempts_allowed_number = platform_setting_user_sign_in_attempts_allowed_number
        if platform_setting_ddan_use_proxy_enabled is not None:
            self.platform_setting_ddan_use_proxy_enabled = platform_setting_ddan_use_proxy_enabled
        if platform_setting_agent_initiated_activation_enabled is not None:
            self.platform_setting_agent_initiated_activation_enabled = platform_setting_agent_initiated_activation_enabled
        if platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled = platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled
        if platform_setting_smart_protection_feedback_bandwidth_max_kbytes is not None:
            self.platform_setting_smart_protection_feedback_bandwidth_max_kbytes = platform_setting_smart_protection_feedback_bandwidth_max_kbytes
        if firewall_setting_event_rank_severity_packet_rejection is not None:
            self.firewall_setting_event_rank_severity_packet_rejection = firewall_setting_event_rank_severity_packet_rejection
        if platform_setting_proxy_manager_update_proxy_id is not None:
            self.platform_setting_proxy_manager_update_proxy_id = platform_setting_proxy_manager_update_proxy_id
        if platform_setting_managed_detect_response_use_primary_tenant_settings_enabled is not None:
            self.platform_setting_managed_detect_response_use_primary_tenant_settings_enabled = platform_setting_managed_detect_response_use_primary_tenant_settings_enabled
        if platform_setting_event_forwarding_sns_access_key is not None:
            self.platform_setting_event_forwarding_sns_access_key = platform_setting_event_forwarding_sns_access_key
        if platform_setting_agent_initiated_activation_specify_hostname_enabled is not None:
            self.platform_setting_agent_initiated_activation_specify_hostname_enabled = platform_setting_agent_initiated_activation_specify_hostname_enabled
        if platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled = platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled
        if platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled is not None:
            self.platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled = platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled
        if platform_setting_inactive_agent_cleanup_duration is not None:
            self.platform_setting_inactive_agent_cleanup_duration = platform_setting_inactive_agent_cleanup_duration
        if platform_setting_agent_initiated_activation_duplicate_hostname_mode is not None:
            self.platform_setting_agent_initiated_activation_duplicate_hostname_mode = platform_setting_agent_initiated_activation_duplicate_hostname_mode
        if platform_setting_vmware_nsx_manager_node is not None:
            self.platform_setting_vmware_nsx_manager_node = platform_setting_vmware_nsx_manager_node
        if platform_setting_user_enforce_terms_and_conditions_title is not None:
            self.platform_setting_user_enforce_terms_and_conditions_title = platform_setting_user_enforce_terms_and_conditions_title
        if platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled = platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled
        if platform_setting_new_tenant_download_security_update_enabled is not None:
            self.platform_setting_new_tenant_download_security_update_enabled = platform_setting_new_tenant_download_security_update_enabled
        if platform_setting_tenant_protection_usage_monitoring_computer_id3 is not None:
            self.platform_setting_tenant_protection_usage_monitoring_computer_id3 = platform_setting_tenant_protection_usage_monitoring_computer_id3
        if platform_setting_agent_initiated_activation_reactivate_unknown_enabled is not None:
            self.platform_setting_agent_initiated_activation_reactivate_unknown_enabled = platform_setting_agent_initiated_activation_reactivate_unknown_enabled
        if platform_setting_tenant_protection_usage_monitoring_computer_id2 is not None:
            self.platform_setting_tenant_protection_usage_monitoring_computer_id2 = platform_setting_tenant_protection_usage_monitoring_computer_id2
        if platform_setting_agent_initiated_activation_policy_id is not None:
            self.platform_setting_agent_initiated_activation_policy_id = platform_setting_agent_initiated_activation_policy_id
        if platform_setting_tenant_protection_usage_monitoring_computer_id1 is not None:
            self.platform_setting_tenant_protection_usage_monitoring_computer_id1 = platform_setting_tenant_protection_usage_monitoring_computer_id1
        if platform_setting_trend_micro_xdr_api_server_url is not None:
            self.platform_setting_trend_micro_xdr_api_server_url = platform_setting_trend_micro_xdr_api_server_url
        if platform_setting_retain_agent_installers_per_platform_max is not None:
            self.platform_setting_retain_agent_installers_per_platform_max = platform_setting_retain_agent_installers_per_platform_max
        if application_control_setting_serve_rulesets_from_relays_enabled is not None:
            self.application_control_setting_serve_rulesets_from_relays_enabled = application_control_setting_serve_rulesets_from_relays_enabled
        if integrity_monitoring_setting_event_rank_severity_high is not None:
            self.integrity_monitoring_setting_event_rank_severity_high = integrity_monitoring_setting_event_rank_severity_high
        if platform_setting_saml_retain_inactive_external_administrators_duration is not None:
            self.platform_setting_saml_retain_inactive_external_administrators_duration = platform_setting_saml_retain_inactive_external_administrators_duration
        if intrusion_prevention_setting_retain_event_duration is not None:
            self.intrusion_prevention_setting_retain_event_duration = intrusion_prevention_setting_retain_event_duration
        if platform_setting_http_public_key_pin_policy_report_only_enabled is not None:
            self.platform_setting_http_public_key_pin_policy_report_only_enabled = platform_setting_http_public_key_pin_policy_report_only_enabled
        if platform_setting_saml_service_provider_name is not None:
            self.platform_setting_saml_service_provider_name = platform_setting_saml_service_provider_name
        if firewall_setting_internet_connectivity_test_url is not None:
            self.firewall_setting_internet_connectivity_test_url = firewall_setting_internet_connectivity_test_url
        if platform_setting_saml_service_provider_certificate_expiry_warning_days is not None:
            self.platform_setting_saml_service_provider_certificate_expiry_warning_days = platform_setting_saml_service_provider_certificate_expiry_warning_days
        if platform_setting_proxy_agent_update_proxy_id is not None:
            self.platform_setting_proxy_agent_update_proxy_id = platform_setting_proxy_agent_update_proxy_id
        if platform_setting_ddan_auto_submission_enabled is not None:
            self.platform_setting_ddan_auto_submission_enabled = platform_setting_ddan_auto_submission_enabled
        if platform_setting_ddan_manual_source_api_key is not None:
            self.platform_setting_ddan_manual_source_api_key = platform_setting_ddan_manual_source_api_key
        if platform_setting_saml_service_provider_entity_id is not None:
            self.platform_setting_saml_service_provider_entity_id = platform_setting_saml_service_provider_entity_id
        if intrusion_prevention_setting_event_rank_severity_filter_error is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_error = intrusion_prevention_setting_event_rank_severity_filter_error
        if intrusion_prevention_setting_event_rank_severity_filter_high is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_high = intrusion_prevention_setting_event_rank_severity_filter_high
        if platform_setting_trend_micro_xdr_api_key is not None:
            self.platform_setting_trend_micro_xdr_api_key = platform_setting_trend_micro_xdr_api_key
        if integrity_monitoring_setting_event_rank_severity_low is not None:
            self.integrity_monitoring_setting_event_rank_severity_low = integrity_monitoring_setting_event_rank_severity_low
        if platform_setting_trend_micro_xdr_company_id is not None:
            self.platform_setting_trend_micro_xdr_company_id = platform_setting_trend_micro_xdr_company_id

    @property
    def platform_setting_saml_identity_provider_certificate_expiry_warning_days(self):
        """Gets the platform_setting_saml_identity_provider_certificate_expiry_warning_days of this SystemSettings.  # noqa: E501

        Warn when a SAML identity provider certificate will expire within (days)  # noqa: E501

        :return: The platform_setting_saml_identity_provider_certificate_expiry_warning_days of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_saml_identity_provider_certificate_expiry_warning_days

    @platform_setting_saml_identity_provider_certificate_expiry_warning_days.setter
    def platform_setting_saml_identity_provider_certificate_expiry_warning_days(self, platform_setting_saml_identity_provider_certificate_expiry_warning_days):
        """Sets the platform_setting_saml_identity_provider_certificate_expiry_warning_days of this SystemSettings.

        Warn when a SAML identity provider certificate will expire within (days)  # noqa: E501

        :param platform_setting_saml_identity_provider_certificate_expiry_warning_days: The platform_setting_saml_identity_provider_certificate_expiry_warning_days of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_saml_identity_provider_certificate_expiry_warning_days = platform_setting_saml_identity_provider_certificate_expiry_warning_days

    @property
    def platform_setting_update_agent_security_on_missing_deep_security_manager_enabled(self):
        """Gets the platform_setting_update_agent_security_on_missing_deep_security_manager_enabled of this SystemSettings.  # noqa: E501

        Allow Agents/Appliances to download security updates when Deep Security Manager is not accessible  # noqa: E501

        :return: The platform_setting_update_agent_security_on_missing_deep_security_manager_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_agent_security_on_missing_deep_security_manager_enabled

    @platform_setting_update_agent_security_on_missing_deep_security_manager_enabled.setter
    def platform_setting_update_agent_security_on_missing_deep_security_manager_enabled(self, platform_setting_update_agent_security_on_missing_deep_security_manager_enabled):
        """Sets the platform_setting_update_agent_security_on_missing_deep_security_manager_enabled of this SystemSettings.

        Allow Agents/Appliances to download security updates when Deep Security Manager is not accessible  # noqa: E501

        :param platform_setting_update_agent_security_on_missing_deep_security_manager_enabled: The platform_setting_update_agent_security_on_missing_deep_security_manager_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_agent_security_on_missing_deep_security_manager_enabled = platform_setting_update_agent_security_on_missing_deep_security_manager_enabled

    @property
    def platform_setting_ddan_manual_source_server_url(self):
        """Gets the platform_setting_ddan_manual_source_server_url of this SystemSettings.  # noqa: E501

        Server URL (ex: \"https://[server]/\")  # noqa: E501

        :return: The platform_setting_ddan_manual_source_server_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_manual_source_server_url

    @platform_setting_ddan_manual_source_server_url.setter
    def platform_setting_ddan_manual_source_server_url(self, platform_setting_ddan_manual_source_server_url):
        """Sets the platform_setting_ddan_manual_source_server_url of this SystemSettings.

        Server URL (ex: \"https://[server]/\")  # noqa: E501

        :param platform_setting_ddan_manual_source_server_url: The platform_setting_ddan_manual_source_server_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_manual_source_server_url = platform_setting_ddan_manual_source_server_url

    @property
    def platform_setting_load_balancer_manager_port(self):
        """Gets the platform_setting_load_balancer_manager_port of this SystemSettings.  # noqa: E501

        Load Balancer Manager Port  # noqa: E501

        :return: The platform_setting_load_balancer_manager_port of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_load_balancer_manager_port

    @platform_setting_load_balancer_manager_port.setter
    def platform_setting_load_balancer_manager_port(self, platform_setting_load_balancer_manager_port):
        """Sets the platform_setting_load_balancer_manager_port of this SystemSettings.

        Load Balancer Manager Port  # noqa: E501

        :param platform_setting_load_balancer_manager_port: The platform_setting_load_balancer_manager_port of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_load_balancer_manager_port = platform_setting_load_balancer_manager_port

    @property
    def platform_setting_smart_protection_feedback_threat_detections_threshold(self):
        """Gets the platform_setting_smart_protection_feedback_threat_detections_threshold of this SystemSettings.  # noqa: E501

        Feedback Interval by threats  # noqa: E501

        :return: The platform_setting_smart_protection_feedback_threat_detections_threshold of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smart_protection_feedback_threat_detections_threshold

    @platform_setting_smart_protection_feedback_threat_detections_threshold.setter
    def platform_setting_smart_protection_feedback_threat_detections_threshold(self, platform_setting_smart_protection_feedback_threat_detections_threshold):
        """Sets the platform_setting_smart_protection_feedback_threat_detections_threshold of this SystemSettings.

        Feedback Interval by threats  # noqa: E501

        :param platform_setting_smart_protection_feedback_threat_detections_threshold: The platform_setting_smart_protection_feedback_threat_detections_threshold of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smart_protection_feedback_threat_detections_threshold = platform_setting_smart_protection_feedback_threat_detections_threshold

    @property
    def platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to run \"Port Scan\" (directly and as a Scheduled Task)  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled

    @platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled(self, platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled of this SystemSettings.

        Allow Tenants to run \"Port Scan\" (directly and as a Scheduled Task)  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled: The platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled = platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_medium(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_medium of this SystemSettings.  # noqa: E501

        Medium  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_medium of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_medium

    @intrusion_prevention_setting_event_rank_severity_filter_medium.setter
    def intrusion_prevention_setting_event_rank_severity_filter_medium(self, intrusion_prevention_setting_event_rank_severity_filter_medium):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_medium of this SystemSettings.

        Medium  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_medium: The intrusion_prevention_setting_event_rank_severity_filter_medium of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_medium = intrusion_prevention_setting_event_rank_severity_filter_medium

    @property
    def firewall_setting_intranet_connectivity_test_expected_content_regex(self):
        """Gets the firewall_setting_intranet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501

        Regular Expression for returned content used to confirm Intranet Connectivity  # noqa: E501

        :return: The firewall_setting_intranet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_intranet_connectivity_test_expected_content_regex

    @firewall_setting_intranet_connectivity_test_expected_content_regex.setter
    def firewall_setting_intranet_connectivity_test_expected_content_regex(self, firewall_setting_intranet_connectivity_test_expected_content_regex):
        """Sets the firewall_setting_intranet_connectivity_test_expected_content_regex of this SystemSettings.

        Regular Expression for returned content used to confirm Intranet Connectivity  # noqa: E501

        :param firewall_setting_intranet_connectivity_test_expected_content_regex: The firewall_setting_intranet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_intranet_connectivity_test_expected_content_regex = firewall_setting_intranet_connectivity_test_expected_content_regex

    @property
    def platform_setting_event_forwarding_sns_enabled(self):
        """Gets the platform_setting_event_forwarding_sns_enabled of this SystemSettings.  # noqa: E501

        Publish Events to Amazon Simple Notification Service  # noqa: E501

        :return: The platform_setting_event_forwarding_sns_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_event_forwarding_sns_enabled

    @platform_setting_event_forwarding_sns_enabled.setter
    def platform_setting_event_forwarding_sns_enabled(self, platform_setting_event_forwarding_sns_enabled):
        """Sets the platform_setting_event_forwarding_sns_enabled of this SystemSettings.

        Publish Events to Amazon Simple Notification Service  # noqa: E501

        :param platform_setting_event_forwarding_sns_enabled: The platform_setting_event_forwarding_sns_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_event_forwarding_sns_enabled = platform_setting_event_forwarding_sns_enabled

    @property
    def platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout(self):
        """Gets the platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout of this SystemSettings.  # noqa: E501

        Automatically revoke Primary Tenant access after  # noqa: E501

        :return: The platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout

    @platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout.setter
    def platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout(self, platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout):
        """Sets the platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout of this SystemSettings.

        Automatically revoke Primary Tenant access after  # noqa: E501

        :param platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout: The platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout = platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout

    @property
    def web_reputation_setting_event_rank_risk_blocked_by_administrator_rank(self):
        """Gets the web_reputation_setting_event_rank_risk_blocked_by_administrator_rank of this SystemSettings.  # noqa: E501

        Blocked By Administrator  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_blocked_by_administrator_rank of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_blocked_by_administrator_rank

    @web_reputation_setting_event_rank_risk_blocked_by_administrator_rank.setter
    def web_reputation_setting_event_rank_risk_blocked_by_administrator_rank(self, web_reputation_setting_event_rank_risk_blocked_by_administrator_rank):
        """Sets the web_reputation_setting_event_rank_risk_blocked_by_administrator_rank of this SystemSettings.

        Blocked By Administrator  # noqa: E501

        :param web_reputation_setting_event_rank_risk_blocked_by_administrator_rank: The web_reputation_setting_event_rank_risk_blocked_by_administrator_rank of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_blocked_by_administrator_rank = web_reputation_setting_event_rank_risk_blocked_by_administrator_rank

    @property
    def platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled(self):
        """Gets the platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled of this SystemSettings.  # noqa: E501

        All options on the \"Storage\" Tab  # noqa: E501

        :return: The platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled

    @platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled.setter
    def platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled(self, platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled):
        """Sets the platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled of this SystemSettings.

        All options on the \"Storage\" Tab  # noqa: E501

        :param platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled: The platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled

    @property
    def anti_malware_setting_event_email_recipients(self):
        """Gets the anti_malware_setting_event_email_recipients of this SystemSettings.  # noqa: E501

        Email Recipients  # noqa: E501

        :return: The anti_malware_setting_event_email_recipients of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_event_email_recipients

    @anti_malware_setting_event_email_recipients.setter
    def anti_malware_setting_event_email_recipients(self, anti_malware_setting_event_email_recipients):
        """Sets the anti_malware_setting_event_email_recipients of this SystemSettings.

        Email Recipients  # noqa: E501

        :param anti_malware_setting_event_email_recipients: The anti_malware_setting_event_email_recipients of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_event_email_recipients = anti_malware_setting_event_email_recipients

    @property
    def platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to use the Relays in my \"Default Relay Group\"  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled

    @platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled(self, platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled of this SystemSettings.

        Allow Tenants to use the Relays in my \"Default Relay Group\"  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled: The platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled = platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled

    @property
    def platform_setting_http_strict_transport_enabled(self):
        """Gets the platform_setting_http_strict_transport_enabled of this SystemSettings.  # noqa: E501

        Enable HTTP Strict Transport Security  # noqa: E501

        :return: The platform_setting_http_strict_transport_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_http_strict_transport_enabled

    @platform_setting_http_strict_transport_enabled.setter
    def platform_setting_http_strict_transport_enabled(self, platform_setting_http_strict_transport_enabled):
        """Sets the platform_setting_http_strict_transport_enabled of this SystemSettings.

        Enable HTTP Strict Transport Security  # noqa: E501

        :param platform_setting_http_strict_transport_enabled: The platform_setting_http_strict_transport_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_http_strict_transport_enabled = platform_setting_http_strict_transport_enabled

    @property
    def firewall_setting_intranet_connectivity_test_url(self):
        """Gets the firewall_setting_intranet_connectivity_test_url of this SystemSettings.  # noqa: E501

        URL for testing Intranet Connectivity Status  # noqa: E501

        :return: The firewall_setting_intranet_connectivity_test_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_intranet_connectivity_test_url

    @firewall_setting_intranet_connectivity_test_url.setter
    def firewall_setting_intranet_connectivity_test_url(self, firewall_setting_intranet_connectivity_test_url):
        """Sets the firewall_setting_intranet_connectivity_test_url of this SystemSettings.

        URL for testing Intranet Connectivity Status  # noqa: E501

        :param firewall_setting_intranet_connectivity_test_url: The firewall_setting_intranet_connectivity_test_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_intranet_connectivity_test_url = firewall_setting_intranet_connectivity_test_url

    @property
    def platform_setting_primary_tenant_allow_tenant_configure_sns_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_configure_sns_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to configure SNS settings  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_configure_sns_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_configure_sns_enabled

    @platform_setting_primary_tenant_allow_tenant_configure_sns_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_configure_sns_enabled(self, platform_setting_primary_tenant_allow_tenant_configure_sns_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_configure_sns_enabled of this SystemSettings.

        Allow Tenants to configure SNS settings  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_configure_sns_enabled: The platform_setting_primary_tenant_allow_tenant_configure_sns_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_configure_sns_enabled = platform_setting_primary_tenant_allow_tenant_configure_sns_enabled

    @property
    def platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled(self):
        """Gets the platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled of this SystemSettings.  # noqa: E501

        Use the Primary Tenant Relay Group as my Default Relay Group  # noqa: E501

        :return: The platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled

    @platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled.setter
    def platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled(self, platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled):
        """Sets the platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled of this SystemSettings.

        Use the Primary Tenant Relay Group as my Default Relay Group  # noqa: E501

        :param platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled: The platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled = platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled

    @property
    def platform_setting_exported_diagnostic_package_locale(self):
        """Gets the platform_setting_exported_diagnostic_package_locale of this SystemSettings.  # noqa: E501

        Exported Diagnostic Package Language  # noqa: E501

        :return: The platform_setting_exported_diagnostic_package_locale of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_exported_diagnostic_package_locale

    @platform_setting_exported_diagnostic_package_locale.setter
    def platform_setting_exported_diagnostic_package_locale(self, platform_setting_exported_diagnostic_package_locale):
        """Sets the platform_setting_exported_diagnostic_package_locale of this SystemSettings.

        Exported Diagnostic Package Language  # noqa: E501

        :param platform_setting_exported_diagnostic_package_locale: The platform_setting_exported_diagnostic_package_locale of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_exported_diagnostic_package_locale = platform_setting_exported_diagnostic_package_locale

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_critical(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_critical of this SystemSettings.  # noqa: E501

        Critical  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_critical of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_critical

    @intrusion_prevention_setting_event_rank_severity_filter_critical.setter
    def intrusion_prevention_setting_event_rank_severity_filter_critical(self, intrusion_prevention_setting_event_rank_severity_filter_critical):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_critical of this SystemSettings.

        Critical  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_critical: The intrusion_prevention_setting_event_rank_severity_filter_critical of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_critical = intrusion_prevention_setting_event_rank_severity_filter_critical

    @property
    def platform_setting_update_imported_software_auto_download_enabled(self):
        """Gets the platform_setting_update_imported_software_auto_download_enabled of this SystemSettings.  # noqa: E501

        Automatically download updates to imported software  # noqa: E501

        :return: The platform_setting_update_imported_software_auto_download_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_imported_software_auto_download_enabled

    @platform_setting_update_imported_software_auto_download_enabled.setter
    def platform_setting_update_imported_software_auto_download_enabled(self, platform_setting_update_imported_software_auto_download_enabled):
        """Sets the platform_setting_update_imported_software_auto_download_enabled of this SystemSettings.

        Automatically download updates to imported software  # noqa: E501

        :param platform_setting_update_imported_software_auto_download_enabled: The platform_setting_update_imported_software_auto_download_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_imported_software_auto_download_enabled = platform_setting_update_imported_software_auto_download_enabled

    @property
    def platform_setting_demo_mode_enabled(self):
        """Gets the platform_setting_demo_mode_enabled of this SystemSettings.  # noqa: E501

        Demo Mode Enabled  # noqa: E501

        :return: The platform_setting_demo_mode_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_demo_mode_enabled

    @platform_setting_demo_mode_enabled.setter
    def platform_setting_demo_mode_enabled(self, platform_setting_demo_mode_enabled):
        """Sets the platform_setting_demo_mode_enabled of this SystemSettings.

        Demo Mode Enabled  # noqa: E501

        :param platform_setting_demo_mode_enabled: The platform_setting_demo_mode_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_demo_mode_enabled = platform_setting_demo_mode_enabled

    @property
    def platform_setting_user_enforce_terms_and_conditions_message(self):
        """Gets the platform_setting_user_enforce_terms_and_conditions_message of this SystemSettings.  # noqa: E501

        List of Terms And Conditions  # noqa: E501

        :return: The platform_setting_user_enforce_terms_and_conditions_message of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_enforce_terms_and_conditions_message

    @platform_setting_user_enforce_terms_and_conditions_message.setter
    def platform_setting_user_enforce_terms_and_conditions_message(self, platform_setting_user_enforce_terms_and_conditions_message):
        """Sets the platform_setting_user_enforce_terms_and_conditions_message of this SystemSettings.

        List of Terms And Conditions  # noqa: E501

        :param platform_setting_user_enforce_terms_and_conditions_message: The platform_setting_user_enforce_terms_and_conditions_message of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_enforce_terms_and_conditions_message = platform_setting_user_enforce_terms_and_conditions_message

    @property
    def platform_setting_trend_micro_xdr_common_log_receiver_url(self):
        """Gets the platform_setting_trend_micro_xdr_common_log_receiver_url of this SystemSettings.  # noqa: E501

        Common Log Receiver URL  # noqa: E501

        :return: The platform_setting_trend_micro_xdr_common_log_receiver_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_trend_micro_xdr_common_log_receiver_url

    @platform_setting_trend_micro_xdr_common_log_receiver_url.setter
    def platform_setting_trend_micro_xdr_common_log_receiver_url(self, platform_setting_trend_micro_xdr_common_log_receiver_url):
        """Sets the platform_setting_trend_micro_xdr_common_log_receiver_url of this SystemSettings.

        Common Log Receiver URL  # noqa: E501

        :param platform_setting_trend_micro_xdr_common_log_receiver_url: The platform_setting_trend_micro_xdr_common_log_receiver_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_trend_micro_xdr_common_log_receiver_url = platform_setting_trend_micro_xdr_common_log_receiver_url

    @property
    def platform_setting_managed_detect_response_company_guid(self):
        """Gets the platform_setting_managed_detect_response_company_guid of this SystemSettings.  # noqa: E501

        Company GUID  # noqa: E501

        :return: The platform_setting_managed_detect_response_company_guid of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_managed_detect_response_company_guid

    @platform_setting_managed_detect_response_company_guid.setter
    def platform_setting_managed_detect_response_company_guid(self, platform_setting_managed_detect_response_company_guid):
        """Sets the platform_setting_managed_detect_response_company_guid of this SystemSettings.

        Company GUID  # noqa: E501

        :param platform_setting_managed_detect_response_company_guid: The platform_setting_managed_detect_response_company_guid of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_managed_detect_response_company_guid = platform_setting_managed_detect_response_company_guid

    @property
    def platform_setting_alert_default_email_address(self):
        """Gets the platform_setting_alert_default_email_address of this SystemSettings.  # noqa: E501

        Alert Email Address - The email address to which all alert emails should be sent  # noqa: E501

        :return: The platform_setting_alert_default_email_address of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_alert_default_email_address

    @platform_setting_alert_default_email_address.setter
    def platform_setting_alert_default_email_address(self, platform_setting_alert_default_email_address):
        """Sets the platform_setting_alert_default_email_address of this SystemSettings.

        Alert Email Address - The email address to which all alert emails should be sent  # noqa: E501

        :param platform_setting_alert_default_email_address: The platform_setting_alert_default_email_address of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_alert_default_email_address = platform_setting_alert_default_email_address

    @property
    def platform_setting_agent_initiated_activation_reactivate_cloned_enabled(self):
        """Gets the platform_setting_agent_initiated_activation_reactivate_cloned_enabled of this SystemSettings.  # noqa: E501

        Reactivate cloned Agents  # noqa: E501

        :return: The platform_setting_agent_initiated_activation_reactivate_cloned_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_agent_initiated_activation_reactivate_cloned_enabled

    @platform_setting_agent_initiated_activation_reactivate_cloned_enabled.setter
    def platform_setting_agent_initiated_activation_reactivate_cloned_enabled(self, platform_setting_agent_initiated_activation_reactivate_cloned_enabled):
        """Sets the platform_setting_agent_initiated_activation_reactivate_cloned_enabled of this SystemSettings.

        Reactivate cloned Agents  # noqa: E501

        :param platform_setting_agent_initiated_activation_reactivate_cloned_enabled: The platform_setting_agent_initiated_activation_reactivate_cloned_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_agent_initiated_activation_reactivate_cloned_enabled = platform_setting_agent_initiated_activation_reactivate_cloned_enabled

    @property
    def platform_setting_managed_detect_response_server_url(self):
        """Gets the platform_setting_managed_detect_response_server_url of this SystemSettings.  # noqa: E501

        Server URL (ex: \"https://[server]/\")  # noqa: E501

        :return: The platform_setting_managed_detect_response_server_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_managed_detect_response_server_url

    @platform_setting_managed_detect_response_server_url.setter
    def platform_setting_managed_detect_response_server_url(self, platform_setting_managed_detect_response_server_url):
        """Sets the platform_setting_managed_detect_response_server_url of this SystemSettings.

        Server URL (ex: \"https://[server]/\")  # noqa: E501

        :param platform_setting_managed_detect_response_server_url: The platform_setting_managed_detect_response_server_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_managed_detect_response_server_url = platform_setting_managed_detect_response_server_url

    @property
    def platform_setting_primary_tenant_share_managed_detect_responses_enabled(self):
        """Gets the platform_setting_primary_tenant_share_managed_detect_responses_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to use Primary Tenant's Managed Detection and Response settings.  # noqa: E501

        :return: The platform_setting_primary_tenant_share_managed_detect_responses_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_share_managed_detect_responses_enabled

    @platform_setting_primary_tenant_share_managed_detect_responses_enabled.setter
    def platform_setting_primary_tenant_share_managed_detect_responses_enabled(self, platform_setting_primary_tenant_share_managed_detect_responses_enabled):
        """Sets the platform_setting_primary_tenant_share_managed_detect_responses_enabled of this SystemSettings.

        Allow Tenants to use Primary Tenant's Managed Detection and Response settings.  # noqa: E501

        :param platform_setting_primary_tenant_share_managed_detect_responses_enabled: The platform_setting_primary_tenant_share_managed_detect_responses_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_share_managed_detect_responses_enabled = platform_setting_primary_tenant_share_managed_detect_responses_enabled

    @property
    def platform_setting_saml_service_provider_certificate(self):
        """Gets the platform_setting_saml_service_provider_certificate of this SystemSettings.  # noqa: E501

        SAML Service Provider Certificate  # noqa: E501

        :return: The platform_setting_saml_service_provider_certificate of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_saml_service_provider_certificate

    @platform_setting_saml_service_provider_certificate.setter
    def platform_setting_saml_service_provider_certificate(self, platform_setting_saml_service_provider_certificate):
        """Sets the platform_setting_saml_service_provider_certificate of this SystemSettings.

        SAML Service Provider Certificate  # noqa: E501

        :param platform_setting_saml_service_provider_certificate: The platform_setting_saml_service_provider_certificate of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_saml_service_provider_certificate = platform_setting_saml_service_provider_certificate

    @property
    def platform_setting_syslog_config_id(self):
        """Gets the platform_setting_syslog_config_id of this SystemSettings.  # noqa: E501

        Forward System Events to a remote computer (via Syslog) using configuration  # noqa: E501

        :return: The platform_setting_syslog_config_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_syslog_config_id

    @platform_setting_syslog_config_id.setter
    def platform_setting_syslog_config_id(self, platform_setting_syslog_config_id):
        """Sets the platform_setting_syslog_config_id of this SystemSettings.

        Forward System Events to a remote computer (via Syslog) using configuration  # noqa: E501

        :param platform_setting_syslog_config_id: The platform_setting_syslog_config_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_syslog_config_id = platform_setting_syslog_config_id

    @property
    def platform_setting_smtp_start_tls_enabled(self):
        """Gets the platform_setting_smtp_start_tls_enabled of this SystemSettings.  # noqa: E501

        STARTTLS  # noqa: E501

        :return: The platform_setting_smtp_start_tls_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smtp_start_tls_enabled

    @platform_setting_smtp_start_tls_enabled.setter
    def platform_setting_smtp_start_tls_enabled(self, platform_setting_smtp_start_tls_enabled):
        """Sets the platform_setting_smtp_start_tls_enabled of this SystemSettings.

        STARTTLS  # noqa: E501

        :param platform_setting_smtp_start_tls_enabled: The platform_setting_smtp_start_tls_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smtp_start_tls_enabled = platform_setting_smtp_start_tls_enabled

    @property
    def platform_setting_user_password_require_letters_and_numbers_enabled(self):
        """Gets the platform_setting_user_password_require_letters_and_numbers_enabled of this SystemSettings.  # noqa: E501

        User password requires both letters and numbers  # noqa: E501

        :return: The platform_setting_user_password_require_letters_and_numbers_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_password_require_letters_and_numbers_enabled

    @platform_setting_user_password_require_letters_and_numbers_enabled.setter
    def platform_setting_user_password_require_letters_and_numbers_enabled(self, platform_setting_user_password_require_letters_and_numbers_enabled):
        """Sets the platform_setting_user_password_require_letters_and_numbers_enabled of this SystemSettings.

        User password requires both letters and numbers  # noqa: E501

        :param platform_setting_user_password_require_letters_and_numbers_enabled: The platform_setting_user_password_require_letters_and_numbers_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_password_require_letters_and_numbers_enabled = platform_setting_user_password_require_letters_and_numbers_enabled

    @property
    def platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to synchronize with LDAP Directories  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled

    @platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled(self, platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled of this SystemSettings.

        Allow Tenants to synchronize with LDAP Directories  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled: The platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled = platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled

    @property
    def platform_setting_load_balancer_relay_port(self):
        """Gets the platform_setting_load_balancer_relay_port of this SystemSettings.  # noqa: E501

        Load Balancer Relay Port  # noqa: E501

        :return: The platform_setting_load_balancer_relay_port of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_load_balancer_relay_port

    @platform_setting_load_balancer_relay_port.setter
    def platform_setting_load_balancer_relay_port(self, platform_setting_load_balancer_relay_port):
        """Sets the platform_setting_load_balancer_relay_port of this SystemSettings.

        Load Balancer Relay Port  # noqa: E501

        :param platform_setting_load_balancer_relay_port: The platform_setting_load_balancer_relay_port of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_load_balancer_relay_port = platform_setting_load_balancer_relay_port

    @property
    def platform_setting_managed_detect_response_enabled(self):
        """Gets the platform_setting_managed_detect_response_enabled of this SystemSettings.  # noqa: E501

        Enable the MDR service  # noqa: E501

        :return: The platform_setting_managed_detect_response_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_managed_detect_response_enabled

    @platform_setting_managed_detect_response_enabled.setter
    def platform_setting_managed_detect_response_enabled(self, platform_setting_managed_detect_response_enabled):
        """Sets the platform_setting_managed_detect_response_enabled of this SystemSettings.

        Enable the MDR service  # noqa: E501

        :param platform_setting_managed_detect_response_enabled: The platform_setting_managed_detect_response_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_managed_detect_response_enabled = platform_setting_managed_detect_response_enabled

    @property
    def platform_setting_update_rules_policy_auto_apply_enabled(self):
        """Gets the platform_setting_update_rules_policy_auto_apply_enabled of this SystemSettings.  # noqa: E501

        Automatically apply Rule Updates to Policies  # noqa: E501

        :return: The platform_setting_update_rules_policy_auto_apply_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_rules_policy_auto_apply_enabled

    @platform_setting_update_rules_policy_auto_apply_enabled.setter
    def platform_setting_update_rules_policy_auto_apply_enabled(self, platform_setting_update_rules_policy_auto_apply_enabled):
        """Sets the platform_setting_update_rules_policy_auto_apply_enabled of this SystemSettings.

        Automatically apply Rule Updates to Policies  # noqa: E501

        :param platform_setting_update_rules_policy_auto_apply_enabled: The platform_setting_update_rules_policy_auto_apply_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_rules_policy_auto_apply_enabled = platform_setting_update_rules_policy_auto_apply_enabled

    @property
    def platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled of this SystemSettings.  # noqa: E501

        Show the \"Forgot Password?\" option  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled

    @platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled(self, platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled of this SystemSettings.

        Show the \"Forgot Password?\" option  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled: The platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled = platform_setting_primary_tenant_allow_tenant_configure_forgot_password_enabled

    @property
    def platform_setting_user_password_require_not_same_as_username_enabled(self):
        """Gets the platform_setting_user_password_require_not_same_as_username_enabled of this SystemSettings.  # noqa: E501

        User password cannot match username or username spelled backward  # noqa: E501

        :return: The platform_setting_user_password_require_not_same_as_username_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_password_require_not_same_as_username_enabled

    @platform_setting_user_password_require_not_same_as_username_enabled.setter
    def platform_setting_user_password_require_not_same_as_username_enabled(self, platform_setting_user_password_require_not_same_as_username_enabled):
        """Sets the platform_setting_user_password_require_not_same_as_username_enabled of this SystemSettings.

        User password cannot match username or username spelled backward  # noqa: E501

        :param platform_setting_user_password_require_not_same_as_username_enabled: The platform_setting_user_password_require_not_same_as_username_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_password_require_not_same_as_username_enabled = platform_setting_user_password_require_not_same_as_username_enabled

    @property
    def log_inspection_setting_event_rank_severity_medium(self):
        """Gets the log_inspection_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501

        Medium  # noqa: E501

        :return: The log_inspection_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_event_rank_severity_medium

    @log_inspection_setting_event_rank_severity_medium.setter
    def log_inspection_setting_event_rank_severity_medium(self, log_inspection_setting_event_rank_severity_medium):
        """Sets the log_inspection_setting_event_rank_severity_medium of this SystemSettings.

        Medium  # noqa: E501

        :param log_inspection_setting_event_rank_severity_medium: The log_inspection_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_event_rank_severity_medium = log_inspection_setting_event_rank_severity_medium

    @property
    def anti_malware_setting_retain_event_duration(self):
        """Gets the anti_malware_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Anti-Malware Events older than  # noqa: E501

        :return: The anti_malware_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_retain_event_duration

    @anti_malware_setting_retain_event_duration.setter
    def anti_malware_setting_retain_event_duration(self, anti_malware_setting_retain_event_duration):
        """Sets the anti_malware_setting_retain_event_duration of this SystemSettings.

        Automatically delete Anti-Malware Events older than  # noqa: E501

        :param anti_malware_setting_retain_event_duration: The anti_malware_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_retain_event_duration = anti_malware_setting_retain_event_duration

    @property
    def platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled(self):
        """Gets the platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled of this SystemSettings.  # noqa: E501

        Allow Agents/Appliances to download security updates directly from Primary Security Update Source if Relays are not accessible  # noqa: E501

        :return: The platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled

    @platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled.setter
    def platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled(self, platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled):
        """Sets the platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled of this SystemSettings.

        Allow Agents/Appliances to download security updates directly from Primary Security Update Source if Relays are not accessible  # noqa: E501

        :param platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled: The platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled = platform_setting_update_agent_security_contact_primary_source_on_missing_relay_enabled

    @property
    def firewall_setting_event_rank_severity_log_only(self):
        """Gets the firewall_setting_event_rank_severity_log_only of this SystemSettings.  # noqa: E501

        Log Only  # noqa: E501

        :return: The firewall_setting_event_rank_severity_log_only of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_event_rank_severity_log_only

    @firewall_setting_event_rank_severity_log_only.setter
    def firewall_setting_event_rank_severity_log_only(self, firewall_setting_event_rank_severity_log_only):
        """Sets the firewall_setting_event_rank_severity_log_only of this SystemSettings.

        Log Only  # noqa: E501

        :param firewall_setting_event_rank_severity_log_only: The firewall_setting_event_rank_severity_log_only of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_event_rank_severity_log_only = firewall_setting_event_rank_severity_log_only

    @property
    def platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled(self):
        """Gets the platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled of this SystemSettings.  # noqa: E501

        Data Privacy options on the \"Agents\" Tab  # noqa: E501

        :return: The platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled

    @platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled.setter
    def platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled(self, platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled):
        """Sets the platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled of this SystemSettings.

        Data Privacy options on the \"Agents\" Tab  # noqa: E501

        :param platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled: The platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled

    @property
    def application_control_setting_retain_event_duration(self):
        """Gets the application_control_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Application Control Events older than  # noqa: E501

        :return: The application_control_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._application_control_setting_retain_event_duration

    @application_control_setting_retain_event_duration.setter
    def application_control_setting_retain_event_duration(self, application_control_setting_retain_event_duration):
        """Sets the application_control_setting_retain_event_duration of this SystemSettings.

        Automatically delete Application Control Events older than  # noqa: E501

        :param application_control_setting_retain_event_duration: The application_control_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._application_control_setting_retain_event_duration = application_control_setting_retain_event_duration

    @property
    def platform_setting_api_soap_web_service_enabled(self):
        """Gets the platform_setting_api_soap_web_service_enabled of this SystemSettings.  # noqa: E501

        SOAP web service API Enabled  # noqa: E501

        :return: The platform_setting_api_soap_web_service_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_api_soap_web_service_enabled

    @platform_setting_api_soap_web_service_enabled.setter
    def platform_setting_api_soap_web_service_enabled(self, platform_setting_api_soap_web_service_enabled):
        """Sets the platform_setting_api_soap_web_service_enabled of this SystemSettings.

        SOAP web service API Enabled  # noqa: E501

        :param platform_setting_api_soap_web_service_enabled: The platform_setting_api_soap_web_service_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_api_soap_web_service_enabled = platform_setting_api_soap_web_service_enabled

    @property
    def platform_setting_saml_service_provider_private_key(self):
        """Gets the platform_setting_saml_service_provider_private_key of this SystemSettings.  # noqa: E501

        SAML Service Provider Private Key  # noqa: E501

        :return: The platform_setting_saml_service_provider_private_key of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_saml_service_provider_private_key

    @platform_setting_saml_service_provider_private_key.setter
    def platform_setting_saml_service_provider_private_key(self, platform_setting_saml_service_provider_private_key):
        """Sets the platform_setting_saml_service_provider_private_key of this SystemSettings.

        SAML Service Provider Private Key  # noqa: E501

        :param platform_setting_saml_service_provider_private_key: The platform_setting_saml_service_provider_private_key of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_saml_service_provider_private_key = platform_setting_saml_service_provider_private_key

    @property
    def platform_setting_windows_upgrade_on_activation_enabled(self):
        """Gets the platform_setting_windows_upgrade_on_activation_enabled of this SystemSettings.  # noqa: E501

        Automatically upgrade Windows agents on activation  # noqa: E501

        :return: The platform_setting_windows_upgrade_on_activation_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_windows_upgrade_on_activation_enabled

    @platform_setting_windows_upgrade_on_activation_enabled.setter
    def platform_setting_windows_upgrade_on_activation_enabled(self, platform_setting_windows_upgrade_on_activation_enabled):
        """Sets the platform_setting_windows_upgrade_on_activation_enabled of this SystemSettings.

        Automatically upgrade Windows agents on activation  # noqa: E501

        :param platform_setting_windows_upgrade_on_activation_enabled: The platform_setting_windows_upgrade_on_activation_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_windows_upgrade_on_activation_enabled = platform_setting_windows_upgrade_on_activation_enabled

    @property
    def platform_setting_system_event_forwarding_snmp_port(self):
        """Gets the platform_setting_system_event_forwarding_snmp_port of this SystemSettings.  # noqa: E501

        UDP port to which events should be sent  # noqa: E501

        :return: The platform_setting_system_event_forwarding_snmp_port of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_system_event_forwarding_snmp_port

    @platform_setting_system_event_forwarding_snmp_port.setter
    def platform_setting_system_event_forwarding_snmp_port(self, platform_setting_system_event_forwarding_snmp_port):
        """Sets the platform_setting_system_event_forwarding_snmp_port of this SystemSettings.

        UDP port to which events should be sent  # noqa: E501

        :param platform_setting_system_event_forwarding_snmp_port: The platform_setting_system_event_forwarding_snmp_port of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_system_event_forwarding_snmp_port = platform_setting_system_event_forwarding_snmp_port

    @property
    def firewall_setting_event_rank_severity_deny(self):
        """Gets the firewall_setting_event_rank_severity_deny of this SystemSettings.  # noqa: E501

        Deny  # noqa: E501

        :return: The firewall_setting_event_rank_severity_deny of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_event_rank_severity_deny

    @firewall_setting_event_rank_severity_deny.setter
    def firewall_setting_event_rank_severity_deny(self, firewall_setting_event_rank_severity_deny):
        """Sets the firewall_setting_event_rank_severity_deny of this SystemSettings.

        Deny  # noqa: E501

        :param firewall_setting_event_rank_severity_deny: The firewall_setting_event_rank_severity_deny of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_event_rank_severity_deny = firewall_setting_event_rank_severity_deny

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_low(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_low of this SystemSettings.  # noqa: E501

        Low  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_low of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_low

    @intrusion_prevention_setting_event_rank_severity_filter_low.setter
    def intrusion_prevention_setting_event_rank_severity_filter_low(self, intrusion_prevention_setting_event_rank_severity_filter_low):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_low of this SystemSettings.

        Low  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_low: The intrusion_prevention_setting_event_rank_severity_filter_low of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_low = intrusion_prevention_setting_event_rank_severity_filter_low

    @property
    def platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to control access from the Primary Tenant  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled

    @platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled(self, platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled of this SystemSettings.

        Allow Tenants to control access from the Primary Tenant  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled: The platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled = platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled

    @property
    def platform_setting_recommendation_cpu_usage_level(self):
        """Gets the platform_setting_recommendation_cpu_usage_level of this SystemSettings.  # noqa: E501

        CPU Usage Level  # noqa: E501

        :return: The platform_setting_recommendation_cpu_usage_level of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_recommendation_cpu_usage_level

    @platform_setting_recommendation_cpu_usage_level.setter
    def platform_setting_recommendation_cpu_usage_level(self, platform_setting_recommendation_cpu_usage_level):
        """Sets the platform_setting_recommendation_cpu_usage_level of this SystemSettings.

        CPU Usage Level  # noqa: E501

        :param platform_setting_recommendation_cpu_usage_level: The platform_setting_recommendation_cpu_usage_level of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_recommendation_cpu_usage_level = platform_setting_recommendation_cpu_usage_level

    @property
    def platform_setting_managed_detect_response_service_token(self):
        """Gets the platform_setting_managed_detect_response_service_token of this SystemSettings.  # noqa: E501

        Data Source GUID  # noqa: E501

        :return: The platform_setting_managed_detect_response_service_token of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_managed_detect_response_service_token

    @platform_setting_managed_detect_response_service_token.setter
    def platform_setting_managed_detect_response_service_token(self, platform_setting_managed_detect_response_service_token):
        """Sets the platform_setting_managed_detect_response_service_token of this SystemSettings.

        Data Source GUID  # noqa: E501

        :param platform_setting_managed_detect_response_service_token: The platform_setting_managed_detect_response_service_token of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_managed_detect_response_service_token = platform_setting_managed_detect_response_service_token

    @property
    def platform_setting_load_balancer_heartbeat_address(self):
        """Gets the platform_setting_load_balancer_heartbeat_address of this SystemSettings.  # noqa: E501

        Load Balancer Heartbeat Hostname  # noqa: E501

        :return: The platform_setting_load_balancer_heartbeat_address of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_load_balancer_heartbeat_address

    @platform_setting_load_balancer_heartbeat_address.setter
    def platform_setting_load_balancer_heartbeat_address(self, platform_setting_load_balancer_heartbeat_address):
        """Sets the platform_setting_load_balancer_heartbeat_address of this SystemSettings.

        Load Balancer Heartbeat Hostname  # noqa: E501

        :param platform_setting_load_balancer_heartbeat_address: The platform_setting_load_balancer_heartbeat_address of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_load_balancer_heartbeat_address = platform_setting_load_balancer_heartbeat_address

    @property
    def platform_setting_trend_micro_xdr_api_user(self):
        """Gets the platform_setting_trend_micro_xdr_api_user of this SystemSettings.  # noqa: E501

        API User  # noqa: E501

        :return: The platform_setting_trend_micro_xdr_api_user of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_trend_micro_xdr_api_user

    @platform_setting_trend_micro_xdr_api_user.setter
    def platform_setting_trend_micro_xdr_api_user(self, platform_setting_trend_micro_xdr_api_user):
        """Sets the platform_setting_trend_micro_xdr_api_user of this SystemSettings.

        API User  # noqa: E501

        :param platform_setting_trend_micro_xdr_api_user: The platform_setting_trend_micro_xdr_api_user of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_trend_micro_xdr_api_user = platform_setting_trend_micro_xdr_api_user

    @property
    def platform_setting_content_security_policy_report_only_enabled(self):
        """Gets the platform_setting_content_security_policy_report_only_enabled of this SystemSettings.  # noqa: E501

        Report only  # noqa: E501

        :return: The platform_setting_content_security_policy_report_only_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_content_security_policy_report_only_enabled

    @platform_setting_content_security_policy_report_only_enabled.setter
    def platform_setting_content_security_policy_report_only_enabled(self, platform_setting_content_security_policy_report_only_enabled):
        """Sets the platform_setting_content_security_policy_report_only_enabled of this SystemSettings.

        Report only  # noqa: E501

        :param platform_setting_content_security_policy_report_only_enabled: The platform_setting_content_security_policy_report_only_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_content_security_policy_report_only_enabled = platform_setting_content_security_policy_report_only_enabled

    @property
    def log_inspection_setting_retain_event_duration(self):
        """Gets the log_inspection_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Log Inspection Events older than  # noqa: E501

        :return: The log_inspection_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_retain_event_duration

    @log_inspection_setting_retain_event_duration.setter
    def log_inspection_setting_retain_event_duration(self, log_inspection_setting_retain_event_duration):
        """Sets the log_inspection_setting_retain_event_duration of this SystemSettings.

        Automatically delete Log Inspection Events older than  # noqa: E501

        :param log_inspection_setting_retain_event_duration: The log_inspection_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_retain_event_duration = log_inspection_setting_retain_event_duration

    @property
    def platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled(self):
        """Gets the platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501

        Automatically revoke Primary Tenant access after  # noqa: E501

        :return: The platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled

    @platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled.setter
    def platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled(self, platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled):
        """Sets the platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled of this SystemSettings.

        Automatically revoke Primary Tenant access after  # noqa: E501

        :param platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled: The platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled = platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled

    @property
    def anti_malware_setting_event_email_body_template(self):
        """Gets the anti_malware_setting_event_email_body_template of this SystemSettings.  # noqa: E501

        Email Template  # noqa: E501

        :return: The anti_malware_setting_event_email_body_template of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_event_email_body_template

    @anti_malware_setting_event_email_body_template.setter
    def anti_malware_setting_event_email_body_template(self, anti_malware_setting_event_email_body_template):
        """Sets the anti_malware_setting_event_email_body_template of this SystemSettings.

        Email Template  # noqa: E501

        :param anti_malware_setting_event_email_body_template: The anti_malware_setting_event_email_body_template of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_event_email_body_template = anti_malware_setting_event_email_body_template

    @property
    def platform_setting_retain_security_updates_max(self):
        """Gets the platform_setting_retain_security_updates_max of this SystemSettings.  # noqa: E501

        Number of older Rule Updates to keep  # noqa: E501

        :return: The platform_setting_retain_security_updates_max of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_retain_security_updates_max

    @platform_setting_retain_security_updates_max.setter
    def platform_setting_retain_security_updates_max(self, platform_setting_retain_security_updates_max):
        """Sets the platform_setting_retain_security_updates_max of this SystemSettings.

        Number of older Rule Updates to keep  # noqa: E501

        :param platform_setting_retain_security_updates_max: The platform_setting_retain_security_updates_max of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_retain_security_updates_max = platform_setting_retain_security_updates_max

    @property
    def platform_setting_connected_threat_defense_control_manager_source_option(self):
        """Gets the platform_setting_connected_threat_defense_control_manager_source_option of this SystemSettings.  # noqa: E501

        Suspicious Object List Source  # noqa: E501

        :return: The platform_setting_connected_threat_defense_control_manager_source_option of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_connected_threat_defense_control_manager_source_option

    @platform_setting_connected_threat_defense_control_manager_source_option.setter
    def platform_setting_connected_threat_defense_control_manager_source_option(self, platform_setting_connected_threat_defense_control_manager_source_option):
        """Sets the platform_setting_connected_threat_defense_control_manager_source_option of this SystemSettings.

        Suspicious Object List Source  # noqa: E501

        :param platform_setting_connected_threat_defense_control_manager_source_option: The platform_setting_connected_threat_defense_control_manager_source_option of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_connected_threat_defense_control_manager_source_option = platform_setting_connected_threat_defense_control_manager_source_option

    @property
    def anti_malware_setting_event_email_enabled(self):
        """Gets the anti_malware_setting_event_email_enabled of this SystemSettings.  # noqa: E501

        Anti-Malware Email Notifications Enabled  # noqa: E501

        :return: The anti_malware_setting_event_email_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_event_email_enabled

    @anti_malware_setting_event_email_enabled.setter
    def anti_malware_setting_event_email_enabled(self, anti_malware_setting_event_email_enabled):
        """Sets the anti_malware_setting_event_email_enabled of this SystemSettings.

        Anti-Malware Email Notifications Enabled  # noqa: E501

        :param anti_malware_setting_event_email_enabled: The anti_malware_setting_event_email_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_event_email_enabled = anti_malware_setting_event_email_enabled

    @property
    def platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled(self):
        """Gets the platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled of this SystemSettings.  # noqa: E501

        Allow Relays to download software updates from Trend Micro Download Center when Deep Security Manager is not accessible  # noqa: E501

        :return: The platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled

    @platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled.setter
    def platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled(self, platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled):
        """Sets the platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled of this SystemSettings.

        Allow Relays to download software updates from Trend Micro Download Center when Deep Security Manager is not accessible  # noqa: E501

        :param platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled: The platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled = platform_setting_update_agent_software_use_download_center_on_missing_deep_security_manager_enabled

    @property
    def platform_setting_recommendation_ongoing_scans_enabled(self):
        """Gets the platform_setting_recommendation_ongoing_scans_enabled of this SystemSettings.  # noqa: E501

        Perform ongoing Recommendation Scans  # noqa: E501

        :return: The platform_setting_recommendation_ongoing_scans_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_recommendation_ongoing_scans_enabled

    @platform_setting_recommendation_ongoing_scans_enabled.setter
    def platform_setting_recommendation_ongoing_scans_enabled(self, platform_setting_recommendation_ongoing_scans_enabled):
        """Sets the platform_setting_recommendation_ongoing_scans_enabled of this SystemSettings.

        Perform ongoing Recommendation Scans  # noqa: E501

        :param platform_setting_recommendation_ongoing_scans_enabled: The platform_setting_recommendation_ongoing_scans_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_recommendation_ongoing_scans_enabled = platform_setting_recommendation_ongoing_scans_enabled

    @property
    def platform_setting_agent_initiated_activation_token(self):
        """Gets the platform_setting_agent_initiated_activation_token of this SystemSettings.  # noqa: E501

        Agent activation token:  # noqa: E501

        :return: The platform_setting_agent_initiated_activation_token of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_agent_initiated_activation_token

    @platform_setting_agent_initiated_activation_token.setter
    def platform_setting_agent_initiated_activation_token(self, platform_setting_agent_initiated_activation_token):
        """Sets the platform_setting_agent_initiated_activation_token of this SystemSettings.

        Agent activation token:  # noqa: E501

        :param platform_setting_agent_initiated_activation_token: The platform_setting_agent_initiated_activation_token of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_agent_initiated_activation_token = platform_setting_agent_initiated_activation_token

    @property
    def platform_setting_user_password_length_min(self):
        """Gets the platform_setting_user_password_length_min of this SystemSettings.  # noqa: E501

        User password minimum length  # noqa: E501

        :return: The platform_setting_user_password_length_min of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_password_length_min

    @platform_setting_user_password_length_min.setter
    def platform_setting_user_password_length_min(self, platform_setting_user_password_length_min):
        """Sets the platform_setting_user_password_length_min of this SystemSettings.

        User password minimum length  # noqa: E501

        :param platform_setting_user_password_length_min: The platform_setting_user_password_length_min of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_password_length_min = platform_setting_user_password_length_min

    @property
    def platform_setting_primary_tenant_allow_tenant_database_state(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_database_state of this SystemSettings.  # noqa: E501

        Primary Database Server State  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_database_state of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_database_state

    @platform_setting_primary_tenant_allow_tenant_database_state.setter
    def platform_setting_primary_tenant_allow_tenant_database_state(self, platform_setting_primary_tenant_allow_tenant_database_state):
        """Sets the platform_setting_primary_tenant_allow_tenant_database_state of this SystemSettings.

        Primary Database Server State  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_database_state: The platform_setting_primary_tenant_allow_tenant_database_state of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_database_state = platform_setting_primary_tenant_allow_tenant_database_state

    @property
    def platform_setting_aws_manager_identity_use_instance_role_enabled(self):
        """Gets the platform_setting_aws_manager_identity_use_instance_role_enabled of this SystemSettings.  # noqa: E501

        Use Instance Role  # noqa: E501

        :return: The platform_setting_aws_manager_identity_use_instance_role_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_aws_manager_identity_use_instance_role_enabled

    @platform_setting_aws_manager_identity_use_instance_role_enabled.setter
    def platform_setting_aws_manager_identity_use_instance_role_enabled(self, platform_setting_aws_manager_identity_use_instance_role_enabled):
        """Sets the platform_setting_aws_manager_identity_use_instance_role_enabled of this SystemSettings.

        Use Instance Role  # noqa: E501

        :param platform_setting_aws_manager_identity_use_instance_role_enabled: The platform_setting_aws_manager_identity_use_instance_role_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_aws_manager_identity_use_instance_role_enabled = platform_setting_aws_manager_identity_use_instance_role_enabled

    @property
    def platform_setting_content_security_policy(self):
        """Gets the platform_setting_content_security_policy of this SystemSettings.  # noqa: E501

        Content security policy  # noqa: E501

        :return: The platform_setting_content_security_policy of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_content_security_policy

    @platform_setting_content_security_policy.setter
    def platform_setting_content_security_policy(self, platform_setting_content_security_policy):
        """Sets the platform_setting_content_security_policy of this SystemSettings.

        Content security policy  # noqa: E501

        :param platform_setting_content_security_policy: The platform_setting_content_security_policy of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_content_security_policy = platform_setting_content_security_policy

    @property
    def platform_setting_product_usage_data_collection_enabled(self):
        """Gets the platform_setting_product_usage_data_collection_enabled of this SystemSettings.  # noqa: E501

        Enable Product Usage Data Collection  # noqa: E501

        :return: The platform_setting_product_usage_data_collection_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_product_usage_data_collection_enabled

    @platform_setting_product_usage_data_collection_enabled.setter
    def platform_setting_product_usage_data_collection_enabled(self, platform_setting_product_usage_data_collection_enabled):
        """Sets the platform_setting_product_usage_data_collection_enabled of this SystemSettings.

        Enable Product Usage Data Collection  # noqa: E501

        :param platform_setting_product_usage_data_collection_enabled: The platform_setting_product_usage_data_collection_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_product_usage_data_collection_enabled = platform_setting_product_usage_data_collection_enabled

    @property
    def platform_setting_alert_agent_update_pending_threshold(self):
        """Gets the platform_setting_alert_agent_update_pending_threshold of this SystemSettings.  # noqa: E501

        Length of time an Update can be pending before raising an Alert  # noqa: E501

        :return: The platform_setting_alert_agent_update_pending_threshold of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_alert_agent_update_pending_threshold

    @platform_setting_alert_agent_update_pending_threshold.setter
    def platform_setting_alert_agent_update_pending_threshold(self, platform_setting_alert_agent_update_pending_threshold):
        """Sets the platform_setting_alert_agent_update_pending_threshold of this SystemSettings.

        Length of time an Update can be pending before raising an Alert  # noqa: E501

        :param platform_setting_alert_agent_update_pending_threshold: The platform_setting_alert_agent_update_pending_threshold of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_alert_agent_update_pending_threshold = platform_setting_alert_agent_update_pending_threshold

    @property
    def platform_setting_user_password_require_special_characters_enabled(self):
        """Gets the platform_setting_user_password_require_special_characters_enabled of this SystemSettings.  # noqa: E501

        User password requires non-alphanumeric characters  # noqa: E501

        :return: The platform_setting_user_password_require_special_characters_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_password_require_special_characters_enabled

    @platform_setting_user_password_require_special_characters_enabled.setter
    def platform_setting_user_password_require_special_characters_enabled(self, platform_setting_user_password_require_special_characters_enabled):
        """Sets the platform_setting_user_password_require_special_characters_enabled of this SystemSettings.

        User password requires non-alphanumeric characters  # noqa: E501

        :param platform_setting_user_password_require_special_characters_enabled: The platform_setting_user_password_require_special_characters_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_password_require_special_characters_enabled = platform_setting_user_password_require_special_characters_enabled

    @property
    def platform_setting_update_appliance_default_agent_version(self):
        """Gets the platform_setting_update_appliance_default_agent_version of this SystemSettings.  # noqa: E501

        Upon deployment, update Deep Security Virtual Appliances to  # noqa: E501

        :return: The platform_setting_update_appliance_default_agent_version of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_appliance_default_agent_version

    @platform_setting_update_appliance_default_agent_version.setter
    def platform_setting_update_appliance_default_agent_version(self, platform_setting_update_appliance_default_agent_version):
        """Sets the platform_setting_update_appliance_default_agent_version of this SystemSettings.

        Upon deployment, update Deep Security Virtual Appliances to  # noqa: E501

        :param platform_setting_update_appliance_default_agent_version: The platform_setting_update_appliance_default_agent_version of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_appliance_default_agent_version = platform_setting_update_appliance_default_agent_version

    @property
    def platform_setting_system_event_forwarding_snmp_enabled(self):
        """Gets the platform_setting_system_event_forwarding_snmp_enabled of this SystemSettings.  # noqa: E501

        Forward System Events to a remote computer (via SNMP)  # noqa: E501

        :return: The platform_setting_system_event_forwarding_snmp_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_system_event_forwarding_snmp_enabled

    @platform_setting_system_event_forwarding_snmp_enabled.setter
    def platform_setting_system_event_forwarding_snmp_enabled(self, platform_setting_system_event_forwarding_snmp_enabled):
        """Sets the platform_setting_system_event_forwarding_snmp_enabled of this SystemSettings.

        Forward System Events to a remote computer (via SNMP)  # noqa: E501

        :param platform_setting_system_event_forwarding_snmp_enabled: The platform_setting_system_event_forwarding_snmp_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_system_event_forwarding_snmp_enabled = platform_setting_system_event_forwarding_snmp_enabled

    @property
    def platform_setting_smtp_bounce_email_address(self):
        """Gets the platform_setting_smtp_bounce_email_address of this SystemSettings.  # noqa: E501

        \"Bounce\" email address (optional) - The email address to which delivery failure notifications should be sent  # noqa: E501

        :return: The platform_setting_smtp_bounce_email_address of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smtp_bounce_email_address

    @platform_setting_smtp_bounce_email_address.setter
    def platform_setting_smtp_bounce_email_address(self, platform_setting_smtp_bounce_email_address):
        """Sets the platform_setting_smtp_bounce_email_address of this SystemSettings.

        \"Bounce\" email address (optional) - The email address to which delivery failure notifications should be sent  # noqa: E501

        :param platform_setting_smtp_bounce_email_address: The platform_setting_smtp_bounce_email_address of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smtp_bounce_email_address = platform_setting_smtp_bounce_email_address

    @property
    def platform_setting_update_relay_security_support_agent9_and_earlier_enabled(self):
        """Gets the platform_setting_update_relay_security_support_agent9_and_earlier_enabled of this SystemSettings.  # noqa: E501

        Allow supported 8.0 and 9.0 Agents to be updated  # noqa: E501

        :return: The platform_setting_update_relay_security_support_agent9_and_earlier_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_relay_security_support_agent9_and_earlier_enabled

    @platform_setting_update_relay_security_support_agent9_and_earlier_enabled.setter
    def platform_setting_update_relay_security_support_agent9_and_earlier_enabled(self, platform_setting_update_relay_security_support_agent9_and_earlier_enabled):
        """Sets the platform_setting_update_relay_security_support_agent9_and_earlier_enabled of this SystemSettings.

        Allow supported 8.0 and 9.0 Agents to be updated  # noqa: E501

        :param platform_setting_update_relay_security_support_agent9_and_earlier_enabled: The platform_setting_update_relay_security_support_agent9_and_earlier_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_relay_security_support_agent9_and_earlier_enabled = platform_setting_update_relay_security_support_agent9_and_earlier_enabled

    @property
    def platform_setting_managed_detect_response_proxy_id(self):
        """Gets the platform_setting_managed_detect_response_proxy_id of this SystemSettings.  # noqa: E501

        Use Proxy when accessing MDR server  # noqa: E501

        :return: The platform_setting_managed_detect_response_proxy_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_managed_detect_response_proxy_id

    @platform_setting_managed_detect_response_proxy_id.setter
    def platform_setting_managed_detect_response_proxy_id(self, platform_setting_managed_detect_response_proxy_id):
        """Sets the platform_setting_managed_detect_response_proxy_id of this SystemSettings.

        Use Proxy when accessing MDR server  # noqa: E501

        :param platform_setting_managed_detect_response_proxy_id: The platform_setting_managed_detect_response_proxy_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_managed_detect_response_proxy_id = platform_setting_managed_detect_response_proxy_id

    @property
    def platform_setting_trend_micro_xdr_log_server_url(self):
        """Gets the platform_setting_trend_micro_xdr_log_server_url of this SystemSettings.  # noqa: E501

        Log Server URL  # noqa: E501

        :return: The platform_setting_trend_micro_xdr_log_server_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_trend_micro_xdr_log_server_url

    @platform_setting_trend_micro_xdr_log_server_url.setter
    def platform_setting_trend_micro_xdr_log_server_url(self, platform_setting_trend_micro_xdr_log_server_url):
        """Sets the platform_setting_trend_micro_xdr_log_server_url of this SystemSettings.

        Log Server URL  # noqa: E501

        :param platform_setting_trend_micro_xdr_log_server_url: The platform_setting_trend_micro_xdr_log_server_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_trend_micro_xdr_log_server_url = platform_setting_trend_micro_xdr_log_server_url

    @property
    def platform_setting_inactive_agent_cleanup_enabled(self):
        """Gets the platform_setting_inactive_agent_cleanup_enabled of this SystemSettings.  # noqa: E501

        Delete Agents that have been inactive for:  # noqa: E501

        :return: The platform_setting_inactive_agent_cleanup_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_inactive_agent_cleanup_enabled

    @platform_setting_inactive_agent_cleanup_enabled.setter
    def platform_setting_inactive_agent_cleanup_enabled(self, platform_setting_inactive_agent_cleanup_enabled):
        """Sets the platform_setting_inactive_agent_cleanup_enabled of this SystemSettings.

        Delete Agents that have been inactive for:  # noqa: E501

        :param platform_setting_inactive_agent_cleanup_enabled: The platform_setting_inactive_agent_cleanup_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_inactive_agent_cleanup_enabled = platform_setting_inactive_agent_cleanup_enabled

    @property
    def platform_setting_load_balancer_relay_address(self):
        """Gets the platform_setting_load_balancer_relay_address of this SystemSettings.  # noqa: E501

        Load Balancer Relay Hostname  # noqa: E501

        :return: The platform_setting_load_balancer_relay_address of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_load_balancer_relay_address

    @platform_setting_load_balancer_relay_address.setter
    def platform_setting_load_balancer_relay_address(self, platform_setting_load_balancer_relay_address):
        """Sets the platform_setting_load_balancer_relay_address of this SystemSettings.

        Load Balancer Relay Hostname  # noqa: E501

        :param platform_setting_load_balancer_relay_address: The platform_setting_load_balancer_relay_address of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_load_balancer_relay_address = platform_setting_load_balancer_relay_address

    @property
    def platform_setting_http_public_key_pin_policy(self):
        """Gets the platform_setting_http_public_key_pin_policy of this SystemSettings.  # noqa: E501

        HTTP public key pin policy  # noqa: E501

        :return: The platform_setting_http_public_key_pin_policy of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_http_public_key_pin_policy

    @platform_setting_http_public_key_pin_policy.setter
    def platform_setting_http_public_key_pin_policy(self, platform_setting_http_public_key_pin_policy):
        """Sets the platform_setting_http_public_key_pin_policy of this SystemSettings.

        HTTP public key pin policy  # noqa: E501

        :param platform_setting_http_public_key_pin_policy: The platform_setting_http_public_key_pin_policy of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_http_public_key_pin_policy = platform_setting_http_public_key_pin_policy

    @property
    def platform_setting_user_session_idle_timeout(self):
        """Gets the platform_setting_user_session_idle_timeout of this SystemSettings.  # noqa: E501

        Session idle timeout  # noqa: E501

        :return: The platform_setting_user_session_idle_timeout of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_session_idle_timeout

    @platform_setting_user_session_idle_timeout.setter
    def platform_setting_user_session_idle_timeout(self, platform_setting_user_session_idle_timeout):
        """Sets the platform_setting_user_session_idle_timeout of this SystemSettings.

        Session idle timeout  # noqa: E501

        :param platform_setting_user_session_idle_timeout: The platform_setting_user_session_idle_timeout of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_session_idle_timeout = platform_setting_user_session_idle_timeout

    @property
    def anti_malware_setting_event_email_subject(self):
        """Gets the anti_malware_setting_event_email_subject of this SystemSettings.  # noqa: E501

        Email Subject Text  # noqa: E501

        :return: The anti_malware_setting_event_email_subject of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_event_email_subject

    @anti_malware_setting_event_email_subject.setter
    def anti_malware_setting_event_email_subject(self, anti_malware_setting_event_email_subject):
        """Sets the anti_malware_setting_event_email_subject of this SystemSettings.

        Email Subject Text  # noqa: E501

        :param anti_malware_setting_event_email_subject: The anti_malware_setting_event_email_subject of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_event_email_subject = anti_malware_setting_event_email_subject

    @property
    def platform_setting_connected_threat_defense_control_manager_use_proxy_enabled(self):
        """Gets the platform_setting_connected_threat_defense_control_manager_use_proxy_enabled of this SystemSettings.  # noqa: E501

        When accessing Apex Central, use proxy:  # noqa: E501

        :return: The platform_setting_connected_threat_defense_control_manager_use_proxy_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_connected_threat_defense_control_manager_use_proxy_enabled

    @platform_setting_connected_threat_defense_control_manager_use_proxy_enabled.setter
    def platform_setting_connected_threat_defense_control_manager_use_proxy_enabled(self, platform_setting_connected_threat_defense_control_manager_use_proxy_enabled):
        """Sets the platform_setting_connected_threat_defense_control_manager_use_proxy_enabled of this SystemSettings.

        When accessing Apex Central, use proxy:  # noqa: E501

        :param platform_setting_connected_threat_defense_control_manager_use_proxy_enabled: The platform_setting_connected_threat_defense_control_manager_use_proxy_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_connected_threat_defense_control_manager_use_proxy_enabled = platform_setting_connected_threat_defense_control_manager_use_proxy_enabled

    @property
    def platform_setting_user_enforce_terms_and_conditions_enabled(self):
        """Gets the platform_setting_user_enforce_terms_and_conditions_enabled of this SystemSettings.  # noqa: E501

        User must agree to the terms and conditions  # noqa: E501

        :return: The platform_setting_user_enforce_terms_and_conditions_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_enforce_terms_and_conditions_enabled

    @platform_setting_user_enforce_terms_and_conditions_enabled.setter
    def platform_setting_user_enforce_terms_and_conditions_enabled(self, platform_setting_user_enforce_terms_and_conditions_enabled):
        """Sets the platform_setting_user_enforce_terms_and_conditions_enabled of this SystemSettings.

        User must agree to the terms and conditions  # noqa: E501

        :param platform_setting_user_enforce_terms_and_conditions_enabled: The platform_setting_user_enforce_terms_and_conditions_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_enforce_terms_and_conditions_enabled = platform_setting_user_enforce_terms_and_conditions_enabled

    @property
    def platform_setting_aws_manager_identity_access_key(self):
        """Gets the platform_setting_aws_manager_identity_access_key of this SystemSettings.  # noqa: E501

        Access Key - The Access Key of an AWS User used for the manager identity  # noqa: E501

        :return: The platform_setting_aws_manager_identity_access_key of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_aws_manager_identity_access_key

    @platform_setting_aws_manager_identity_access_key.setter
    def platform_setting_aws_manager_identity_access_key(self, platform_setting_aws_manager_identity_access_key):
        """Sets the platform_setting_aws_manager_identity_access_key of this SystemSettings.

        Access Key - The Access Key of an AWS User used for the manager identity  # noqa: E501

        :param platform_setting_aws_manager_identity_access_key: The platform_setting_aws_manager_identity_access_key of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_aws_manager_identity_access_key = platform_setting_aws_manager_identity_access_key

    @property
    def platform_setting_connected_threat_defense_control_manager_proxy_id(self):
        """Gets the platform_setting_connected_threat_defense_control_manager_proxy_id of this SystemSettings.  # noqa: E501

        Use Proxy when accessing Apex Central  # noqa: E501

        :return: The platform_setting_connected_threat_defense_control_manager_proxy_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_connected_threat_defense_control_manager_proxy_id

    @platform_setting_connected_threat_defense_control_manager_proxy_id.setter
    def platform_setting_connected_threat_defense_control_manager_proxy_id(self, platform_setting_connected_threat_defense_control_manager_proxy_id):
        """Sets the platform_setting_connected_threat_defense_control_manager_proxy_id of this SystemSettings.

        Use Proxy when accessing Apex Central  # noqa: E501

        :param platform_setting_connected_threat_defense_control_manager_proxy_id: The platform_setting_connected_threat_defense_control_manager_proxy_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_connected_threat_defense_control_manager_proxy_id = platform_setting_connected_threat_defense_control_manager_proxy_id

    @property
    def platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled(self):
        """Gets the platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501

        Allow Primary Tenant access to my Deep Security Environment  # noqa: E501

        :return: The platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled

    @platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled.setter
    def platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled(self, platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled):
        """Sets the platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled of this SystemSettings.

        Allow Primary Tenant access to my Deep Security Environment  # noqa: E501

        :param platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled: The platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled = platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled

    @property
    def platform_setting_connected_threat_defense_control_manager_manual_source_server_url(self):
        """Gets the platform_setting_connected_threat_defense_control_manager_manual_source_server_url of this SystemSettings.  # noqa: E501

        Server URL (ex: \"https://[server]/webapp\")  # noqa: E501

        :return: The platform_setting_connected_threat_defense_control_manager_manual_source_server_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_connected_threat_defense_control_manager_manual_source_server_url

    @platform_setting_connected_threat_defense_control_manager_manual_source_server_url.setter
    def platform_setting_connected_threat_defense_control_manager_manual_source_server_url(self, platform_setting_connected_threat_defense_control_manager_manual_source_server_url):
        """Sets the platform_setting_connected_threat_defense_control_manager_manual_source_server_url of this SystemSettings.

        Server URL (ex: \"https://[server]/webapp\")  # noqa: E501

        :param platform_setting_connected_threat_defense_control_manager_manual_source_server_url: The platform_setting_connected_threat_defense_control_manager_manual_source_server_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_connected_threat_defense_control_manager_manual_source_server_url = platform_setting_connected_threat_defense_control_manager_manual_source_server_url

    @property
    def platform_setting_user_password_require_mixed_case_enabled(self):
        """Gets the platform_setting_user_password_require_mixed_case_enabled of this SystemSettings.  # noqa: E501

        User password requires both upper and lower case characters  # noqa: E501

        :return: The platform_setting_user_password_require_mixed_case_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_password_require_mixed_case_enabled

    @platform_setting_user_password_require_mixed_case_enabled.setter
    def platform_setting_user_password_require_mixed_case_enabled(self, platform_setting_user_password_require_mixed_case_enabled):
        """Sets the platform_setting_user_password_require_mixed_case_enabled of this SystemSettings.

        User password requires both upper and lower case characters  # noqa: E501

        :param platform_setting_user_password_require_mixed_case_enabled: The platform_setting_user_password_require_mixed_case_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_password_require_mixed_case_enabled = platform_setting_user_password_require_mixed_case_enabled

    @property
    def platform_setting_trend_micro_xdr_identity_provider_api_url(self):
        """Gets the platform_setting_trend_micro_xdr_identity_provider_api_url of this SystemSettings.  # noqa: E501

        Service Platform Identity Provider API URL  # noqa: E501

        :return: The platform_setting_trend_micro_xdr_identity_provider_api_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_trend_micro_xdr_identity_provider_api_url

    @platform_setting_trend_micro_xdr_identity_provider_api_url.setter
    def platform_setting_trend_micro_xdr_identity_provider_api_url(self, platform_setting_trend_micro_xdr_identity_provider_api_url):
        """Sets the platform_setting_trend_micro_xdr_identity_provider_api_url of this SystemSettings.

        Service Platform Identity Provider API URL  # noqa: E501

        :param platform_setting_trend_micro_xdr_identity_provider_api_url: The platform_setting_trend_micro_xdr_identity_provider_api_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_trend_micro_xdr_identity_provider_api_url = platform_setting_trend_micro_xdr_identity_provider_api_url

    @property
    def platform_setting_smart_protection_feedback_for_suspicious_file_enabled(self):
        """Gets the platform_setting_smart_protection_feedback_for_suspicious_file_enabled of this SystemSettings.  # noqa: E501

        Send suspicious file signatures along with feedback  # noqa: E501

        :return: The platform_setting_smart_protection_feedback_for_suspicious_file_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smart_protection_feedback_for_suspicious_file_enabled

    @platform_setting_smart_protection_feedback_for_suspicious_file_enabled.setter
    def platform_setting_smart_protection_feedback_for_suspicious_file_enabled(self, platform_setting_smart_protection_feedback_for_suspicious_file_enabled):
        """Sets the platform_setting_smart_protection_feedback_for_suspicious_file_enabled of this SystemSettings.

        Send suspicious file signatures along with feedback  # noqa: E501

        :param platform_setting_smart_protection_feedback_for_suspicious_file_enabled: The platform_setting_smart_protection_feedback_for_suspicious_file_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smart_protection_feedback_for_suspicious_file_enabled = platform_setting_smart_protection_feedback_for_suspicious_file_enabled

    @property
    def platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to configure SNMP settings  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled

    @platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled(self, platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled of this SystemSettings.

        Allow Tenants to configure SNMP settings  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled: The platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled = platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled

    @property
    def platform_setting_smart_protection_feedback_industry_type(self):
        """Gets the platform_setting_smart_protection_feedback_industry_type of this SystemSettings.  # noqa: E501

        Your industry (optional):  # noqa: E501

        :return: The platform_setting_smart_protection_feedback_industry_type of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smart_protection_feedback_industry_type

    @platform_setting_smart_protection_feedback_industry_type.setter
    def platform_setting_smart_protection_feedback_industry_type(self, platform_setting_smart_protection_feedback_industry_type):
        """Sets the platform_setting_smart_protection_feedback_industry_type of this SystemSettings.

        Your industry (optional):  # noqa: E501

        :param platform_setting_smart_protection_feedback_industry_type: The platform_setting_smart_protection_feedback_industry_type of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smart_protection_feedback_industry_type = platform_setting_smart_protection_feedback_industry_type

    @property
    def web_reputation_setting_retain_event_duration(self):
        """Gets the web_reputation_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Web Reputation Events older than  # noqa: E501

        :return: The web_reputation_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_retain_event_duration

    @web_reputation_setting_retain_event_duration.setter
    def web_reputation_setting_retain_event_duration(self, web_reputation_setting_retain_event_duration):
        """Sets the web_reputation_setting_retain_event_duration of this SystemSettings.

        Automatically delete Web Reputation Events older than  # noqa: E501

        :param web_reputation_setting_retain_event_duration: The web_reputation_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_retain_event_duration = web_reputation_setting_retain_event_duration

    @property
    def platform_setting_retain_server_log_duration(self):
        """Gets the platform_setting_retain_server_log_duration of this SystemSettings.  # noqa: E501

        Automatically delete Server Logs older than  # noqa: E501

        :return: The platform_setting_retain_server_log_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_retain_server_log_duration

    @platform_setting_retain_server_log_duration.setter
    def platform_setting_retain_server_log_duration(self, platform_setting_retain_server_log_duration):
        """Sets the platform_setting_retain_server_log_duration of this SystemSettings.

        Automatically delete Server Logs older than  # noqa: E501

        :param platform_setting_retain_server_log_duration: The platform_setting_retain_server_log_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_retain_server_log_duration = platform_setting_retain_server_log_duration

    @property
    def integrity_monitoring_setting_event_rank_severity_medium(self):
        """Gets the integrity_monitoring_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501

        Medium  # noqa: E501

        :return: The integrity_monitoring_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_event_rank_severity_medium

    @integrity_monitoring_setting_event_rank_severity_medium.setter
    def integrity_monitoring_setting_event_rank_severity_medium(self, integrity_monitoring_setting_event_rank_severity_medium):
        """Sets the integrity_monitoring_setting_event_rank_severity_medium of this SystemSettings.

        Medium  # noqa: E501

        :param integrity_monitoring_setting_event_rank_severity_medium: The integrity_monitoring_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_event_rank_severity_medium = integrity_monitoring_setting_event_rank_severity_medium

    @property
    def platform_setting_proxy_manager_cloud_proxy_id(self):
        """Gets the platform_setting_proxy_manager_cloud_proxy_id of this SystemSettings.  # noqa: E501

        Deep Security Manager (Cloud Accounts - HTTP Protocol Only):  # noqa: E501

        :return: The platform_setting_proxy_manager_cloud_proxy_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_proxy_manager_cloud_proxy_id

    @platform_setting_proxy_manager_cloud_proxy_id.setter
    def platform_setting_proxy_manager_cloud_proxy_id(self, platform_setting_proxy_manager_cloud_proxy_id):
        """Sets the platform_setting_proxy_manager_cloud_proxy_id of this SystemSettings.

        Deep Security Manager (Cloud Accounts - HTTP Protocol Only):  # noqa: E501

        :param platform_setting_proxy_manager_cloud_proxy_id: The platform_setting_proxy_manager_cloud_proxy_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_proxy_manager_cloud_proxy_id = platform_setting_proxy_manager_cloud_proxy_id

    @property
    def platform_setting_update_relay_security_all_regions_patterns_download_enabled(self):
        """Gets the platform_setting_update_relay_security_all_regions_patterns_download_enabled of this SystemSettings.  # noqa: E501

        Download Patterns for all Regions  # noqa: E501

        :return: The platform_setting_update_relay_security_all_regions_patterns_download_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_relay_security_all_regions_patterns_download_enabled

    @platform_setting_update_relay_security_all_regions_patterns_download_enabled.setter
    def platform_setting_update_relay_security_all_regions_patterns_download_enabled(self, platform_setting_update_relay_security_all_regions_patterns_download_enabled):
        """Sets the platform_setting_update_relay_security_all_regions_patterns_download_enabled of this SystemSettings.

        Download Patterns for all Regions  # noqa: E501

        :param platform_setting_update_relay_security_all_regions_patterns_download_enabled: The platform_setting_update_relay_security_all_regions_patterns_download_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_relay_security_all_regions_patterns_download_enabled = platform_setting_update_relay_security_all_regions_patterns_download_enabled

    @property
    def platform_setting_ddan_submission_enabled(self):
        """Gets the platform_setting_ddan_submission_enabled of this SystemSettings.  # noqa: E501

        Enable submission of suspicious files to Deep Discovery Analyzer  # noqa: E501

        :return: The platform_setting_ddan_submission_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_submission_enabled

    @platform_setting_ddan_submission_enabled.setter
    def platform_setting_ddan_submission_enabled(self, platform_setting_ddan_submission_enabled):
        """Sets the platform_setting_ddan_submission_enabled of this SystemSettings.

        Enable submission of suspicious files to Deep Discovery Analyzer  # noqa: E501

        :param platform_setting_ddan_submission_enabled: The platform_setting_ddan_submission_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_submission_enabled = platform_setting_ddan_submission_enabled

    @property
    def web_reputation_setting_event_rank_risk_suspicious(self):
        """Gets the web_reputation_setting_event_rank_risk_suspicious of this SystemSettings.  # noqa: E501

        Suspicious  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_suspicious of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_suspicious

    @web_reputation_setting_event_rank_risk_suspicious.setter
    def web_reputation_setting_event_rank_risk_suspicious(self, web_reputation_setting_event_rank_risk_suspicious):
        """Sets the web_reputation_setting_event_rank_risk_suspicious of this SystemSettings.

        Suspicious  # noqa: E501

        :param web_reputation_setting_event_rank_risk_suspicious: The web_reputation_setting_event_rank_risk_suspicious of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_suspicious = web_reputation_setting_event_rank_risk_suspicious

    @property
    def integrity_monitoring_setting_event_rank_severity_critical(self):
        """Gets the integrity_monitoring_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501

        Critical  # noqa: E501

        :return: The integrity_monitoring_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_event_rank_severity_critical

    @integrity_monitoring_setting_event_rank_severity_critical.setter
    def integrity_monitoring_setting_event_rank_severity_critical(self, integrity_monitoring_setting_event_rank_severity_critical):
        """Sets the integrity_monitoring_setting_event_rank_severity_critical of this SystemSettings.

        Critical  # noqa: E501

        :param integrity_monitoring_setting_event_rank_severity_critical: The integrity_monitoring_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_event_rank_severity_critical = integrity_monitoring_setting_event_rank_severity_critical

    @property
    def platform_setting_smtp_from_email_address(self):
        """Gets the platform_setting_smtp_from_email_address of this SystemSettings.  # noqa: E501

        \"From\" email address - The email address from which outgoing emails should be sent  # noqa: E501

        :return: The platform_setting_smtp_from_email_address of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smtp_from_email_address

    @platform_setting_smtp_from_email_address.setter
    def platform_setting_smtp_from_email_address(self, platform_setting_smtp_from_email_address):
        """Sets the platform_setting_smtp_from_email_address of this SystemSettings.

        \"From\" email address - The email address from which outgoing emails should be sent  # noqa: E501

        :param platform_setting_smtp_from_email_address: The platform_setting_smtp_from_email_address of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smtp_from_email_address = platform_setting_smtp_from_email_address

    @property
    def firewall_setting_global_stateful_config_id(self):
        """Gets the firewall_setting_global_stateful_config_id of this SystemSettings.  # noqa: E501

        Global Firewall Stateful Configuration  # noqa: E501

        :return: The firewall_setting_global_stateful_config_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_global_stateful_config_id

    @firewall_setting_global_stateful_config_id.setter
    def firewall_setting_global_stateful_config_id(self, firewall_setting_global_stateful_config_id):
        """Sets the firewall_setting_global_stateful_config_id of this SystemSettings.

        Global Firewall Stateful Configuration  # noqa: E501

        :param firewall_setting_global_stateful_config_id: The firewall_setting_global_stateful_config_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_global_stateful_config_id = firewall_setting_global_stateful_config_id

    @property
    def platform_setting_event_forwarding_sns_topic_arn(self):
        """Gets the platform_setting_event_forwarding_sns_topic_arn of this SystemSettings.  # noqa: E501

        SNS Topic ARN  # noqa: E501

        :return: The platform_setting_event_forwarding_sns_topic_arn of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_event_forwarding_sns_topic_arn

    @platform_setting_event_forwarding_sns_topic_arn.setter
    def platform_setting_event_forwarding_sns_topic_arn(self, platform_setting_event_forwarding_sns_topic_arn):
        """Sets the platform_setting_event_forwarding_sns_topic_arn of this SystemSettings.

        SNS Topic ARN  # noqa: E501

        :param platform_setting_event_forwarding_sns_topic_arn: The platform_setting_event_forwarding_sns_topic_arn of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_event_forwarding_sns_topic_arn = platform_setting_event_forwarding_sns_topic_arn

    @property
    def firewall_setting_internet_connectivity_test_expected_content_regex(self):
        """Gets the firewall_setting_internet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501

        Regular Expression for returned content used to confirm Connectivity  # noqa: E501

        :return: The firewall_setting_internet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_internet_connectivity_test_expected_content_regex

    @firewall_setting_internet_connectivity_test_expected_content_regex.setter
    def firewall_setting_internet_connectivity_test_expected_content_regex(self, firewall_setting_internet_connectivity_test_expected_content_regex):
        """Sets the firewall_setting_internet_connectivity_test_expected_content_regex of this SystemSettings.

        Regular Expression for returned content used to confirm Connectivity  # noqa: E501

        :param firewall_setting_internet_connectivity_test_expected_content_regex: The firewall_setting_internet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_internet_connectivity_test_expected_content_regex = firewall_setting_internet_connectivity_test_expected_content_regex

    @property
    def platform_setting_connected_threat_defense_control_manager_manual_source_api_key(self):
        """Gets the platform_setting_connected_threat_defense_control_manager_manual_source_api_key of this SystemSettings.  # noqa: E501

        API Key  # noqa: E501

        :return: The platform_setting_connected_threat_defense_control_manager_manual_source_api_key of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_connected_threat_defense_control_manager_manual_source_api_key

    @platform_setting_connected_threat_defense_control_manager_manual_source_api_key.setter
    def platform_setting_connected_threat_defense_control_manager_manual_source_api_key(self, platform_setting_connected_threat_defense_control_manager_manual_source_api_key):
        """Sets the platform_setting_connected_threat_defense_control_manager_manual_source_api_key of this SystemSettings.

        API Key  # noqa: E501

        :param platform_setting_connected_threat_defense_control_manager_manual_source_api_key: The platform_setting_connected_threat_defense_control_manager_manual_source_api_key of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_connected_threat_defense_control_manager_manual_source_api_key = platform_setting_connected_threat_defense_control_manager_manual_source_api_key

    @property
    def platform_setting_load_balancer_manager_address(self):
        """Gets the platform_setting_load_balancer_manager_address of this SystemSettings.  # noqa: E501

        Load Balancer Manager Hostname  # noqa: E501

        :return: The platform_setting_load_balancer_manager_address of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_load_balancer_manager_address

    @platform_setting_load_balancer_manager_address.setter
    def platform_setting_load_balancer_manager_address(self, platform_setting_load_balancer_manager_address):
        """Sets the platform_setting_load_balancer_manager_address of this SystemSettings.

        Load Balancer Manager Hostname  # noqa: E501

        :param platform_setting_load_balancer_manager_address: The platform_setting_load_balancer_manager_address of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_load_balancer_manager_address = platform_setting_load_balancer_manager_address

    @property
    def platform_setting_update_security_primary_source_mode(self):
        """Gets the platform_setting_update_security_primary_source_mode of this SystemSettings.  # noqa: E501

        Relay Update Source  # noqa: E501

        :return: The platform_setting_update_security_primary_source_mode of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_security_primary_source_mode

    @platform_setting_update_security_primary_source_mode.setter
    def platform_setting_update_security_primary_source_mode(self, platform_setting_update_security_primary_source_mode):
        """Sets the platform_setting_update_security_primary_source_mode of this SystemSettings.

        Relay Update Source  # noqa: E501

        :param platform_setting_update_security_primary_source_mode: The platform_setting_update_security_primary_source_mode of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_security_primary_source_mode = platform_setting_update_security_primary_source_mode

    @property
    def platform_setting_primary_tenant_share_connected_threat_defenses_enabled(self):
        """Gets the platform_setting_primary_tenant_share_connected_threat_defenses_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to use the Primary Tenant's Trend Micro Apex Central and Deep Discovery Analyzer Server settings.  # noqa: E501

        :return: The platform_setting_primary_tenant_share_connected_threat_defenses_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_share_connected_threat_defenses_enabled

    @platform_setting_primary_tenant_share_connected_threat_defenses_enabled.setter
    def platform_setting_primary_tenant_share_connected_threat_defenses_enabled(self, platform_setting_primary_tenant_share_connected_threat_defenses_enabled):
        """Sets the platform_setting_primary_tenant_share_connected_threat_defenses_enabled of this SystemSettings.

        Allow Tenants to use the Primary Tenant's Trend Micro Apex Central and Deep Discovery Analyzer Server settings.  # noqa: E501

        :param platform_setting_primary_tenant_share_connected_threat_defenses_enabled: The platform_setting_primary_tenant_share_connected_threat_defenses_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_share_connected_threat_defenses_enabled = platform_setting_primary_tenant_share_connected_threat_defenses_enabled

    @property
    def web_reputation_setting_event_rank_risk_dangerous(self):
        """Gets the web_reputation_setting_event_rank_risk_dangerous of this SystemSettings.  # noqa: E501

        Dangerous  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_dangerous of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_dangerous

    @web_reputation_setting_event_rank_risk_dangerous.setter
    def web_reputation_setting_event_rank_risk_dangerous(self, web_reputation_setting_event_rank_risk_dangerous):
        """Sets the web_reputation_setting_event_rank_risk_dangerous of this SystemSettings.

        Dangerous  # noqa: E501

        :param web_reputation_setting_event_rank_risk_dangerous: The web_reputation_setting_event_rank_risk_dangerous of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_dangerous = web_reputation_setting_event_rank_risk_dangerous

    @property
    def platform_setting_load_balancer_heartbeat_port(self):
        """Gets the platform_setting_load_balancer_heartbeat_port of this SystemSettings.  # noqa: E501

        Load Balancer Heartbeat Port  # noqa: E501

        :return: The platform_setting_load_balancer_heartbeat_port of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_load_balancer_heartbeat_port

    @platform_setting_load_balancer_heartbeat_port.setter
    def platform_setting_load_balancer_heartbeat_port(self, platform_setting_load_balancer_heartbeat_port):
        """Sets the platform_setting_load_balancer_heartbeat_port of this SystemSettings.

        Load Balancer Heartbeat Port  # noqa: E501

        :param platform_setting_load_balancer_heartbeat_port: The platform_setting_load_balancer_heartbeat_port of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_load_balancer_heartbeat_port = platform_setting_load_balancer_heartbeat_port

    @property
    def platform_setting_user_hide_unlicensed_modules_enabled(self):
        """Gets the platform_setting_user_hide_unlicensed_modules_enabled of this SystemSettings.  # noqa: E501

        Hide unlicensed Protection Modules for new Users  # noqa: E501

        :return: The platform_setting_user_hide_unlicensed_modules_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_hide_unlicensed_modules_enabled

    @platform_setting_user_hide_unlicensed_modules_enabled.setter
    def platform_setting_user_hide_unlicensed_modules_enabled(self, platform_setting_user_hide_unlicensed_modules_enabled):
        """Sets the platform_setting_user_hide_unlicensed_modules_enabled of this SystemSettings.

        Hide unlicensed Protection Modules for new Users  # noqa: E501

        :param platform_setting_user_hide_unlicensed_modules_enabled: The platform_setting_user_hide_unlicensed_modules_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_hide_unlicensed_modules_enabled = platform_setting_user_hide_unlicensed_modules_enabled

    @property
    def platform_setting_capture_encrypted_traffic_enabled(self):
        """Gets the platform_setting_capture_encrypted_traffic_enabled of this SystemSettings.  # noqa: E501

        Allow packet data capture on encrypted traffic (SSL)  # noqa: E501

        :return: The platform_setting_capture_encrypted_traffic_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_capture_encrypted_traffic_enabled

    @platform_setting_capture_encrypted_traffic_enabled.setter
    def platform_setting_capture_encrypted_traffic_enabled(self, platform_setting_capture_encrypted_traffic_enabled):
        """Sets the platform_setting_capture_encrypted_traffic_enabled of this SystemSettings.

        Allow packet data capture on encrypted traffic (SSL)  # noqa: E501

        :param platform_setting_capture_encrypted_traffic_enabled: The platform_setting_capture_encrypted_traffic_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_capture_encrypted_traffic_enabled = platform_setting_capture_encrypted_traffic_enabled

    @property
    def platform_setting_retain_system_event_duration(self):
        """Gets the platform_setting_retain_system_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete System Events older than  # noqa: E501

        :return: The platform_setting_retain_system_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_retain_system_event_duration

    @platform_setting_retain_system_event_duration.setter
    def platform_setting_retain_system_event_duration(self, platform_setting_retain_system_event_duration):
        """Sets the platform_setting_retain_system_event_duration of this SystemSettings.

        Automatically delete System Events older than  # noqa: E501

        :param platform_setting_retain_system_event_duration: The platform_setting_retain_system_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_retain_system_event_duration = platform_setting_retain_system_event_duration

    @property
    def platform_setting_user_password_expiry(self):
        """Gets the platform_setting_user_password_expiry of this SystemSettings.  # noqa: E501

        User password expires  # noqa: E501

        :return: The platform_setting_user_password_expiry of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_password_expiry

    @platform_setting_user_password_expiry.setter
    def platform_setting_user_password_expiry(self, platform_setting_user_password_expiry):
        """Sets the platform_setting_user_password_expiry of this SystemSettings.

        User password expires  # noqa: E501

        :param platform_setting_user_password_expiry: The platform_setting_user_password_expiry of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_password_expiry = platform_setting_user_password_expiry

    @property
    def platform_setting_smart_protection_feedback_enabled(self):
        """Gets the platform_setting_smart_protection_feedback_enabled of this SystemSettings.  # noqa: E501

        Enable Trend Micro Smart Feedback (recommended)  # noqa: E501

        :return: The platform_setting_smart_protection_feedback_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smart_protection_feedback_enabled

    @platform_setting_smart_protection_feedback_enabled.setter
    def platform_setting_smart_protection_feedback_enabled(self, platform_setting_smart_protection_feedback_enabled):
        """Sets the platform_setting_smart_protection_feedback_enabled of this SystemSettings.

        Enable Trend Micro Smart Feedback (recommended)  # noqa: E501

        :param platform_setting_smart_protection_feedback_enabled: The platform_setting_smart_protection_feedback_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smart_protection_feedback_enabled = platform_setting_smart_protection_feedback_enabled

    @property
    def integrity_monitoring_setting_retain_event_duration(self):
        """Gets the integrity_monitoring_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Integrity Monitoring Events older than  # noqa: E501

        :return: The integrity_monitoring_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_retain_event_duration

    @integrity_monitoring_setting_retain_event_duration.setter
    def integrity_monitoring_setting_retain_event_duration(self, integrity_monitoring_setting_retain_event_duration):
        """Sets the integrity_monitoring_setting_retain_event_duration of this SystemSettings.

        Automatically delete Integrity Monitoring Events older than  # noqa: E501

        :param integrity_monitoring_setting_retain_event_duration: The integrity_monitoring_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_retain_event_duration = integrity_monitoring_setting_retain_event_duration

    @property
    def platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to use the \"Run Script\" Scheduled Task  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled

    @platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled(self, platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled of this SystemSettings.

        Allow Tenants to use the \"Run Script\" Scheduled Task  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled: The platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled = platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled

    @property
    def log_inspection_setting_event_rank_severity_critical(self):
        """Gets the log_inspection_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501

        Critical  # noqa: E501

        :return: The log_inspection_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_event_rank_severity_critical

    @log_inspection_setting_event_rank_severity_critical.setter
    def log_inspection_setting_event_rank_severity_critical(self, log_inspection_setting_event_rank_severity_critical):
        """Sets the log_inspection_setting_event_rank_severity_critical of this SystemSettings.

        Critical  # noqa: E501

        :param log_inspection_setting_event_rank_severity_critical: The log_inspection_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_event_rank_severity_critical = log_inspection_setting_event_rank_severity_critical

    @property
    def platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled(self):
        """Gets the platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled of this SystemSettings.  # noqa: E501

        All options on the \"SMTP\" Tab  # noqa: E501

        :return: The platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled

    @platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled.setter
    def platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled(self, platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled):
        """Sets the platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled of this SystemSettings.

        All options on the \"SMTP\" Tab  # noqa: E501

        :param platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled: The platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled

    @property
    def platform_setting_ddan_proxy_id(self):
        """Gets the platform_setting_ddan_proxy_id of this SystemSettings.  # noqa: E501

        Use Proxy when accessing Deep Discovery Analyzer  # noqa: E501

        :return: The platform_setting_ddan_proxy_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_proxy_id

    @platform_setting_ddan_proxy_id.setter
    def platform_setting_ddan_proxy_id(self, platform_setting_ddan_proxy_id):
        """Sets the platform_setting_ddan_proxy_id of this SystemSettings.

        Use Proxy when accessing Deep Discovery Analyzer  # noqa: E501

        :param platform_setting_ddan_proxy_id: The platform_setting_ddan_proxy_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_proxy_id = platform_setting_ddan_proxy_id

    @property
    def platform_setting_agent_initiated_activation_within_ip_list_id(self):
        """Gets the platform_setting_agent_initiated_activation_within_ip_list_id of this SystemSettings.  # noqa: E501

        Agent-Initiated Activation IP List  # noqa: E501

        :return: The platform_setting_agent_initiated_activation_within_ip_list_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_agent_initiated_activation_within_ip_list_id

    @platform_setting_agent_initiated_activation_within_ip_list_id.setter
    def platform_setting_agent_initiated_activation_within_ip_list_id(self, platform_setting_agent_initiated_activation_within_ip_list_id):
        """Sets the platform_setting_agent_initiated_activation_within_ip_list_id of this SystemSettings.

        Agent-Initiated Activation IP List  # noqa: E501

        :param platform_setting_agent_initiated_activation_within_ip_list_id: The platform_setting_agent_initiated_activation_within_ip_list_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_agent_initiated_activation_within_ip_list_id = platform_setting_agent_initiated_activation_within_ip_list_id

    @property
    def platform_setting_update_security_primary_source_url(self):
        """Gets the platform_setting_update_security_primary_source_url of this SystemSettings.  # noqa: E501

        URL  # noqa: E501

        :return: The platform_setting_update_security_primary_source_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_security_primary_source_url

    @platform_setting_update_security_primary_source_url.setter
    def platform_setting_update_security_primary_source_url(self, platform_setting_update_security_primary_source_url):
        """Sets the platform_setting_update_security_primary_source_url of this SystemSettings.

        URL  # noqa: E501

        :param platform_setting_update_security_primary_source_url: The platform_setting_update_security_primary_source_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_security_primary_source_url = platform_setting_update_security_primary_source_url

    @property
    def platform_setting_agentless_vcloud_protection_enabled(self):
        """Gets the platform_setting_agentless_vcloud_protection_enabled of this SystemSettings.  # noqa: E501

        Allow Appliance protection of vCloud VMs  # noqa: E501

        :return: The platform_setting_agentless_vcloud_protection_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_agentless_vcloud_protection_enabled

    @platform_setting_agentless_vcloud_protection_enabled.setter
    def platform_setting_agentless_vcloud_protection_enabled(self, platform_setting_agentless_vcloud_protection_enabled):
        """Sets the platform_setting_agentless_vcloud_protection_enabled of this SystemSettings.

        Allow Appliance protection of vCloud VMs  # noqa: E501

        :param platform_setting_agentless_vcloud_protection_enabled: The platform_setting_agentless_vcloud_protection_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_agentless_vcloud_protection_enabled = platform_setting_agentless_vcloud_protection_enabled

    @property
    def platform_setting_linux_upgrade_on_activation_enabled(self):
        """Gets the platform_setting_linux_upgrade_on_activation_enabled of this SystemSettings.  # noqa: E501

        Automatically upgrade Linux agents on activation  # noqa: E501

        :return: The platform_setting_linux_upgrade_on_activation_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_linux_upgrade_on_activation_enabled

    @platform_setting_linux_upgrade_on_activation_enabled.setter
    def platform_setting_linux_upgrade_on_activation_enabled(self, platform_setting_linux_upgrade_on_activation_enabled):
        """Sets the platform_setting_linux_upgrade_on_activation_enabled of this SystemSettings.

        Automatically upgrade Linux agents on activation  # noqa: E501

        :param platform_setting_linux_upgrade_on_activation_enabled: The platform_setting_linux_upgrade_on_activation_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_linux_upgrade_on_activation_enabled = platform_setting_linux_upgrade_on_activation_enabled

    @property
    def platform_setting_trend_micro_xdr_enabled(self):
        """Gets the platform_setting_trend_micro_xdr_enabled of this SystemSettings.  # noqa: E501

        Forward activity data to Trend Micro XDR data lake  # noqa: E501

        :return: The platform_setting_trend_micro_xdr_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_trend_micro_xdr_enabled

    @platform_setting_trend_micro_xdr_enabled.setter
    def platform_setting_trend_micro_xdr_enabled(self, platform_setting_trend_micro_xdr_enabled):
        """Sets the platform_setting_trend_micro_xdr_enabled of this SystemSettings.

        Forward activity data to Trend Micro XDR data lake  # noqa: E501

        :param platform_setting_trend_micro_xdr_enabled: The platform_setting_trend_micro_xdr_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_trend_micro_xdr_enabled = platform_setting_trend_micro_xdr_enabled

    @property
    def platform_setting_active_sessions_max_exceeded_action(self):
        """Gets the platform_setting_active_sessions_max_exceeded_action of this SystemSettings.  # noqa: E501

        Action when concurrent session limit is exceeded  # noqa: E501

        :return: The platform_setting_active_sessions_max_exceeded_action of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_active_sessions_max_exceeded_action

    @platform_setting_active_sessions_max_exceeded_action.setter
    def platform_setting_active_sessions_max_exceeded_action(self, platform_setting_active_sessions_max_exceeded_action):
        """Sets the platform_setting_active_sessions_max_exceeded_action of this SystemSettings.

        Action when concurrent session limit is exceeded  # noqa: E501

        :param platform_setting_active_sessions_max_exceeded_action: The platform_setting_active_sessions_max_exceeded_action of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_active_sessions_max_exceeded_action = platform_setting_active_sessions_max_exceeded_action

    @property
    def platform_setting_update_hostname_on_ip_change_enabled(self):
        """Gets the platform_setting_update_hostname_on_ip_change_enabled of this SystemSettings.  # noqa: E501

        Update the \"Hostname\" entry if an IP is used as a hostname and a change in IP is detected on the computer after Agent/Appliance-initiated communication or discovery  # noqa: E501

        :return: The platform_setting_update_hostname_on_ip_change_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_hostname_on_ip_change_enabled

    @platform_setting_update_hostname_on_ip_change_enabled.setter
    def platform_setting_update_hostname_on_ip_change_enabled(self, platform_setting_update_hostname_on_ip_change_enabled):
        """Sets the platform_setting_update_hostname_on_ip_change_enabled of this SystemSettings.

        Update the \"Hostname\" entry if an IP is used as a hostname and a change in IP is detected on the computer after Agent/Appliance-initiated communication or discovery  # noqa: E501

        :param platform_setting_update_hostname_on_ip_change_enabled: The platform_setting_update_hostname_on_ip_change_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_hostname_on_ip_change_enabled = platform_setting_update_hostname_on_ip_change_enabled

    @property
    def log_inspection_setting_event_rank_severity_high(self):
        """Gets the log_inspection_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501

        High  # noqa: E501

        :return: The log_inspection_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_event_rank_severity_high

    @log_inspection_setting_event_rank_severity_high.setter
    def log_inspection_setting_event_rank_severity_high(self, log_inspection_setting_event_rank_severity_high):
        """Sets the log_inspection_setting_event_rank_severity_high of this SystemSettings.

        High  # noqa: E501

        :param log_inspection_setting_event_rank_severity_high: The log_inspection_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_event_rank_severity_high = log_inspection_setting_event_rank_severity_high

    @property
    def platform_setting_smtp_requires_authentication_enabled(self):
        """Gets the platform_setting_smtp_requires_authentication_enabled of this SystemSettings.  # noqa: E501

        Mail server requires authentication  # noqa: E501

        :return: The platform_setting_smtp_requires_authentication_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smtp_requires_authentication_enabled

    @platform_setting_smtp_requires_authentication_enabled.setter
    def platform_setting_smtp_requires_authentication_enabled(self, platform_setting_smtp_requires_authentication_enabled):
        """Sets the platform_setting_smtp_requires_authentication_enabled of this SystemSettings.

        Mail server requires authentication  # noqa: E501

        :param platform_setting_smtp_requires_authentication_enabled: The platform_setting_smtp_requires_authentication_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smtp_requires_authentication_enabled = platform_setting_smtp_requires_authentication_enabled

    @property
    def platform_setting_active_sessions_max(self):
        """Gets the platform_setting_active_sessions_max of this SystemSettings.  # noqa: E501

        Number of concurrent sessions allowed per User  # noqa: E501

        :return: The platform_setting_active_sessions_max of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_active_sessions_max

    @platform_setting_active_sessions_max.setter
    def platform_setting_active_sessions_max(self, platform_setting_active_sessions_max):
        """Sets the platform_setting_active_sessions_max of this SystemSettings.

        Number of concurrent sessions allowed per User  # noqa: E501

        :param platform_setting_active_sessions_max: The platform_setting_active_sessions_max of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_active_sessions_max = platform_setting_active_sessions_max

    @property
    def platform_setting_aws_external_id_retrieval_enabled(self):
        """Gets the platform_setting_aws_external_id_retrieval_enabled of this SystemSettings.  # noqa: E501

        Enable retrieval and viewing of AWS External ID  # noqa: E501

        :return: The platform_setting_aws_external_id_retrieval_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_aws_external_id_retrieval_enabled

    @platform_setting_aws_external_id_retrieval_enabled.setter
    def platform_setting_aws_external_id_retrieval_enabled(self, platform_setting_aws_external_id_retrieval_enabled):
        """Sets the platform_setting_aws_external_id_retrieval_enabled of this SystemSettings.

        Enable retrieval and viewing of AWS External ID  # noqa: E501

        :param platform_setting_aws_external_id_retrieval_enabled: The platform_setting_aws_external_id_retrieval_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_aws_external_id_retrieval_enabled = platform_setting_aws_external_id_retrieval_enabled

    @property
    def log_inspection_setting_event_rank_severity_low(self):
        """Gets the log_inspection_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501

        Low  # noqa: E501

        :return: The log_inspection_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_event_rank_severity_low

    @log_inspection_setting_event_rank_severity_low.setter
    def log_inspection_setting_event_rank_severity_low(self, log_inspection_setting_event_rank_severity_low):
        """Sets the log_inspection_setting_event_rank_severity_low of this SystemSettings.

        Low  # noqa: E501

        :param log_inspection_setting_event_rank_severity_low: The log_inspection_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_event_rank_severity_low = log_inspection_setting_event_rank_severity_low

    @property
    def platform_setting_azure_sso_certificate(self):
        """Gets the platform_setting_azure_sso_certificate of this SystemSettings.  # noqa: E501

        Azure resource provider certificate for SSO  # noqa: E501

        :return: The platform_setting_azure_sso_certificate of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_azure_sso_certificate

    @platform_setting_azure_sso_certificate.setter
    def platform_setting_azure_sso_certificate(self, platform_setting_azure_sso_certificate):
        """Sets the platform_setting_azure_sso_certificate of this SystemSettings.

        Azure resource provider certificate for SSO  # noqa: E501

        :param platform_setting_azure_sso_certificate: The platform_setting_azure_sso_certificate of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_azure_sso_certificate = platform_setting_azure_sso_certificate

    @property
    def platform_setting_smtp_username(self):
        """Gets the platform_setting_smtp_username of this SystemSettings.  # noqa: E501

        SMTP username  # noqa: E501

        :return: The platform_setting_smtp_username of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smtp_username

    @platform_setting_smtp_username.setter
    def platform_setting_smtp_username(self, platform_setting_smtp_username):
        """Sets the platform_setting_smtp_username of this SystemSettings.

        SMTP username  # noqa: E501

        :param platform_setting_smtp_username: The platform_setting_smtp_username of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smtp_username = platform_setting_smtp_username

    @property
    def platform_setting_event_forwarding_sns_advanced_config_enabled(self):
        """Gets the platform_setting_event_forwarding_sns_advanced_config_enabled of this SystemSettings.  # noqa: E501

        Amazon SNS Advanced Configuration  # noqa: E501

        :return: The platform_setting_event_forwarding_sns_advanced_config_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_event_forwarding_sns_advanced_config_enabled

    @platform_setting_event_forwarding_sns_advanced_config_enabled.setter
    def platform_setting_event_forwarding_sns_advanced_config_enabled(self, platform_setting_event_forwarding_sns_advanced_config_enabled):
        """Sets the platform_setting_event_forwarding_sns_advanced_config_enabled of this SystemSettings.

        Amazon SNS Advanced Configuration  # noqa: E501

        :param platform_setting_event_forwarding_sns_advanced_config_enabled: The platform_setting_event_forwarding_sns_advanced_config_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_event_forwarding_sns_advanced_config_enabled = platform_setting_event_forwarding_sns_advanced_config_enabled

    @property
    def firewall_setting_internet_connectivity_test_interval(self):
        """Gets the firewall_setting_internet_connectivity_test_interval of this SystemSettings.  # noqa: E501

        Test Interval  # noqa: E501

        :return: The firewall_setting_internet_connectivity_test_interval of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_internet_connectivity_test_interval

    @firewall_setting_internet_connectivity_test_interval.setter
    def firewall_setting_internet_connectivity_test_interval(self, firewall_setting_internet_connectivity_test_interval):
        """Sets the firewall_setting_internet_connectivity_test_interval of this SystemSettings.

        Test Interval  # noqa: E501

        :param firewall_setting_internet_connectivity_test_interval: The firewall_setting_internet_connectivity_test_interval of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_internet_connectivity_test_interval = firewall_setting_internet_connectivity_test_interval

    @property
    def platform_setting_whois_url(self):
        """Gets the platform_setting_whois_url of this SystemSettings.  # noqa: E501

        Whois URL - The full URL to a Whois lookup with the IP represented as [IP]  # noqa: E501

        :return: The platform_setting_whois_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_whois_url

    @platform_setting_whois_url.setter
    def platform_setting_whois_url(self, platform_setting_whois_url):
        """Sets the platform_setting_whois_url of this SystemSettings.

        Whois URL - The full URL to a Whois lookup with the IP represented as [IP]  # noqa: E501

        :param platform_setting_whois_url: The platform_setting_whois_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_whois_url = platform_setting_whois_url

    @property
    def platform_setting_ddan_source_option(self):
        """Gets the platform_setting_ddan_source_option of this SystemSettings.  # noqa: E501

        Deep Discovery Analyzer Source  # noqa: E501

        :return: The platform_setting_ddan_source_option of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_source_option

    @platform_setting_ddan_source_option.setter
    def platform_setting_ddan_source_option(self, platform_setting_ddan_source_option):
        """Sets the platform_setting_ddan_source_option of this SystemSettings.

        Deep Discovery Analyzer Source  # noqa: E501

        :param platform_setting_ddan_source_option: The platform_setting_ddan_source_option of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_source_option = platform_setting_ddan_source_option

    @property
    def platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled(self):
        """Gets the platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled of this SystemSettings.  # noqa: E501

        Compare objects against Suspicious Object List  # noqa: E501

        :return: The platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled

    @platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled.setter
    def platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled(self, platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled):
        """Sets the platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled of this SystemSettings.

        Compare objects against Suspicious Object List  # noqa: E501

        :param platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled: The platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled = platform_setting_connected_threat_defense_control_manager_suspicious_object_list_comparison_enabled

    @property
    def platform_setting_exported_file_character_encoding(self):
        """Gets the platform_setting_exported_file_character_encoding of this SystemSettings.  # noqa: E501

        Exported file Character Encoding  # noqa: E501

        :return: The platform_setting_exported_file_character_encoding of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_exported_file_character_encoding

    @platform_setting_exported_file_character_encoding.setter
    def platform_setting_exported_file_character_encoding(self, platform_setting_exported_file_character_encoding):
        """Sets the platform_setting_exported_file_character_encoding of this SystemSettings.

        Exported file Character Encoding  # noqa: E501

        :param platform_setting_exported_file_character_encoding: The platform_setting_exported_file_character_encoding of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_exported_file_character_encoding = platform_setting_exported_file_character_encoding

    @property
    def platform_setting_user_session_duration_max(self):
        """Gets the platform_setting_user_session_duration_max of this SystemSettings.  # noqa: E501

        Maximum session duration  # noqa: E501

        :return: The platform_setting_user_session_duration_max of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_session_duration_max

    @platform_setting_user_session_duration_max.setter
    def platform_setting_user_session_duration_max(self, platform_setting_user_session_duration_max):
        """Sets the platform_setting_user_session_duration_max of this SystemSettings.

        Maximum session duration  # noqa: E501

        :param platform_setting_user_session_duration_max: The platform_setting_user_session_duration_max of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_session_duration_max = platform_setting_user_session_duration_max

    @property
    def platform_setting_update_software_alternate_update_server_urls(self):
        """Gets the platform_setting_update_software_alternate_update_server_urls of this SystemSettings.  # noqa: E501

        Alternate Software Update Web Server(s)  # noqa: E501

        :return: The platform_setting_update_software_alternate_update_server_urls of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_update_software_alternate_update_server_urls

    @platform_setting_update_software_alternate_update_server_urls.setter
    def platform_setting_update_software_alternate_update_server_urls(self, platform_setting_update_software_alternate_update_server_urls):
        """Sets the platform_setting_update_software_alternate_update_server_urls of this SystemSettings.

        Alternate Software Update Web Server(s)  # noqa: E501

        :param platform_setting_update_software_alternate_update_server_urls: The platform_setting_update_software_alternate_update_server_urls of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_update_software_alternate_update_server_urls = platform_setting_update_software_alternate_update_server_urls

    @property
    def platform_setting_retain_counters_duration(self):
        """Gets the platform_setting_retain_counters_duration of this SystemSettings.  # noqa: E501

        Automatically delete Counters older than  # noqa: E501

        :return: The platform_setting_retain_counters_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_retain_counters_duration

    @platform_setting_retain_counters_duration.setter
    def platform_setting_retain_counters_duration(self, platform_setting_retain_counters_duration):
        """Sets the platform_setting_retain_counters_duration of this SystemSettings.

        Automatically delete Counters older than  # noqa: E501

        :param platform_setting_retain_counters_duration: The platform_setting_retain_counters_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_retain_counters_duration = platform_setting_retain_counters_duration

    @property
    def platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to run \"Computer Discovery\" (directly and as a Scheduled Task)  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled

    @platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled(self, platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled of this SystemSettings.

        Allow Tenants to run \"Computer Discovery\" (directly and as a Scheduled Task)  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled: The platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled = platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled

    @property
    def platform_setting_smart_protection_feedback_interval(self):
        """Gets the platform_setting_smart_protection_feedback_interval of this SystemSettings.  # noqa: E501

        Feedback Interval (min)  # noqa: E501

        :return: The platform_setting_smart_protection_feedback_interval of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smart_protection_feedback_interval

    @platform_setting_smart_protection_feedback_interval.setter
    def platform_setting_smart_protection_feedback_interval(self, platform_setting_smart_protection_feedback_interval):
        """Sets the platform_setting_smart_protection_feedback_interval of this SystemSettings.

        Feedback Interval (min)  # noqa: E501

        :param platform_setting_smart_protection_feedback_interval: The platform_setting_smart_protection_feedback_interval of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smart_protection_feedback_interval = platform_setting_smart_protection_feedback_interval

    @property
    def platform_setting_system_event_forwarding_snmp_address(self):
        """Gets the platform_setting_system_event_forwarding_snmp_address of this SystemSettings.  # noqa: E501

        Hostname or IP address to which events should be sent  # noqa: E501

        :return: The platform_setting_system_event_forwarding_snmp_address of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_system_event_forwarding_snmp_address

    @platform_setting_system_event_forwarding_snmp_address.setter
    def platform_setting_system_event_forwarding_snmp_address(self, platform_setting_system_event_forwarding_snmp_address):
        """Sets the platform_setting_system_event_forwarding_snmp_address of this SystemSettings.

        Hostname or IP address to which events should be sent  # noqa: E501

        :param platform_setting_system_event_forwarding_snmp_address: The platform_setting_system_event_forwarding_snmp_address of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_system_event_forwarding_snmp_address = platform_setting_system_event_forwarding_snmp_address

    @property
    def platform_setting_smtp_server_address(self):
        """Gets the platform_setting_smtp_server_address of this SystemSettings.  # noqa: E501

        SMTP mail server address (optionally include :port)  # noqa: E501

        :return: The platform_setting_smtp_server_address of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smtp_server_address

    @platform_setting_smtp_server_address.setter
    def platform_setting_smtp_server_address(self, platform_setting_smtp_server_address):
        """Sets the platform_setting_smtp_server_address of this SystemSettings.

        SMTP mail server address (optionally include :port)  # noqa: E501

        :param platform_setting_smtp_server_address: The platform_setting_smtp_server_address of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smtp_server_address = platform_setting_smtp_server_address

    @property
    def platform_setting_primary_tenant_allow_tenant_configure_siem_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_configure_siem_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to configure independent Event Forwarding SIEM settings  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_configure_siem_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_configure_siem_enabled

    @platform_setting_primary_tenant_allow_tenant_configure_siem_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_configure_siem_enabled(self, platform_setting_primary_tenant_allow_tenant_configure_siem_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_configure_siem_enabled of this SystemSettings.

        Allow Tenants to configure independent Event Forwarding SIEM settings  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_configure_siem_enabled: The platform_setting_primary_tenant_allow_tenant_configure_siem_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_configure_siem_enabled = platform_setting_primary_tenant_allow_tenant_configure_siem_enabled

    @property
    def platform_setting_smtp_password(self):
        """Gets the platform_setting_smtp_password of this SystemSettings.  # noqa: E501

        SMTP password  # noqa: E501

        :return: The platform_setting_smtp_password of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smtp_password

    @platform_setting_smtp_password.setter
    def platform_setting_smtp_password(self, platform_setting_smtp_password):
        """Sets the platform_setting_smtp_password of this SystemSettings.

        SMTP password  # noqa: E501

        :param platform_setting_smtp_password: The platform_setting_smtp_password of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smtp_password = platform_setting_smtp_password

    @property
    def platform_setting_event_forwarding_sns_config_json(self):
        """Gets the platform_setting_event_forwarding_sns_config_json of this SystemSettings.  # noqa: E501

        Amazon SNS Configuration  # noqa: E501

        :return: The platform_setting_event_forwarding_sns_config_json of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_event_forwarding_sns_config_json

    @platform_setting_event_forwarding_sns_config_json.setter
    def platform_setting_event_forwarding_sns_config_json(self, platform_setting_event_forwarding_sns_config_json):
        """Sets the platform_setting_event_forwarding_sns_config_json of this SystemSettings.

        Amazon SNS Configuration  # noqa: E501

        :param platform_setting_event_forwarding_sns_config_json: The platform_setting_event_forwarding_sns_config_json of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_event_forwarding_sns_config_json = platform_setting_event_forwarding_sns_config_json

    @property
    def firewall_setting_retain_event_duration(self):
        """Gets the firewall_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Firewall Events older than  # noqa: E501

        :return: The firewall_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_retain_event_duration

    @firewall_setting_retain_event_duration.setter
    def firewall_setting_retain_event_duration(self, firewall_setting_retain_event_duration):
        """Sets the firewall_setting_retain_event_duration of this SystemSettings.

        Automatically delete Firewall Events older than  # noqa: E501

        :param firewall_setting_retain_event_duration: The firewall_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_retain_event_duration = firewall_setting_retain_event_duration

    @property
    def web_reputation_setting_event_rank_risk_untested(self):
        """Gets the web_reputation_setting_event_rank_risk_untested of this SystemSettings.  # noqa: E501

        Untested  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_untested of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_untested

    @web_reputation_setting_event_rank_risk_untested.setter
    def web_reputation_setting_event_rank_risk_untested(self, web_reputation_setting_event_rank_risk_untested):
        """Sets the web_reputation_setting_event_rank_risk_untested of this SystemSettings.

        Untested  # noqa: E501

        :param web_reputation_setting_event_rank_risk_untested: The web_reputation_setting_event_rank_risk_untested of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_untested = web_reputation_setting_event_rank_risk_untested

    @property
    def platform_setting_managed_detect_response_use_proxy_enabled(self):
        """Gets the platform_setting_managed_detect_response_use_proxy_enabled of this SystemSettings.  # noqa: E501

        When accessing MDR server, use proxy:  # noqa: E501

        :return: The platform_setting_managed_detect_response_use_proxy_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_managed_detect_response_use_proxy_enabled

    @platform_setting_managed_detect_response_use_proxy_enabled.setter
    def platform_setting_managed_detect_response_use_proxy_enabled(self, platform_setting_managed_detect_response_use_proxy_enabled):
        """Sets the platform_setting_managed_detect_response_use_proxy_enabled of this SystemSettings.

        When accessing MDR server, use proxy:  # noqa: E501

        :param platform_setting_managed_detect_response_use_proxy_enabled: The platform_setting_managed_detect_response_use_proxy_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_managed_detect_response_use_proxy_enabled = platform_setting_managed_detect_response_use_proxy_enabled

    @property
    def platform_setting_event_forwarding_sns_secret_key(self):
        """Gets the platform_setting_event_forwarding_sns_secret_key of this SystemSettings.  # noqa: E501

        Secret Key - The Secret Key of an AWS User with access to the SNS Topic  # noqa: E501

        :return: The platform_setting_event_forwarding_sns_secret_key of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_event_forwarding_sns_secret_key

    @platform_setting_event_forwarding_sns_secret_key.setter
    def platform_setting_event_forwarding_sns_secret_key(self, platform_setting_event_forwarding_sns_secret_key):
        """Sets the platform_setting_event_forwarding_sns_secret_key of this SystemSettings.

        Secret Key - The Secret Key of an AWS User with access to the SNS Topic  # noqa: E501

        :param platform_setting_event_forwarding_sns_secret_key: The platform_setting_event_forwarding_sns_secret_key of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_event_forwarding_sns_secret_key = platform_setting_event_forwarding_sns_secret_key

    @property
    def platform_setting_logo_binary_image_img(self):
        """Gets the platform_setting_logo_binary_image_img of this SystemSettings.  # noqa: E501

        Logo Bytes  # noqa: E501

        :return: The platform_setting_logo_binary_image_img of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_logo_binary_image_img

    @platform_setting_logo_binary_image_img.setter
    def platform_setting_logo_binary_image_img(self, platform_setting_logo_binary_image_img):
        """Sets the platform_setting_logo_binary_image_img of this SystemSettings.

        Logo Bytes  # noqa: E501

        :param platform_setting_logo_binary_image_img: The platform_setting_logo_binary_image_img of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_logo_binary_image_img = platform_setting_logo_binary_image_img

    @property
    def platform_setting_aws_manager_identity_secret_key(self):
        """Gets the platform_setting_aws_manager_identity_secret_key of this SystemSettings.  # noqa: E501

        Secret Key - The Secret Access Key of an AWS User used for the manager identity  # noqa: E501

        :return: The platform_setting_aws_manager_identity_secret_key of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_aws_manager_identity_secret_key

    @platform_setting_aws_manager_identity_secret_key.setter
    def platform_setting_aws_manager_identity_secret_key(self, platform_setting_aws_manager_identity_secret_key):
        """Sets the platform_setting_aws_manager_identity_secret_key of this SystemSettings.

        Secret Key - The Secret Access Key of an AWS User used for the manager identity  # noqa: E501

        :param platform_setting_aws_manager_identity_secret_key: The platform_setting_aws_manager_identity_secret_key of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_aws_manager_identity_secret_key = platform_setting_aws_manager_identity_secret_key

    @property
    def web_reputation_setting_event_rank_risk_highly_suspicious(self):
        """Gets the web_reputation_setting_event_rank_risk_highly_suspicious of this SystemSettings.  # noqa: E501

        Highly Suspicious  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_highly_suspicious of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_highly_suspicious

    @web_reputation_setting_event_rank_risk_highly_suspicious.setter
    def web_reputation_setting_event_rank_risk_highly_suspicious(self, web_reputation_setting_event_rank_risk_highly_suspicious):
        """Sets the web_reputation_setting_event_rank_risk_highly_suspicious of this SystemSettings.

        Highly Suspicious  # noqa: E501

        :param web_reputation_setting_event_rank_risk_highly_suspicious: The web_reputation_setting_event_rank_risk_highly_suspicious of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_highly_suspicious = web_reputation_setting_event_rank_risk_highly_suspicious

    @property
    def platform_setting_api_status_monitoring_enabled(self):
        """Gets the platform_setting_api_status_monitoring_enabled of this SystemSettings.  # noqa: E501

        Status Monitoring API Enabled  # noqa: E501

        :return: The platform_setting_api_status_monitoring_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_api_status_monitoring_enabled

    @platform_setting_api_status_monitoring_enabled.setter
    def platform_setting_api_status_monitoring_enabled(self, platform_setting_api_status_monitoring_enabled):
        """Sets the platform_setting_api_status_monitoring_enabled of this SystemSettings.

        Status Monitoring API Enabled  # noqa: E501

        :param platform_setting_api_status_monitoring_enabled: The platform_setting_api_status_monitoring_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_api_status_monitoring_enabled = platform_setting_api_status_monitoring_enabled

    @property
    def platform_setting_sign_in_page_message(self):
        """Gets the platform_setting_sign_in_page_message of this SystemSettings.  # noqa: E501

        Text  # noqa: E501

        :return: The platform_setting_sign_in_page_message of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_sign_in_page_message

    @platform_setting_sign_in_page_message.setter
    def platform_setting_sign_in_page_message(self, platform_setting_sign_in_page_message):
        """Sets the platform_setting_sign_in_page_message of this SystemSettings.

        Text  # noqa: E501

        :param platform_setting_sign_in_page_message: The platform_setting_sign_in_page_message of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_sign_in_page_message = platform_setting_sign_in_page_message

    @property
    def platform_setting_user_password_expiry_send_email_enabled(self):
        """Gets the platform_setting_user_password_expiry_send_email_enabled of this SystemSettings.  # noqa: E501

        Send email when a user's password is about to expire  # noqa: E501

        :return: The platform_setting_user_password_expiry_send_email_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_password_expiry_send_email_enabled

    @platform_setting_user_password_expiry_send_email_enabled.setter
    def platform_setting_user_password_expiry_send_email_enabled(self, platform_setting_user_password_expiry_send_email_enabled):
        """Sets the platform_setting_user_password_expiry_send_email_enabled of this SystemSettings.

        Send email when a user's password is about to expire  # noqa: E501

        :param platform_setting_user_password_expiry_send_email_enabled: The platform_setting_user_password_expiry_send_email_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_password_expiry_send_email_enabled = platform_setting_user_password_expiry_send_email_enabled

    @property
    def platform_setting_user_sign_in_attempts_allowed_number(self):
        """Gets the platform_setting_user_sign_in_attempts_allowed_number of this SystemSettings.  # noqa: E501

        Number of incorrect sign-in attempts allowed (before lock out)  # noqa: E501

        :return: The platform_setting_user_sign_in_attempts_allowed_number of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_sign_in_attempts_allowed_number

    @platform_setting_user_sign_in_attempts_allowed_number.setter
    def platform_setting_user_sign_in_attempts_allowed_number(self, platform_setting_user_sign_in_attempts_allowed_number):
        """Sets the platform_setting_user_sign_in_attempts_allowed_number of this SystemSettings.

        Number of incorrect sign-in attempts allowed (before lock out)  # noqa: E501

        :param platform_setting_user_sign_in_attempts_allowed_number: The platform_setting_user_sign_in_attempts_allowed_number of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_sign_in_attempts_allowed_number = platform_setting_user_sign_in_attempts_allowed_number

    @property
    def platform_setting_ddan_use_proxy_enabled(self):
        """Gets the platform_setting_ddan_use_proxy_enabled of this SystemSettings.  # noqa: E501

        When accessing Deep Discovery Analyzer, use proxy:  # noqa: E501

        :return: The platform_setting_ddan_use_proxy_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_use_proxy_enabled

    @platform_setting_ddan_use_proxy_enabled.setter
    def platform_setting_ddan_use_proxy_enabled(self, platform_setting_ddan_use_proxy_enabled):
        """Sets the platform_setting_ddan_use_proxy_enabled of this SystemSettings.

        When accessing Deep Discovery Analyzer, use proxy:  # noqa: E501

        :param platform_setting_ddan_use_proxy_enabled: The platform_setting_ddan_use_proxy_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_use_proxy_enabled = platform_setting_ddan_use_proxy_enabled

    @property
    def platform_setting_agent_initiated_activation_enabled(self):
        """Gets the platform_setting_agent_initiated_activation_enabled of this SystemSettings.  # noqa: E501

        Allow Agent-Initiated Activation  # noqa: E501

        :return: The platform_setting_agent_initiated_activation_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_agent_initiated_activation_enabled

    @platform_setting_agent_initiated_activation_enabled.setter
    def platform_setting_agent_initiated_activation_enabled(self, platform_setting_agent_initiated_activation_enabled):
        """Sets the platform_setting_agent_initiated_activation_enabled of this SystemSettings.

        Allow Agent-Initiated Activation  # noqa: E501

        :param platform_setting_agent_initiated_activation_enabled: The platform_setting_agent_initiated_activation_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_agent_initiated_activation_enabled = platform_setting_agent_initiated_activation_enabled

    @property
    def platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled of this SystemSettings.  # noqa: E501

        Show the \"Remember Account Name and Username\" option  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled

    @platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled(self, platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled of this SystemSettings.

        Show the \"Remember Account Name and Username\" option  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled: The platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled = platform_setting_primary_tenant_allow_tenant_configure_remember_me_option_enabled

    @property
    def platform_setting_smart_protection_feedback_bandwidth_max_kbytes(self):
        """Gets the platform_setting_smart_protection_feedback_bandwidth_max_kbytes of this SystemSettings.  # noqa: E501

        Maximum bandwidth:  # noqa: E501

        :return: The platform_setting_smart_protection_feedback_bandwidth_max_kbytes of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_smart_protection_feedback_bandwidth_max_kbytes

    @platform_setting_smart_protection_feedback_bandwidth_max_kbytes.setter
    def platform_setting_smart_protection_feedback_bandwidth_max_kbytes(self, platform_setting_smart_protection_feedback_bandwidth_max_kbytes):
        """Sets the platform_setting_smart_protection_feedback_bandwidth_max_kbytes of this SystemSettings.

        Maximum bandwidth:  # noqa: E501

        :param platform_setting_smart_protection_feedback_bandwidth_max_kbytes: The platform_setting_smart_protection_feedback_bandwidth_max_kbytes of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_smart_protection_feedback_bandwidth_max_kbytes = platform_setting_smart_protection_feedback_bandwidth_max_kbytes

    @property
    def firewall_setting_event_rank_severity_packet_rejection(self):
        """Gets the firewall_setting_event_rank_severity_packet_rejection of this SystemSettings.  # noqa: E501

        Packet Rejection  # noqa: E501

        :return: The firewall_setting_event_rank_severity_packet_rejection of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_event_rank_severity_packet_rejection

    @firewall_setting_event_rank_severity_packet_rejection.setter
    def firewall_setting_event_rank_severity_packet_rejection(self, firewall_setting_event_rank_severity_packet_rejection):
        """Sets the firewall_setting_event_rank_severity_packet_rejection of this SystemSettings.

        Packet Rejection  # noqa: E501

        :param firewall_setting_event_rank_severity_packet_rejection: The firewall_setting_event_rank_severity_packet_rejection of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_event_rank_severity_packet_rejection = firewall_setting_event_rank_severity_packet_rejection

    @property
    def platform_setting_proxy_manager_update_proxy_id(self):
        """Gets the platform_setting_proxy_manager_update_proxy_id of this SystemSettings.  # noqa: E501

        Deep Security Manager (Software Updates, CSSS, News Updates, Product Registration and Licensing):  # noqa: E501

        :return: The platform_setting_proxy_manager_update_proxy_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_proxy_manager_update_proxy_id

    @platform_setting_proxy_manager_update_proxy_id.setter
    def platform_setting_proxy_manager_update_proxy_id(self, platform_setting_proxy_manager_update_proxy_id):
        """Sets the platform_setting_proxy_manager_update_proxy_id of this SystemSettings.

        Deep Security Manager (Software Updates, CSSS, News Updates, Product Registration and Licensing):  # noqa: E501

        :param platform_setting_proxy_manager_update_proxy_id: The platform_setting_proxy_manager_update_proxy_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_proxy_manager_update_proxy_id = platform_setting_proxy_manager_update_proxy_id

    @property
    def platform_setting_managed_detect_response_use_primary_tenant_settings_enabled(self):
        """Gets the platform_setting_managed_detect_response_use_primary_tenant_settings_enabled of this SystemSettings.  # noqa: E501

        Use default server settings  # noqa: E501

        :return: The platform_setting_managed_detect_response_use_primary_tenant_settings_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_managed_detect_response_use_primary_tenant_settings_enabled

    @platform_setting_managed_detect_response_use_primary_tenant_settings_enabled.setter
    def platform_setting_managed_detect_response_use_primary_tenant_settings_enabled(self, platform_setting_managed_detect_response_use_primary_tenant_settings_enabled):
        """Sets the platform_setting_managed_detect_response_use_primary_tenant_settings_enabled of this SystemSettings.

        Use default server settings  # noqa: E501

        :param platform_setting_managed_detect_response_use_primary_tenant_settings_enabled: The platform_setting_managed_detect_response_use_primary_tenant_settings_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_managed_detect_response_use_primary_tenant_settings_enabled = platform_setting_managed_detect_response_use_primary_tenant_settings_enabled

    @property
    def platform_setting_event_forwarding_sns_access_key(self):
        """Gets the platform_setting_event_forwarding_sns_access_key of this SystemSettings.  # noqa: E501

        Access Key - The Access Key of an AWS User with access to the SNS Topic  # noqa: E501

        :return: The platform_setting_event_forwarding_sns_access_key of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_event_forwarding_sns_access_key

    @platform_setting_event_forwarding_sns_access_key.setter
    def platform_setting_event_forwarding_sns_access_key(self, platform_setting_event_forwarding_sns_access_key):
        """Sets the platform_setting_event_forwarding_sns_access_key of this SystemSettings.

        Access Key - The Access Key of an AWS User with access to the SNS Topic  # noqa: E501

        :param platform_setting_event_forwarding_sns_access_key: The platform_setting_event_forwarding_sns_access_key of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_event_forwarding_sns_access_key = platform_setting_event_forwarding_sns_access_key

    @property
    def platform_setting_agent_initiated_activation_specify_hostname_enabled(self):
        """Gets the platform_setting_agent_initiated_activation_specify_hostname_enabled of this SystemSettings.  # noqa: E501

        Allow Agent to specify hostname  # noqa: E501

        :return: The platform_setting_agent_initiated_activation_specify_hostname_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_agent_initiated_activation_specify_hostname_enabled

    @platform_setting_agent_initiated_activation_specify_hostname_enabled.setter
    def platform_setting_agent_initiated_activation_specify_hostname_enabled(self, platform_setting_agent_initiated_activation_specify_hostname_enabled):
        """Sets the platform_setting_agent_initiated_activation_specify_hostname_enabled of this SystemSettings.

        Allow Agent to specify hostname  # noqa: E501

        :param platform_setting_agent_initiated_activation_specify_hostname_enabled: The platform_setting_agent_initiated_activation_specify_hostname_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_agent_initiated_activation_specify_hostname_enabled = platform_setting_agent_initiated_activation_specify_hostname_enabled

    @property
    def platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to add with Cloud Accounts  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled

    @platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled(self, platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled of this SystemSettings.

        Allow Tenants to add with Cloud Accounts  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled: The platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled = platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled

    @property
    def platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled(self):
        """Gets the platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled of this SystemSettings.  # noqa: E501

        Use default server settings  # noqa: E501

        :return: The platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled

    @platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled.setter
    def platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled(self, platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled):
        """Sets the platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled of this SystemSettings.

        Use default server settings  # noqa: E501

        :param platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled: The platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled = platform_setting_connected_threat_defenses_use_primary_tenant_server_settings_enabled

    @property
    def platform_setting_inactive_agent_cleanup_duration(self):
        """Gets the platform_setting_inactive_agent_cleanup_duration of this SystemSettings.  # noqa: E501

        Delete Agents that have been inactive for:  # noqa: E501

        :return: The platform_setting_inactive_agent_cleanup_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_inactive_agent_cleanup_duration

    @platform_setting_inactive_agent_cleanup_duration.setter
    def platform_setting_inactive_agent_cleanup_duration(self, platform_setting_inactive_agent_cleanup_duration):
        """Sets the platform_setting_inactive_agent_cleanup_duration of this SystemSettings.

        Delete Agents that have been inactive for:  # noqa: E501

        :param platform_setting_inactive_agent_cleanup_duration: The platform_setting_inactive_agent_cleanup_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_inactive_agent_cleanup_duration = platform_setting_inactive_agent_cleanup_duration

    @property
    def platform_setting_agent_initiated_activation_duplicate_hostname_mode(self):
        """Gets the platform_setting_agent_initiated_activation_duplicate_hostname_mode of this SystemSettings.  # noqa: E501

        If a computer with the same name already exists  # noqa: E501

        :return: The platform_setting_agent_initiated_activation_duplicate_hostname_mode of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_agent_initiated_activation_duplicate_hostname_mode

    @platform_setting_agent_initiated_activation_duplicate_hostname_mode.setter
    def platform_setting_agent_initiated_activation_duplicate_hostname_mode(self, platform_setting_agent_initiated_activation_duplicate_hostname_mode):
        """Sets the platform_setting_agent_initiated_activation_duplicate_hostname_mode of this SystemSettings.

        If a computer with the same name already exists  # noqa: E501

        :param platform_setting_agent_initiated_activation_duplicate_hostname_mode: The platform_setting_agent_initiated_activation_duplicate_hostname_mode of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_agent_initiated_activation_duplicate_hostname_mode = platform_setting_agent_initiated_activation_duplicate_hostname_mode

    @property
    def platform_setting_vmware_nsx_manager_node(self):
        """Gets the platform_setting_vmware_nsx_manager_node of this SystemSettings.  # noqa: E501

        Manager Node for NSX communication  # noqa: E501

        :return: The platform_setting_vmware_nsx_manager_node of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_vmware_nsx_manager_node

    @platform_setting_vmware_nsx_manager_node.setter
    def platform_setting_vmware_nsx_manager_node(self, platform_setting_vmware_nsx_manager_node):
        """Sets the platform_setting_vmware_nsx_manager_node of this SystemSettings.

        Manager Node for NSX communication  # noqa: E501

        :param platform_setting_vmware_nsx_manager_node: The platform_setting_vmware_nsx_manager_node of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_vmware_nsx_manager_node = platform_setting_vmware_nsx_manager_node

    @property
    def platform_setting_user_enforce_terms_and_conditions_title(self):
        """Gets the platform_setting_user_enforce_terms_and_conditions_title of this SystemSettings.  # noqa: E501

        Text  # noqa: E501

        :return: The platform_setting_user_enforce_terms_and_conditions_title of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_user_enforce_terms_and_conditions_title

    @platform_setting_user_enforce_terms_and_conditions_title.setter
    def platform_setting_user_enforce_terms_and_conditions_title(self, platform_setting_user_enforce_terms_and_conditions_title):
        """Sets the platform_setting_user_enforce_terms_and_conditions_title of this SystemSettings.

        Text  # noqa: E501

        :param platform_setting_user_enforce_terms_and_conditions_title: The platform_setting_user_enforce_terms_and_conditions_title of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_user_enforce_terms_and_conditions_title = platform_setting_user_enforce_terms_and_conditions_title

    @property
    def platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to add VMware vCenters  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled

    @platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled(self, platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled of this SystemSettings.

        Allow Tenants to add VMware vCenters  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled: The platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled = platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled

    @property
    def platform_setting_new_tenant_download_security_update_enabled(self):
        """Gets the platform_setting_new_tenant_download_security_update_enabled of this SystemSettings.  # noqa: E501

        Enable the automatic download of Security Updates on new Tenants  # noqa: E501

        :return: The platform_setting_new_tenant_download_security_update_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_new_tenant_download_security_update_enabled

    @platform_setting_new_tenant_download_security_update_enabled.setter
    def platform_setting_new_tenant_download_security_update_enabled(self, platform_setting_new_tenant_download_security_update_enabled):
        """Sets the platform_setting_new_tenant_download_security_update_enabled of this SystemSettings.

        Enable the automatic download of Security Updates on new Tenants  # noqa: E501

        :param platform_setting_new_tenant_download_security_update_enabled: The platform_setting_new_tenant_download_security_update_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_new_tenant_download_security_update_enabled = platform_setting_new_tenant_download_security_update_enabled

    @property
    def platform_setting_tenant_protection_usage_monitoring_computer_id3(self):
        """Gets the platform_setting_tenant_protection_usage_monitoring_computer_id3 of this SystemSettings.  # noqa: E501

        Computer Identifier 3  # noqa: E501

        :return: The platform_setting_tenant_protection_usage_monitoring_computer_id3 of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_protection_usage_monitoring_computer_id3

    @platform_setting_tenant_protection_usage_monitoring_computer_id3.setter
    def platform_setting_tenant_protection_usage_monitoring_computer_id3(self, platform_setting_tenant_protection_usage_monitoring_computer_id3):
        """Sets the platform_setting_tenant_protection_usage_monitoring_computer_id3 of this SystemSettings.

        Computer Identifier 3  # noqa: E501

        :param platform_setting_tenant_protection_usage_monitoring_computer_id3: The platform_setting_tenant_protection_usage_monitoring_computer_id3 of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_protection_usage_monitoring_computer_id3 = platform_setting_tenant_protection_usage_monitoring_computer_id3

    @property
    def platform_setting_agent_initiated_activation_reactivate_unknown_enabled(self):
        """Gets the platform_setting_agent_initiated_activation_reactivate_unknown_enabled of this SystemSettings.  # noqa: E501

        Reactivate unknown Agents  # noqa: E501

        :return: The platform_setting_agent_initiated_activation_reactivate_unknown_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_agent_initiated_activation_reactivate_unknown_enabled

    @platform_setting_agent_initiated_activation_reactivate_unknown_enabled.setter
    def platform_setting_agent_initiated_activation_reactivate_unknown_enabled(self, platform_setting_agent_initiated_activation_reactivate_unknown_enabled):
        """Sets the platform_setting_agent_initiated_activation_reactivate_unknown_enabled of this SystemSettings.

        Reactivate unknown Agents  # noqa: E501

        :param platform_setting_agent_initiated_activation_reactivate_unknown_enabled: The platform_setting_agent_initiated_activation_reactivate_unknown_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_agent_initiated_activation_reactivate_unknown_enabled = platform_setting_agent_initiated_activation_reactivate_unknown_enabled

    @property
    def platform_setting_tenant_protection_usage_monitoring_computer_id2(self):
        """Gets the platform_setting_tenant_protection_usage_monitoring_computer_id2 of this SystemSettings.  # noqa: E501

        Computer Identifier 2  # noqa: E501

        :return: The platform_setting_tenant_protection_usage_monitoring_computer_id2 of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_protection_usage_monitoring_computer_id2

    @platform_setting_tenant_protection_usage_monitoring_computer_id2.setter
    def platform_setting_tenant_protection_usage_monitoring_computer_id2(self, platform_setting_tenant_protection_usage_monitoring_computer_id2):
        """Sets the platform_setting_tenant_protection_usage_monitoring_computer_id2 of this SystemSettings.

        Computer Identifier 2  # noqa: E501

        :param platform_setting_tenant_protection_usage_monitoring_computer_id2: The platform_setting_tenant_protection_usage_monitoring_computer_id2 of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_protection_usage_monitoring_computer_id2 = platform_setting_tenant_protection_usage_monitoring_computer_id2

    @property
    def platform_setting_agent_initiated_activation_policy_id(self):
        """Gets the platform_setting_agent_initiated_activation_policy_id of this SystemSettings.  # noqa: E501

        Policy to assign (if Policy not assigned by activation script):  # noqa: E501

        :return: The platform_setting_agent_initiated_activation_policy_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_agent_initiated_activation_policy_id

    @platform_setting_agent_initiated_activation_policy_id.setter
    def platform_setting_agent_initiated_activation_policy_id(self, platform_setting_agent_initiated_activation_policy_id):
        """Sets the platform_setting_agent_initiated_activation_policy_id of this SystemSettings.

        Policy to assign (if Policy not assigned by activation script):  # noqa: E501

        :param platform_setting_agent_initiated_activation_policy_id: The platform_setting_agent_initiated_activation_policy_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_agent_initiated_activation_policy_id = platform_setting_agent_initiated_activation_policy_id

    @property
    def platform_setting_tenant_protection_usage_monitoring_computer_id1(self):
        """Gets the platform_setting_tenant_protection_usage_monitoring_computer_id1 of this SystemSettings.  # noqa: E501

        Computer Identifier 1  # noqa: E501

        :return: The platform_setting_tenant_protection_usage_monitoring_computer_id1 of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_protection_usage_monitoring_computer_id1

    @platform_setting_tenant_protection_usage_monitoring_computer_id1.setter
    def platform_setting_tenant_protection_usage_monitoring_computer_id1(self, platform_setting_tenant_protection_usage_monitoring_computer_id1):
        """Sets the platform_setting_tenant_protection_usage_monitoring_computer_id1 of this SystemSettings.

        Computer Identifier 1  # noqa: E501

        :param platform_setting_tenant_protection_usage_monitoring_computer_id1: The platform_setting_tenant_protection_usage_monitoring_computer_id1 of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_protection_usage_monitoring_computer_id1 = platform_setting_tenant_protection_usage_monitoring_computer_id1

    @property
    def platform_setting_trend_micro_xdr_api_server_url(self):
        """Gets the platform_setting_trend_micro_xdr_api_server_url of this SystemSettings.  # noqa: E501

        API Server URL  # noqa: E501

        :return: The platform_setting_trend_micro_xdr_api_server_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_trend_micro_xdr_api_server_url

    @platform_setting_trend_micro_xdr_api_server_url.setter
    def platform_setting_trend_micro_xdr_api_server_url(self, platform_setting_trend_micro_xdr_api_server_url):
        """Sets the platform_setting_trend_micro_xdr_api_server_url of this SystemSettings.

        API Server URL  # noqa: E501

        :param platform_setting_trend_micro_xdr_api_server_url: The platform_setting_trend_micro_xdr_api_server_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_trend_micro_xdr_api_server_url = platform_setting_trend_micro_xdr_api_server_url

    @property
    def platform_setting_retain_agent_installers_per_platform_max(self):
        """Gets the platform_setting_retain_agent_installers_per_platform_max of this SystemSettings.  # noqa: E501

        Number of older software versions to keep per platform  # noqa: E501

        :return: The platform_setting_retain_agent_installers_per_platform_max of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_retain_agent_installers_per_platform_max

    @platform_setting_retain_agent_installers_per_platform_max.setter
    def platform_setting_retain_agent_installers_per_platform_max(self, platform_setting_retain_agent_installers_per_platform_max):
        """Sets the platform_setting_retain_agent_installers_per_platform_max of this SystemSettings.

        Number of older software versions to keep per platform  # noqa: E501

        :param platform_setting_retain_agent_installers_per_platform_max: The platform_setting_retain_agent_installers_per_platform_max of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_retain_agent_installers_per_platform_max = platform_setting_retain_agent_installers_per_platform_max

    @property
    def application_control_setting_serve_rulesets_from_relays_enabled(self):
        """Gets the application_control_setting_serve_rulesets_from_relays_enabled of this SystemSettings.  # noqa: E501

        Serve application control rulesets from relays  # noqa: E501

        :return: The application_control_setting_serve_rulesets_from_relays_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._application_control_setting_serve_rulesets_from_relays_enabled

    @application_control_setting_serve_rulesets_from_relays_enabled.setter
    def application_control_setting_serve_rulesets_from_relays_enabled(self, application_control_setting_serve_rulesets_from_relays_enabled):
        """Sets the application_control_setting_serve_rulesets_from_relays_enabled of this SystemSettings.

        Serve application control rulesets from relays  # noqa: E501

        :param application_control_setting_serve_rulesets_from_relays_enabled: The application_control_setting_serve_rulesets_from_relays_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._application_control_setting_serve_rulesets_from_relays_enabled = application_control_setting_serve_rulesets_from_relays_enabled

    @property
    def integrity_monitoring_setting_event_rank_severity_high(self):
        """Gets the integrity_monitoring_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501

        High  # noqa: E501

        :return: The integrity_monitoring_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_event_rank_severity_high

    @integrity_monitoring_setting_event_rank_severity_high.setter
    def integrity_monitoring_setting_event_rank_severity_high(self, integrity_monitoring_setting_event_rank_severity_high):
        """Sets the integrity_monitoring_setting_event_rank_severity_high of this SystemSettings.

        High  # noqa: E501

        :param integrity_monitoring_setting_event_rank_severity_high: The integrity_monitoring_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_event_rank_severity_high = integrity_monitoring_setting_event_rank_severity_high

    @property
    def platform_setting_saml_retain_inactive_external_administrators_duration(self):
        """Gets the platform_setting_saml_retain_inactive_external_administrators_duration of this SystemSettings.  # noqa: E501

        Automatically delete inactive identity provider users after (days)  # noqa: E501

        :return: The platform_setting_saml_retain_inactive_external_administrators_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_saml_retain_inactive_external_administrators_duration

    @platform_setting_saml_retain_inactive_external_administrators_duration.setter
    def platform_setting_saml_retain_inactive_external_administrators_duration(self, platform_setting_saml_retain_inactive_external_administrators_duration):
        """Sets the platform_setting_saml_retain_inactive_external_administrators_duration of this SystemSettings.

        Automatically delete inactive identity provider users after (days)  # noqa: E501

        :param platform_setting_saml_retain_inactive_external_administrators_duration: The platform_setting_saml_retain_inactive_external_administrators_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_saml_retain_inactive_external_administrators_duration = platform_setting_saml_retain_inactive_external_administrators_duration

    @property
    def intrusion_prevention_setting_retain_event_duration(self):
        """Gets the intrusion_prevention_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Intrusion Prevention Events older than  # noqa: E501

        :return: The intrusion_prevention_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_retain_event_duration

    @intrusion_prevention_setting_retain_event_duration.setter
    def intrusion_prevention_setting_retain_event_duration(self, intrusion_prevention_setting_retain_event_duration):
        """Sets the intrusion_prevention_setting_retain_event_duration of this SystemSettings.

        Automatically delete Intrusion Prevention Events older than  # noqa: E501

        :param intrusion_prevention_setting_retain_event_duration: The intrusion_prevention_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_retain_event_duration = intrusion_prevention_setting_retain_event_duration

    @property
    def platform_setting_http_public_key_pin_policy_report_only_enabled(self):
        """Gets the platform_setting_http_public_key_pin_policy_report_only_enabled of this SystemSettings.  # noqa: E501

        Report only  # noqa: E501

        :return: The platform_setting_http_public_key_pin_policy_report_only_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_http_public_key_pin_policy_report_only_enabled

    @platform_setting_http_public_key_pin_policy_report_only_enabled.setter
    def platform_setting_http_public_key_pin_policy_report_only_enabled(self, platform_setting_http_public_key_pin_policy_report_only_enabled):
        """Sets the platform_setting_http_public_key_pin_policy_report_only_enabled of this SystemSettings.

        Report only  # noqa: E501

        :param platform_setting_http_public_key_pin_policy_report_only_enabled: The platform_setting_http_public_key_pin_policy_report_only_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_http_public_key_pin_policy_report_only_enabled = platform_setting_http_public_key_pin_policy_report_only_enabled

    @property
    def platform_setting_saml_service_provider_name(self):
        """Gets the platform_setting_saml_service_provider_name of this SystemSettings.  # noqa: E501

        Service Name  # noqa: E501

        :return: The platform_setting_saml_service_provider_name of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_saml_service_provider_name

    @platform_setting_saml_service_provider_name.setter
    def platform_setting_saml_service_provider_name(self, platform_setting_saml_service_provider_name):
        """Sets the platform_setting_saml_service_provider_name of this SystemSettings.

        Service Name  # noqa: E501

        :param platform_setting_saml_service_provider_name: The platform_setting_saml_service_provider_name of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_saml_service_provider_name = platform_setting_saml_service_provider_name

    @property
    def firewall_setting_internet_connectivity_test_url(self):
        """Gets the firewall_setting_internet_connectivity_test_url of this SystemSettings.  # noqa: E501

        URL for testing Internet Connectivity Status  # noqa: E501

        :return: The firewall_setting_internet_connectivity_test_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_internet_connectivity_test_url

    @firewall_setting_internet_connectivity_test_url.setter
    def firewall_setting_internet_connectivity_test_url(self, firewall_setting_internet_connectivity_test_url):
        """Sets the firewall_setting_internet_connectivity_test_url of this SystemSettings.

        URL for testing Internet Connectivity Status  # noqa: E501

        :param firewall_setting_internet_connectivity_test_url: The firewall_setting_internet_connectivity_test_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_internet_connectivity_test_url = firewall_setting_internet_connectivity_test_url

    @property
    def platform_setting_saml_service_provider_certificate_expiry_warning_days(self):
        """Gets the platform_setting_saml_service_provider_certificate_expiry_warning_days of this SystemSettings.  # noqa: E501

        Warn when the Deep Security Manager SAML Service Provider certificate will expire within (days)  # noqa: E501

        :return: The platform_setting_saml_service_provider_certificate_expiry_warning_days of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_saml_service_provider_certificate_expiry_warning_days

    @platform_setting_saml_service_provider_certificate_expiry_warning_days.setter
    def platform_setting_saml_service_provider_certificate_expiry_warning_days(self, platform_setting_saml_service_provider_certificate_expiry_warning_days):
        """Sets the platform_setting_saml_service_provider_certificate_expiry_warning_days of this SystemSettings.

        Warn when the Deep Security Manager SAML Service Provider certificate will expire within (days)  # noqa: E501

        :param platform_setting_saml_service_provider_certificate_expiry_warning_days: The platform_setting_saml_service_provider_certificate_expiry_warning_days of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_saml_service_provider_certificate_expiry_warning_days = platform_setting_saml_service_provider_certificate_expiry_warning_days

    @property
    def platform_setting_proxy_agent_update_proxy_id(self):
        """Gets the platform_setting_proxy_agent_update_proxy_id of this SystemSettings.  # noqa: E501

        Primary Security Update Proxy used by Agents, Appliances, and Relays:  # noqa: E501

        :return: The platform_setting_proxy_agent_update_proxy_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_proxy_agent_update_proxy_id

    @platform_setting_proxy_agent_update_proxy_id.setter
    def platform_setting_proxy_agent_update_proxy_id(self, platform_setting_proxy_agent_update_proxy_id):
        """Sets the platform_setting_proxy_agent_update_proxy_id of this SystemSettings.

        Primary Security Update Proxy used by Agents, Appliances, and Relays:  # noqa: E501

        :param platform_setting_proxy_agent_update_proxy_id: The platform_setting_proxy_agent_update_proxy_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_proxy_agent_update_proxy_id = platform_setting_proxy_agent_update_proxy_id

    @property
    def platform_setting_ddan_auto_submission_enabled(self):
        """Gets the platform_setting_ddan_auto_submission_enabled of this SystemSettings.  # noqa: E501

        Enable automatic file submission  # noqa: E501

        :return: The platform_setting_ddan_auto_submission_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_auto_submission_enabled

    @platform_setting_ddan_auto_submission_enabled.setter
    def platform_setting_ddan_auto_submission_enabled(self, platform_setting_ddan_auto_submission_enabled):
        """Sets the platform_setting_ddan_auto_submission_enabled of this SystemSettings.

        Enable automatic file submission  # noqa: E501

        :param platform_setting_ddan_auto_submission_enabled: The platform_setting_ddan_auto_submission_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_auto_submission_enabled = platform_setting_ddan_auto_submission_enabled

    @property
    def platform_setting_ddan_manual_source_api_key(self):
        """Gets the platform_setting_ddan_manual_source_api_key of this SystemSettings.  # noqa: E501

        API Key  # noqa: E501

        :return: The platform_setting_ddan_manual_source_api_key of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_manual_source_api_key

    @platform_setting_ddan_manual_source_api_key.setter
    def platform_setting_ddan_manual_source_api_key(self, platform_setting_ddan_manual_source_api_key):
        """Sets the platform_setting_ddan_manual_source_api_key of this SystemSettings.

        API Key  # noqa: E501

        :param platform_setting_ddan_manual_source_api_key: The platform_setting_ddan_manual_source_api_key of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_manual_source_api_key = platform_setting_ddan_manual_source_api_key

    @property
    def platform_setting_saml_service_provider_entity_id(self):
        """Gets the platform_setting_saml_service_provider_entity_id of this SystemSettings.  # noqa: E501

        Entity ID  # noqa: E501

        :return: The platform_setting_saml_service_provider_entity_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_saml_service_provider_entity_id

    @platform_setting_saml_service_provider_entity_id.setter
    def platform_setting_saml_service_provider_entity_id(self, platform_setting_saml_service_provider_entity_id):
        """Sets the platform_setting_saml_service_provider_entity_id of this SystemSettings.

        Entity ID  # noqa: E501

        :param platform_setting_saml_service_provider_entity_id: The platform_setting_saml_service_provider_entity_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_saml_service_provider_entity_id = platform_setting_saml_service_provider_entity_id

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_error(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_error of this SystemSettings.  # noqa: E501

        Error  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_error of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_error

    @intrusion_prevention_setting_event_rank_severity_filter_error.setter
    def intrusion_prevention_setting_event_rank_severity_filter_error(self, intrusion_prevention_setting_event_rank_severity_filter_error):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_error of this SystemSettings.

        Error  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_error: The intrusion_prevention_setting_event_rank_severity_filter_error of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_error = intrusion_prevention_setting_event_rank_severity_filter_error

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_high(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_high of this SystemSettings.  # noqa: E501

        High  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_high of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_high

    @intrusion_prevention_setting_event_rank_severity_filter_high.setter
    def intrusion_prevention_setting_event_rank_severity_filter_high(self, intrusion_prevention_setting_event_rank_severity_filter_high):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_high of this SystemSettings.

        High  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_high: The intrusion_prevention_setting_event_rank_severity_filter_high of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_high = intrusion_prevention_setting_event_rank_severity_filter_high

    @property
    def platform_setting_trend_micro_xdr_api_key(self):
        """Gets the platform_setting_trend_micro_xdr_api_key of this SystemSettings.  # noqa: E501

        API Key  # noqa: E501

        :return: The platform_setting_trend_micro_xdr_api_key of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_trend_micro_xdr_api_key

    @platform_setting_trend_micro_xdr_api_key.setter
    def platform_setting_trend_micro_xdr_api_key(self, platform_setting_trend_micro_xdr_api_key):
        """Sets the platform_setting_trend_micro_xdr_api_key of this SystemSettings.

        API Key  # noqa: E501

        :param platform_setting_trend_micro_xdr_api_key: The platform_setting_trend_micro_xdr_api_key of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_trend_micro_xdr_api_key = platform_setting_trend_micro_xdr_api_key

    @property
    def integrity_monitoring_setting_event_rank_severity_low(self):
        """Gets the integrity_monitoring_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501

        Low  # noqa: E501

        :return: The integrity_monitoring_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_event_rank_severity_low

    @integrity_monitoring_setting_event_rank_severity_low.setter
    def integrity_monitoring_setting_event_rank_severity_low(self, integrity_monitoring_setting_event_rank_severity_low):
        """Sets the integrity_monitoring_setting_event_rank_severity_low of this SystemSettings.

        Low  # noqa: E501

        :param integrity_monitoring_setting_event_rank_severity_low: The integrity_monitoring_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_event_rank_severity_low = integrity_monitoring_setting_event_rank_severity_low

    @property
    def platform_setting_trend_micro_xdr_company_id(self):
        """Gets the platform_setting_trend_micro_xdr_company_id of this SystemSettings.  # noqa: E501

        Company ID  # noqa: E501

        :return: The platform_setting_trend_micro_xdr_company_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_trend_micro_xdr_company_id

    @platform_setting_trend_micro_xdr_company_id.setter
    def platform_setting_trend_micro_xdr_company_id(self, platform_setting_trend_micro_xdr_company_id):
        """Sets the platform_setting_trend_micro_xdr_company_id of this SystemSettings.

        Company ID  # noqa: E501

        :param platform_setting_trend_micro_xdr_company_id: The platform_setting_trend_micro_xdr_company_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_trend_micro_xdr_company_id = platform_setting_trend_micro_xdr_company_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

