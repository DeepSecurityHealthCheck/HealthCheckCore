# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.855
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInformationRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_manage_extensions': 'bool',
        'can_manage_nodes': 'bool',
        'can_view_system_information': 'bool'
    }

    attribute_map = {
        'can_manage_extensions': 'canManageExtensions',
        'can_manage_nodes': 'canManageNodes',
        'can_view_system_information': 'canViewSystemInformation'
    }

    def __init__(self, can_manage_extensions=None, can_manage_nodes=None, can_view_system_information=None):  # noqa: E501
        """SystemInformationRights - a model defined in Swagger"""  # noqa: E501

        self._can_manage_extensions = None
        self._can_manage_nodes = None
        self._can_view_system_information = None
        self.discriminator = None

        if can_manage_extensions is not None:
            self.can_manage_extensions = can_manage_extensions
        if can_manage_nodes is not None:
            self.can_manage_nodes = can_manage_nodes
        if can_view_system_information is not None:
            self.can_view_system_information = can_view_system_information

    @property
    def can_manage_extensions(self):
        """Gets the can_manage_extensions of this SystemInformationRights.  # noqa: E501

        Right to manage extensions.  # noqa: E501

        :return: The can_manage_extensions of this SystemInformationRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage_extensions

    @can_manage_extensions.setter
    def can_manage_extensions(self, can_manage_extensions):
        """Sets the can_manage_extensions of this SystemInformationRights.

        Right to manage extensions.  # noqa: E501

        :param can_manage_extensions: The can_manage_extensions of this SystemInformationRights.  # noqa: E501
        :type: bool
        """

        self._can_manage_extensions = can_manage_extensions

    @property
    def can_manage_nodes(self):
        """Gets the can_manage_nodes of this SystemInformationRights.  # noqa: E501

        Right to manage nodes.  # noqa: E501

        :return: The can_manage_nodes of this SystemInformationRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage_nodes

    @can_manage_nodes.setter
    def can_manage_nodes(self, can_manage_nodes):
        """Sets the can_manage_nodes of this SystemInformationRights.

        Right to manage nodes.  # noqa: E501

        :param can_manage_nodes: The can_manage_nodes of this SystemInformationRights.  # noqa: E501
        :type: bool
        """

        self._can_manage_nodes = can_manage_nodes

    @property
    def can_view_system_information(self):
        """Gets the can_view_system_information of this SystemInformationRights.  # noqa: E501

        Right to view system information.  # noqa: E501

        :return: The can_view_system_information of this SystemInformationRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_view_system_information

    @can_view_system_information.setter
    def can_view_system_information(self, can_view_system_information):
        """Sets the can_view_system_information of this SystemInformationRights.

        Right to view system information.  # noqa: E501

        :param can_view_system_information: The can_view_system_information of this SystemInformationRights.  # noqa: E501
        :type: bool
        """

        self._can_view_system_information = can_view_system_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInformationRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInformationRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

