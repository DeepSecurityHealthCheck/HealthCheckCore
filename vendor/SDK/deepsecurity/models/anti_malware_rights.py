# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 20.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepsecurity.models.anti_malware_configuration_rights import AntiMalwareConfigurationRights  # noqa: F401,E501
from deepsecurity.models.directory_list_rights import DirectoryListRights  # noqa: F401,E501
from deepsecurity.models.file_extension_list_rights import FileExtensionListRights  # noqa: F401,E501
from deepsecurity.models.file_list_rights import FileListRights  # noqa: F401,E501
from deepsecurity.models.identified_file_rights import IdentifiedFileRights  # noqa: F401,E501


class AntiMalwareRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anti_malware_configuration_rights': 'AntiMalwareConfigurationRights',
        'directory_list_rights': 'DirectoryListRights',
        'file_list_rights': 'FileListRights',
        'file_extension_list_rights': 'FileExtensionListRights',
        'identified_file_rights': 'IdentifiedFileRights'
    }

    attribute_map = {
        'anti_malware_configuration_rights': 'antiMalwareConfigurationRights',
        'directory_list_rights': 'directoryListRights',
        'file_list_rights': 'fileListRights',
        'file_extension_list_rights': 'fileExtensionListRights',
        'identified_file_rights': 'identifiedFileRights'
    }

    def __init__(self, anti_malware_configuration_rights=None, directory_list_rights=None, file_list_rights=None, file_extension_list_rights=None, identified_file_rights=None):  # noqa: E501
        """AntiMalwareRights - a model defined in Swagger"""  # noqa: E501

        self._anti_malware_configuration_rights = None
        self._directory_list_rights = None
        self._file_list_rights = None
        self._file_extension_list_rights = None
        self._identified_file_rights = None
        self.discriminator = None

        if anti_malware_configuration_rights is not None:
            self.anti_malware_configuration_rights = anti_malware_configuration_rights
        if directory_list_rights is not None:
            self.directory_list_rights = directory_list_rights
        if file_list_rights is not None:
            self.file_list_rights = file_list_rights
        if file_extension_list_rights is not None:
            self.file_extension_list_rights = file_extension_list_rights
        if identified_file_rights is not None:
            self.identified_file_rights = identified_file_rights

    @property
    def anti_malware_configuration_rights(self):
        """Gets the anti_malware_configuration_rights of this AntiMalwareRights.  # noqa: E501

        Rights related to anti malware configurations.  # noqa: E501

        :return: The anti_malware_configuration_rights of this AntiMalwareRights.  # noqa: E501
        :rtype: AntiMalwareConfigurationRights
        """
        return self._anti_malware_configuration_rights

    @anti_malware_configuration_rights.setter
    def anti_malware_configuration_rights(self, anti_malware_configuration_rights):
        """Sets the anti_malware_configuration_rights of this AntiMalwareRights.

        Rights related to anti malware configurations.  # noqa: E501

        :param anti_malware_configuration_rights: The anti_malware_configuration_rights of this AntiMalwareRights.  # noqa: E501
        :type: AntiMalwareConfigurationRights
        """

        self._anti_malware_configuration_rights = anti_malware_configuration_rights

    @property
    def directory_list_rights(self):
        """Gets the directory_list_rights of this AntiMalwareRights.  # noqa: E501

        Rights related to directory lists.  # noqa: E501

        :return: The directory_list_rights of this AntiMalwareRights.  # noqa: E501
        :rtype: DirectoryListRights
        """
        return self._directory_list_rights

    @directory_list_rights.setter
    def directory_list_rights(self, directory_list_rights):
        """Sets the directory_list_rights of this AntiMalwareRights.

        Rights related to directory lists.  # noqa: E501

        :param directory_list_rights: The directory_list_rights of this AntiMalwareRights.  # noqa: E501
        :type: DirectoryListRights
        """

        self._directory_list_rights = directory_list_rights

    @property
    def file_list_rights(self):
        """Gets the file_list_rights of this AntiMalwareRights.  # noqa: E501

        Rights related to file lists.  # noqa: E501

        :return: The file_list_rights of this AntiMalwareRights.  # noqa: E501
        :rtype: FileListRights
        """
        return self._file_list_rights

    @file_list_rights.setter
    def file_list_rights(self, file_list_rights):
        """Sets the file_list_rights of this AntiMalwareRights.

        Rights related to file lists.  # noqa: E501

        :param file_list_rights: The file_list_rights of this AntiMalwareRights.  # noqa: E501
        :type: FileListRights
        """

        self._file_list_rights = file_list_rights

    @property
    def file_extension_list_rights(self):
        """Gets the file_extension_list_rights of this AntiMalwareRights.  # noqa: E501

        Rights related to file extension lists.  # noqa: E501

        :return: The file_extension_list_rights of this AntiMalwareRights.  # noqa: E501
        :rtype: FileExtensionListRights
        """
        return self._file_extension_list_rights

    @file_extension_list_rights.setter
    def file_extension_list_rights(self, file_extension_list_rights):
        """Sets the file_extension_list_rights of this AntiMalwareRights.

        Rights related to file extension lists.  # noqa: E501

        :param file_extension_list_rights: The file_extension_list_rights of this AntiMalwareRights.  # noqa: E501
        :type: FileExtensionListRights
        """

        self._file_extension_list_rights = file_extension_list_rights

    @property
    def identified_file_rights(self):
        """Gets the identified_file_rights of this AntiMalwareRights.  # noqa: E501

        Rights related to identified files.  # noqa: E501

        :return: The identified_file_rights of this AntiMalwareRights.  # noqa: E501
        :rtype: IdentifiedFileRights
        """
        return self._identified_file_rights

    @identified_file_rights.setter
    def identified_file_rights(self, identified_file_rights):
        """Sets the identified_file_rights of this AntiMalwareRights.

        Rights related to identified files.  # noqa: E501

        :param identified_file_rights: The identified_file_rights of this AntiMalwareRights.  # noqa: E501
        :type: IdentifiedFileRights
        """

        self._identified_file_rights = identified_file_rights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AntiMalwareRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AntiMalwareRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

