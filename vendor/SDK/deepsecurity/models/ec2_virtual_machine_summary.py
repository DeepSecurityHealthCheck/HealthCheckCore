# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.855
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepsecurity.models.virtual_machine_metadata import VirtualMachineMetadata  # noqa: F401,E501
from deepsecurity.models.virtual_machine_security_group import VirtualMachineSecurityGroup  # noqa: F401,E501


class Ec2VirtualMachineSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_provider': 'str',
        'account_id': 'str',
        'operating_system': 'str',
        'private_ip_address': 'str',
        'public_ip_address': 'str',
        'availability_zone': 'str',
        'instance_id': 'str',
        'security_groups': 'list[VirtualMachineSecurityGroup]',
        'type': 'str',
        'virtualization_type': 'str',
        'state': 'str',
        'metadata': 'list[VirtualMachineMetadata]',
        'ami_id': 'str',
        'dns_name': 'str'
    }

    attribute_map = {
        'cloud_provider': 'cloudProvider',
        'account_id': 'accountID',
        'operating_system': 'operatingSystem',
        'private_ip_address': 'privateIPAddress',
        'public_ip_address': 'publicIPAddress',
        'availability_zone': 'availabilityZone',
        'instance_id': 'instanceID',
        'security_groups': 'securityGroups',
        'type': 'type',
        'virtualization_type': 'virtualizationType',
        'state': 'state',
        'metadata': 'metadata',
        'ami_id': 'amiID',
        'dns_name': 'DNSName'
    }

    def __init__(self, cloud_provider=None, account_id=None, operating_system=None, private_ip_address=None, public_ip_address=None, availability_zone=None, instance_id=None, security_groups=None, type=None, virtualization_type=None, state=None, metadata=None, ami_id=None, dns_name=None):  # noqa: E501
        """Ec2VirtualMachineSummary - a model defined in Swagger"""  # noqa: E501

        self._cloud_provider = None
        self._account_id = None
        self._operating_system = None
        self._private_ip_address = None
        self._public_ip_address = None
        self._availability_zone = None
        self._instance_id = None
        self._security_groups = None
        self._type = None
        self._virtualization_type = None
        self._state = None
        self._metadata = None
        self._ami_id = None
        self._dns_name = None
        self.discriminator = None

        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if account_id is not None:
            self.account_id = account_id
        if operating_system is not None:
            self.operating_system = operating_system
        if private_ip_address is not None:
            self.private_ip_address = private_ip_address
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address
        if availability_zone is not None:
            self.availability_zone = availability_zone
        if instance_id is not None:
            self.instance_id = instance_id
        if security_groups is not None:
            self.security_groups = security_groups
        if type is not None:
            self.type = type
        if virtualization_type is not None:
            self.virtualization_type = virtualization_type
        if state is not None:
            self.state = state
        if metadata is not None:
            self.metadata = metadata
        if ami_id is not None:
            self.ami_id = ami_id
        if dns_name is not None:
            self.dns_name = dns_name

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this Ec2VirtualMachineSummary.  # noqa: E501

        Cloud provider: \"AWS\".  # noqa: E501

        :return: The cloud_provider of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this Ec2VirtualMachineSummary.

        Cloud provider: \"AWS\".  # noqa: E501

        :param cloud_provider: The cloud_provider of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._cloud_provider = cloud_provider

    @property
    def account_id(self):
        """Gets the account_id of this Ec2VirtualMachineSummary.  # noqa: E501

        Account ID. Searchable as String.  # noqa: E501

        :return: The account_id of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Ec2VirtualMachineSummary.

        Account ID. Searchable as String.  # noqa: E501

        :param account_id: The account_id of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def operating_system(self):
        """Gets the operating_system of this Ec2VirtualMachineSummary.  # noqa: E501

        Operating system, for example: \"Microsoft Windows (64 bit)\". Searchable as String.  # noqa: E501

        :return: The operating_system of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this Ec2VirtualMachineSummary.

        Operating system, for example: \"Microsoft Windows (64 bit)\". Searchable as String.  # noqa: E501

        :param operating_system: The operating_system of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this Ec2VirtualMachineSummary.  # noqa: E501

        Private IP address. Searchable as String.  # noqa: E501

        :return: The private_ip_address of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this Ec2VirtualMachineSummary.

        Private IP address. Searchable as String.  # noqa: E501

        :param private_ip_address: The private_ip_address of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._private_ip_address = private_ip_address

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this Ec2VirtualMachineSummary.  # noqa: E501

        Public IP address. Searchable as String.  # noqa: E501

        :return: The public_ip_address of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this Ec2VirtualMachineSummary.

        Public IP address. Searchable as String.  # noqa: E501

        :param public_ip_address: The public_ip_address of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._public_ip_address = public_ip_address

    @property
    def availability_zone(self):
        """Gets the availability_zone of this Ec2VirtualMachineSummary.  # noqa: E501

        Availability Zone, for example: \"us-east-1a\". Searchable as String.  # noqa: E501

        :return: The availability_zone of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this Ec2VirtualMachineSummary.

        Availability Zone, for example: \"us-east-1a\". Searchable as String.  # noqa: E501

        :param availability_zone: The availability_zone of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def instance_id(self):
        """Gets the instance_id of this Ec2VirtualMachineSummary.  # noqa: E501

        Instance ID, for example: \"i-0e80f75f9532ad1ba\". Searchable as String.  # noqa: E501

        :return: The instance_id of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Ec2VirtualMachineSummary.

        Instance ID, for example: \"i-0e80f75f9532ad1ba\". Searchable as String.  # noqa: E501

        :param instance_id: The instance_id of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def security_groups(self):
        """Gets the security_groups of this Ec2VirtualMachineSummary.  # noqa: E501

        List of security groups.  # noqa: E501

        :return: The security_groups of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: list[VirtualMachineSecurityGroup]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this Ec2VirtualMachineSummary.

        List of security groups.  # noqa: E501

        :param security_groups: The security_groups of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: list[VirtualMachineSecurityGroup]
        """

        self._security_groups = security_groups

    @property
    def type(self):
        """Gets the type of this Ec2VirtualMachineSummary.  # noqa: E501

        Instance type, for example: \"t2.micro\". Searchable as String.  # noqa: E501

        :return: The type of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ec2VirtualMachineSummary.

        Instance type, for example: \"t2.micro\". Searchable as String.  # noqa: E501

        :param type: The type of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def virtualization_type(self):
        """Gets the virtualization_type of this Ec2VirtualMachineSummary.  # noqa: E501

        Virtualization type, for example: \"hvm\". Searchable as String.  # noqa: E501

        :return: The virtualization_type of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._virtualization_type

    @virtualization_type.setter
    def virtualization_type(self, virtualization_type):
        """Sets the virtualization_type of this Ec2VirtualMachineSummary.

        Virtualization type, for example: \"hvm\". Searchable as String.  # noqa: E501

        :param virtualization_type: The virtualization_type of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._virtualization_type = virtualization_type

    @property
    def state(self):
        """Gets the state of this Ec2VirtualMachineSummary.  # noqa: E501

        Power state, for example, \"POWER ON\".  # noqa: E501

        :return: The state of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Ec2VirtualMachineSummary.

        Power state, for example, \"POWER ON\".  # noqa: E501

        :param state: The state of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def metadata(self):
        """Gets the metadata of this Ec2VirtualMachineSummary.  # noqa: E501

        List of name/value metadata pairs.  # noqa: E501

        :return: The metadata of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: list[VirtualMachineMetadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Ec2VirtualMachineSummary.

        List of name/value metadata pairs.  # noqa: E501

        :param metadata: The metadata of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: list[VirtualMachineMetadata]
        """

        self._metadata = metadata

    @property
    def ami_id(self):
        """Gets the ami_id of this Ec2VirtualMachineSummary.  # noqa: E501


        :return: The ami_id of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._ami_id

    @ami_id.setter
    def ami_id(self, ami_id):
        """Sets the ami_id of this Ec2VirtualMachineSummary.


        :param ami_id: The ami_id of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._ami_id = ami_id

    @property
    def dns_name(self):
        """Gets the dns_name of this Ec2VirtualMachineSummary.  # noqa: E501


        :return: The dns_name of this Ec2VirtualMachineSummary.  # noqa: E501
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this Ec2VirtualMachineSummary.


        :param dns_name: The dns_name of this Ec2VirtualMachineSummary.  # noqa: E501
        :type: str
        """

        self._dns_name = dns_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ec2VirtualMachineSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ec2VirtualMachineSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

