# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.855
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Snsstatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_attempt_time': 'int',
        'message': 'str',
        'status': 'str',
        'failure_reason': 'str',
        'topic_arn': 'str'
    }

    attribute_map = {
        'last_attempt_time': 'lastAttemptTime',
        'message': 'message',
        'status': 'status',
        'failure_reason': 'failureReason',
        'topic_arn': 'topicArn'
    }

    def __init__(self, last_attempt_time=None, message=None, status=None, failure_reason=None, topic_arn=None):  # noqa: E501
        """Snsstatus - a model defined in Swagger"""  # noqa: E501

        self._last_attempt_time = None
        self._message = None
        self._status = None
        self._failure_reason = None
        self._topic_arn = None
        self.discriminator = None

        if last_attempt_time is not None:
            self.last_attempt_time = last_attempt_time
        if message is not None:
            self.message = message
        if status is not None:
            self.status = status
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if topic_arn is not None:
            self.topic_arn = topic_arn

    @property
    def last_attempt_time(self):
        """Gets the last_attempt_time of this Snsstatus.  # noqa: E501

        Last time whem an attemp to forward to the tenant designated SNS topic was made.  # noqa: E501

        :return: The last_attempt_time of this Snsstatus.  # noqa: E501
        :rtype: int
        """
        return self._last_attempt_time

    @last_attempt_time.setter
    def last_attempt_time(self, last_attempt_time):
        """Sets the last_attempt_time of this Snsstatus.

        Last time whem an attemp to forward to the tenant designated SNS topic was made.  # noqa: E501

        :param last_attempt_time: The last_attempt_time of this Snsstatus.  # noqa: E501
        :type: int
        """

        self._last_attempt_time = last_attempt_time

    @property
    def message(self):
        """Gets the message of this Snsstatus.  # noqa: E501

        Failed event message to reflect in the DSM alert.  # noqa: E501

        :return: The message of this Snsstatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Snsstatus.

        Failed event message to reflect in the DSM alert.  # noqa: E501

        :param message: The message of this Snsstatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this Snsstatus.  # noqa: E501

        Result of last attemp to forward to the tenant designated SNS topic.  # noqa: E501

        :return: The status of this Snsstatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Snsstatus.

        Result of last attemp to forward to the tenant designated SNS topic.  # noqa: E501

        :param status: The status of this Snsstatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["failure", "success"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def failure_reason(self):
        """Gets the failure_reason of this Snsstatus.  # noqa: E501

        Reported reason for forwarding failure.  # noqa: E501

        :return: The failure_reason of this Snsstatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this Snsstatus.

        Reported reason for forwarding failure.  # noqa: E501

        :param failure_reason: The failure_reason of this Snsstatus.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def topic_arn(self):
        """Gets the topic_arn of this Snsstatus.  # noqa: E501

        ARN of SNS topic that the event was intended to.  # noqa: E501

        :return: The topic_arn of this Snsstatus.  # noqa: E501
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this Snsstatus.

        ARN of SNS topic that the event was intended to.  # noqa: E501

        :param topic_arn: The topic_arn of this Snsstatus.  # noqa: E501
        :type: str
        """

        self._topic_arn = topic_arn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Snsstatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snsstatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

