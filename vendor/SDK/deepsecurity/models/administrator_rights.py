# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.969
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdministratorRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_create_new_administrators': 'bool',
        'can_delete_administrators': 'bool',
        'can_edit_administrator_properties': 'bool',
        'can_view_administrators': 'bool'
    }

    attribute_map = {
        'can_create_new_administrators': 'canCreateNewAdministrators',
        'can_delete_administrators': 'canDeleteAdministrators',
        'can_edit_administrator_properties': 'canEditAdministratorProperties',
        'can_view_administrators': 'canViewAdministrators'
    }

    def __init__(self, can_create_new_administrators=None, can_delete_administrators=None, can_edit_administrator_properties=None, can_view_administrators=None):  # noqa: E501
        """AdministratorRights - a model defined in Swagger"""  # noqa: E501

        self._can_create_new_administrators = None
        self._can_delete_administrators = None
        self._can_edit_administrator_properties = None
        self._can_view_administrators = None
        self.discriminator = None

        if can_create_new_administrators is not None:
            self.can_create_new_administrators = can_create_new_administrators
        if can_delete_administrators is not None:
            self.can_delete_administrators = can_delete_administrators
        if can_edit_administrator_properties is not None:
            self.can_edit_administrator_properties = can_edit_administrator_properties
        if can_view_administrators is not None:
            self.can_view_administrators = can_view_administrators

    @property
    def can_create_new_administrators(self):
        """Gets the can_create_new_administrators of this AdministratorRights.  # noqa: E501

        Right to create new administrators.  # noqa: E501

        :return: The can_create_new_administrators of this AdministratorRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_new_administrators

    @can_create_new_administrators.setter
    def can_create_new_administrators(self, can_create_new_administrators):
        """Sets the can_create_new_administrators of this AdministratorRights.

        Right to create new administrators.  # noqa: E501

        :param can_create_new_administrators: The can_create_new_administrators of this AdministratorRights.  # noqa: E501
        :type: bool
        """

        self._can_create_new_administrators = can_create_new_administrators

    @property
    def can_delete_administrators(self):
        """Gets the can_delete_administrators of this AdministratorRights.  # noqa: E501

        Right to delete administrators.  # noqa: E501

        :return: The can_delete_administrators of this AdministratorRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_administrators

    @can_delete_administrators.setter
    def can_delete_administrators(self, can_delete_administrators):
        """Sets the can_delete_administrators of this AdministratorRights.

        Right to delete administrators.  # noqa: E501

        :param can_delete_administrators: The can_delete_administrators of this AdministratorRights.  # noqa: E501
        :type: bool
        """

        self._can_delete_administrators = can_delete_administrators

    @property
    def can_edit_administrator_properties(self):
        """Gets the can_edit_administrator_properties of this AdministratorRights.  # noqa: E501

        Right to edit administrators.  # noqa: E501

        :return: The can_edit_administrator_properties of this AdministratorRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_administrator_properties

    @can_edit_administrator_properties.setter
    def can_edit_administrator_properties(self, can_edit_administrator_properties):
        """Sets the can_edit_administrator_properties of this AdministratorRights.

        Right to edit administrators.  # noqa: E501

        :param can_edit_administrator_properties: The can_edit_administrator_properties of this AdministratorRights.  # noqa: E501
        :type: bool
        """

        self._can_edit_administrator_properties = can_edit_administrator_properties

    @property
    def can_view_administrators(self):
        """Gets the can_view_administrators of this AdministratorRights.  # noqa: E501

        Right to view administrators.  # noqa: E501

        :return: The can_view_administrators of this AdministratorRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_view_administrators

    @can_view_administrators.setter
    def can_view_administrators(self, can_view_administrators):
        """Sets the can_view_administrators of this AdministratorRights.

        Right to view administrators.  # noqa: E501

        :param can_view_administrators: The can_view_administrators of this AdministratorRights.  # noqa: E501
        :type: bool
        """

        self._can_view_administrators = can_view_administrators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdministratorRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdministratorRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

