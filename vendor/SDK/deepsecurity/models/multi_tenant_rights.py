# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 20.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MultiTenantRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_create_tenants': 'bool',
        'can_delete_tenants': 'bool',
        'can_edit_tenant_general_properties': 'bool',
        'can_edit_tenant_modules': 'bool',
        'can_edit_tenant_account_details': 'bool',
        'can_edit_tenant_features': 'bool',
        'can_edit_tenant_settings': 'bool',
        'can_create_and_edit_tenant_database_servers': 'bool',
        'can_delete_tenant_database_servers': 'bool',
        'can_manage_tenant_api_keys': 'bool',
        'can_sign_in_as_tenant': 'bool',
        'can_view_tenants': 'bool'
    }

    attribute_map = {
        'can_create_tenants': 'canCreateTenants',
        'can_delete_tenants': 'canDeleteTenants',
        'can_edit_tenant_general_properties': 'canEditTenantGeneralProperties',
        'can_edit_tenant_modules': 'canEditTenantModules',
        'can_edit_tenant_account_details': 'canEditTenantAccountDetails',
        'can_edit_tenant_features': 'canEditTenantFeatures',
        'can_edit_tenant_settings': 'canEditTenantSettings',
        'can_create_and_edit_tenant_database_servers': 'canCreateAndEditTenantDatabaseServers',
        'can_delete_tenant_database_servers': 'canDeleteTenantDatabaseServers',
        'can_manage_tenant_api_keys': 'canManageTenantAPIKeys',
        'can_sign_in_as_tenant': 'canSignInAsTenant',
        'can_view_tenants': 'canViewTenants'
    }

    def __init__(self, can_create_tenants=None, can_delete_tenants=None, can_edit_tenant_general_properties=None, can_edit_tenant_modules=None, can_edit_tenant_account_details=None, can_edit_tenant_features=None, can_edit_tenant_settings=None, can_create_and_edit_tenant_database_servers=None, can_delete_tenant_database_servers=None, can_manage_tenant_api_keys=None, can_sign_in_as_tenant=None, can_view_tenants=None):  # noqa: E501
        """MultiTenantRights - a model defined in Swagger"""  # noqa: E501

        self._can_create_tenants = None
        self._can_delete_tenants = None
        self._can_edit_tenant_general_properties = None
        self._can_edit_tenant_modules = None
        self._can_edit_tenant_account_details = None
        self._can_edit_tenant_features = None
        self._can_edit_tenant_settings = None
        self._can_create_and_edit_tenant_database_servers = None
        self._can_delete_tenant_database_servers = None
        self._can_manage_tenant_api_keys = None
        self._can_sign_in_as_tenant = None
        self._can_view_tenants = None
        self.discriminator = None

        if can_create_tenants is not None:
            self.can_create_tenants = can_create_tenants
        if can_delete_tenants is not None:
            self.can_delete_tenants = can_delete_tenants
        if can_edit_tenant_general_properties is not None:
            self.can_edit_tenant_general_properties = can_edit_tenant_general_properties
        if can_edit_tenant_modules is not None:
            self.can_edit_tenant_modules = can_edit_tenant_modules
        if can_edit_tenant_account_details is not None:
            self.can_edit_tenant_account_details = can_edit_tenant_account_details
        if can_edit_tenant_features is not None:
            self.can_edit_tenant_features = can_edit_tenant_features
        if can_edit_tenant_settings is not None:
            self.can_edit_tenant_settings = can_edit_tenant_settings
        if can_create_and_edit_tenant_database_servers is not None:
            self.can_create_and_edit_tenant_database_servers = can_create_and_edit_tenant_database_servers
        if can_delete_tenant_database_servers is not None:
            self.can_delete_tenant_database_servers = can_delete_tenant_database_servers
        if can_manage_tenant_api_keys is not None:
            self.can_manage_tenant_api_keys = can_manage_tenant_api_keys
        if can_sign_in_as_tenant is not None:
            self.can_sign_in_as_tenant = can_sign_in_as_tenant
        if can_view_tenants is not None:
            self.can_view_tenants = can_view_tenants

    @property
    def can_create_tenants(self):
        """Gets the can_create_tenants of this MultiTenantRights.  # noqa: E501

        Right to create new tenants.  # noqa: E501

        :return: The can_create_tenants of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_tenants

    @can_create_tenants.setter
    def can_create_tenants(self, can_create_tenants):
        """Sets the can_create_tenants of this MultiTenantRights.

        Right to create new tenants.  # noqa: E501

        :param can_create_tenants: The can_create_tenants of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_create_tenants = can_create_tenants

    @property
    def can_delete_tenants(self):
        """Gets the can_delete_tenants of this MultiTenantRights.  # noqa: E501

        Right to delete tenants.  # noqa: E501

        :return: The can_delete_tenants of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_tenants

    @can_delete_tenants.setter
    def can_delete_tenants(self, can_delete_tenants):
        """Sets the can_delete_tenants of this MultiTenantRights.

        Right to delete tenants.  # noqa: E501

        :param can_delete_tenants: The can_delete_tenants of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_delete_tenants = can_delete_tenants

    @property
    def can_edit_tenant_general_properties(self):
        """Gets the can_edit_tenant_general_properties of this MultiTenantRights.  # noqa: E501

        Right to edit tenant general properties.  # noqa: E501

        :return: The can_edit_tenant_general_properties of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_tenant_general_properties

    @can_edit_tenant_general_properties.setter
    def can_edit_tenant_general_properties(self, can_edit_tenant_general_properties):
        """Sets the can_edit_tenant_general_properties of this MultiTenantRights.

        Right to edit tenant general properties.  # noqa: E501

        :param can_edit_tenant_general_properties: The can_edit_tenant_general_properties of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_edit_tenant_general_properties = can_edit_tenant_general_properties

    @property
    def can_edit_tenant_modules(self):
        """Gets the can_edit_tenant_modules of this MultiTenantRights.  # noqa: E501

        Right to edit tenant modules.  # noqa: E501

        :return: The can_edit_tenant_modules of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_tenant_modules

    @can_edit_tenant_modules.setter
    def can_edit_tenant_modules(self, can_edit_tenant_modules):
        """Sets the can_edit_tenant_modules of this MultiTenantRights.

        Right to edit tenant modules.  # noqa: E501

        :param can_edit_tenant_modules: The can_edit_tenant_modules of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_edit_tenant_modules = can_edit_tenant_modules

    @property
    def can_edit_tenant_account_details(self):
        """Gets the can_edit_tenant_account_details of this MultiTenantRights.  # noqa: E501

        Right to edit tenant account details.  # noqa: E501

        :return: The can_edit_tenant_account_details of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_tenant_account_details

    @can_edit_tenant_account_details.setter
    def can_edit_tenant_account_details(self, can_edit_tenant_account_details):
        """Sets the can_edit_tenant_account_details of this MultiTenantRights.

        Right to edit tenant account details.  # noqa: E501

        :param can_edit_tenant_account_details: The can_edit_tenant_account_details of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_edit_tenant_account_details = can_edit_tenant_account_details

    @property
    def can_edit_tenant_features(self):
        """Gets the can_edit_tenant_features of this MultiTenantRights.  # noqa: E501

        Right to edit tenant features.  # noqa: E501

        :return: The can_edit_tenant_features of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_tenant_features

    @can_edit_tenant_features.setter
    def can_edit_tenant_features(self, can_edit_tenant_features):
        """Sets the can_edit_tenant_features of this MultiTenantRights.

        Right to edit tenant features.  # noqa: E501

        :param can_edit_tenant_features: The can_edit_tenant_features of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_edit_tenant_features = can_edit_tenant_features

    @property
    def can_edit_tenant_settings(self):
        """Gets the can_edit_tenant_settings of this MultiTenantRights.  # noqa: E501

        Right to edit tenant settings.  # noqa: E501

        :return: The can_edit_tenant_settings of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_tenant_settings

    @can_edit_tenant_settings.setter
    def can_edit_tenant_settings(self, can_edit_tenant_settings):
        """Sets the can_edit_tenant_settings of this MultiTenantRights.

        Right to edit tenant settings.  # noqa: E501

        :param can_edit_tenant_settings: The can_edit_tenant_settings of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_edit_tenant_settings = can_edit_tenant_settings

    @property
    def can_create_and_edit_tenant_database_servers(self):
        """Gets the can_create_and_edit_tenant_database_servers of this MultiTenantRights.  # noqa: E501

        Right to create and edit tenant database servers.  # noqa: E501

        :return: The can_create_and_edit_tenant_database_servers of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_and_edit_tenant_database_servers

    @can_create_and_edit_tenant_database_servers.setter
    def can_create_and_edit_tenant_database_servers(self, can_create_and_edit_tenant_database_servers):
        """Sets the can_create_and_edit_tenant_database_servers of this MultiTenantRights.

        Right to create and edit tenant database servers.  # noqa: E501

        :param can_create_and_edit_tenant_database_servers: The can_create_and_edit_tenant_database_servers of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_create_and_edit_tenant_database_servers = can_create_and_edit_tenant_database_servers

    @property
    def can_delete_tenant_database_servers(self):
        """Gets the can_delete_tenant_database_servers of this MultiTenantRights.  # noqa: E501

        Right to delete tenant database servers.  # noqa: E501

        :return: The can_delete_tenant_database_servers of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_tenant_database_servers

    @can_delete_tenant_database_servers.setter
    def can_delete_tenant_database_servers(self, can_delete_tenant_database_servers):
        """Sets the can_delete_tenant_database_servers of this MultiTenantRights.

        Right to delete tenant database servers.  # noqa: E501

        :param can_delete_tenant_database_servers: The can_delete_tenant_database_servers of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_delete_tenant_database_servers = can_delete_tenant_database_servers

    @property
    def can_manage_tenant_api_keys(self):
        """Gets the can_manage_tenant_api_keys of this MultiTenantRights.  # noqa: E501

        Right to manage tenant API keys.  # noqa: E501

        :return: The can_manage_tenant_api_keys of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage_tenant_api_keys

    @can_manage_tenant_api_keys.setter
    def can_manage_tenant_api_keys(self, can_manage_tenant_api_keys):
        """Sets the can_manage_tenant_api_keys of this MultiTenantRights.

        Right to manage tenant API keys.  # noqa: E501

        :param can_manage_tenant_api_keys: The can_manage_tenant_api_keys of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_manage_tenant_api_keys = can_manage_tenant_api_keys

    @property
    def can_sign_in_as_tenant(self):
        """Gets the can_sign_in_as_tenant of this MultiTenantRights.  # noqa: E501

        Right to sign in as tenant.  # noqa: E501

        :return: The can_sign_in_as_tenant of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_sign_in_as_tenant

    @can_sign_in_as_tenant.setter
    def can_sign_in_as_tenant(self, can_sign_in_as_tenant):
        """Sets the can_sign_in_as_tenant of this MultiTenantRights.

        Right to sign in as tenant.  # noqa: E501

        :param can_sign_in_as_tenant: The can_sign_in_as_tenant of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_sign_in_as_tenant = can_sign_in_as_tenant

    @property
    def can_view_tenants(self):
        """Gets the can_view_tenants of this MultiTenantRights.  # noqa: E501

        Right to view tenants and multi-tenancy system settings.  # noqa: E501

        :return: The can_view_tenants of this MultiTenantRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_view_tenants

    @can_view_tenants.setter
    def can_view_tenants(self, can_view_tenants):
        """Sets the can_view_tenants of this MultiTenantRights.

        Right to view tenants and multi-tenancy system settings.  # noqa: E501

        :param can_view_tenants: The can_view_tenants of this MultiTenantRights.  # noqa: E501
        :type: bool
        """

        self._can_view_tenants = can_view_tenants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultiTenantRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiTenantRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

