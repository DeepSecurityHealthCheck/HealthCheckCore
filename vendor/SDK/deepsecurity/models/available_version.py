# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.969
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AvailableVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'is_latest': 'bool',
        'is_latest_lts': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'is_latest': 'isLatest',
        'is_latest_lts': 'isLatestLTS'
    }

    def __init__(self, version=None, is_latest=None, is_latest_lts=None):  # noqa: E501
        """AvailableVersion - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._is_latest = None
        self._is_latest_lts = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if is_latest is not None:
            self.is_latest = is_latest
        if is_latest_lts is not None:
            self.is_latest_lts = is_latest_lts

    @property
    def version(self):
        """Gets the version of this AvailableVersion.  # noqa: E501

        version of the available version. Searchable as String.  # noqa: E501

        :return: The version of this AvailableVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AvailableVersion.

        version of the available version. Searchable as String.  # noqa: E501

        :param version: The version of this AvailableVersion.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def is_latest(self):
        """Gets the is_latest of this AvailableVersion.  # noqa: E501

        `true` if the the version is the latest. Searchable as Boolean.  # noqa: E501

        :return: The is_latest of this AvailableVersion.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this AvailableVersion.

        `true` if the the version is the latest. Searchable as Boolean.  # noqa: E501

        :param is_latest: The is_latest of this AvailableVersion.  # noqa: E501
        :type: bool
        """

        self._is_latest = is_latest

    @property
    def is_latest_lts(self):
        """Gets the is_latest_lts of this AvailableVersion.  # noqa: E501

        `true` if the the version is the latest LTS. Searchable as Boolean.  # noqa: E501

        :return: The is_latest_lts of this AvailableVersion.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest_lts

    @is_latest_lts.setter
    def is_latest_lts(self, is_latest_lts):
        """Sets the is_latest_lts of this AvailableVersion.

        `true` if the the version is the latest LTS. Searchable as Boolean.  # noqa: E501

        :param is_latest_lts: The is_latest_lts of this AvailableVersion.  # noqa: E501
        :type: bool
        """

        self._is_latest_lts = is_latest_lts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvailableVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

