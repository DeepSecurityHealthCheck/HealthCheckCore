# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2020 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.855
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaggingRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_delete_auto_tag_rules': 'bool',
        'can_update_auto_tag_rules': 'bool',
        'can_run_auto_tag_rules': 'bool',
        'can_delete_tags': 'bool',
        'can_tag': 'bool'
    }

    attribute_map = {
        'can_delete_auto_tag_rules': 'canDeleteAutoTagRules',
        'can_update_auto_tag_rules': 'canUpdateAutoTagRules',
        'can_run_auto_tag_rules': 'canRunAutoTagRules',
        'can_delete_tags': 'canDeleteTags',
        'can_tag': 'canTag'
    }

    def __init__(self, can_delete_auto_tag_rules=None, can_update_auto_tag_rules=None, can_run_auto_tag_rules=None, can_delete_tags=None, can_tag=None):  # noqa: E501
        """TaggingRights - a model defined in Swagger"""  # noqa: E501

        self._can_delete_auto_tag_rules = None
        self._can_update_auto_tag_rules = None
        self._can_run_auto_tag_rules = None
        self._can_delete_tags = None
        self._can_tag = None
        self.discriminator = None

        if can_delete_auto_tag_rules is not None:
            self.can_delete_auto_tag_rules = can_delete_auto_tag_rules
        if can_update_auto_tag_rules is not None:
            self.can_update_auto_tag_rules = can_update_auto_tag_rules
        if can_run_auto_tag_rules is not None:
            self.can_run_auto_tag_rules = can_run_auto_tag_rules
        if can_delete_tags is not None:
            self.can_delete_tags = can_delete_tags
        if can_tag is not None:
            self.can_tag = can_tag

    @property
    def can_delete_auto_tag_rules(self):
        """Gets the can_delete_auto_tag_rules of this TaggingRights.  # noqa: E501

        Right to delete auto tag rules.  # noqa: E501

        :return: The can_delete_auto_tag_rules of this TaggingRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_auto_tag_rules

    @can_delete_auto_tag_rules.setter
    def can_delete_auto_tag_rules(self, can_delete_auto_tag_rules):
        """Sets the can_delete_auto_tag_rules of this TaggingRights.

        Right to delete auto tag rules.  # noqa: E501

        :param can_delete_auto_tag_rules: The can_delete_auto_tag_rules of this TaggingRights.  # noqa: E501
        :type: bool
        """

        self._can_delete_auto_tag_rules = can_delete_auto_tag_rules

    @property
    def can_update_auto_tag_rules(self):
        """Gets the can_update_auto_tag_rules of this TaggingRights.  # noqa: E501

        Right to update auto tag rules.  # noqa: E501

        :return: The can_update_auto_tag_rules of this TaggingRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_update_auto_tag_rules

    @can_update_auto_tag_rules.setter
    def can_update_auto_tag_rules(self, can_update_auto_tag_rules):
        """Sets the can_update_auto_tag_rules of this TaggingRights.

        Right to update auto tag rules.  # noqa: E501

        :param can_update_auto_tag_rules: The can_update_auto_tag_rules of this TaggingRights.  # noqa: E501
        :type: bool
        """

        self._can_update_auto_tag_rules = can_update_auto_tag_rules

    @property
    def can_run_auto_tag_rules(self):
        """Gets the can_run_auto_tag_rules of this TaggingRights.  # noqa: E501

        Right to run auto tag rules.  # noqa: E501

        :return: The can_run_auto_tag_rules of this TaggingRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_run_auto_tag_rules

    @can_run_auto_tag_rules.setter
    def can_run_auto_tag_rules(self, can_run_auto_tag_rules):
        """Sets the can_run_auto_tag_rules of this TaggingRights.

        Right to run auto tag rules.  # noqa: E501

        :param can_run_auto_tag_rules: The can_run_auto_tag_rules of this TaggingRights.  # noqa: E501
        :type: bool
        """

        self._can_run_auto_tag_rules = can_run_auto_tag_rules

    @property
    def can_delete_tags(self):
        """Gets the can_delete_tags of this TaggingRights.  # noqa: E501

        Right to delete tags.  # noqa: E501

        :return: The can_delete_tags of this TaggingRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_tags

    @can_delete_tags.setter
    def can_delete_tags(self, can_delete_tags):
        """Sets the can_delete_tags of this TaggingRights.

        Right to delete tags.  # noqa: E501

        :param can_delete_tags: The can_delete_tags of this TaggingRights.  # noqa: E501
        :type: bool
        """

        self._can_delete_tags = can_delete_tags

    @property
    def can_tag(self):
        """Gets the can_tag of this TaggingRights.  # noqa: E501

        Right to tag.  # noqa: E501

        :return: The can_tag of this TaggingRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_tag

    @can_tag.setter
    def can_tag(self, can_tag):
        """Sets the can_tag of this TaggingRights.

        Right to tag.  # noqa: E501

        :param can_tag: The can_tag of this TaggingRights.  # noqa: E501
        :type: bool
        """

        self._can_tag = can_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaggingRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaggingRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

